%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Erich Styger
%define DriverVersion 01.00
%define DriverDate    25.06.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_SendRecvByte Sends a byte through the SPI bus
%define! Description_ReadStatusRegister Reads the EEPROM status register.
%define! Description_SendAddr Sends the address packet to the EEPROM.
%define! Description_Write128Byte Writes a block of 128 bytes.
%define! Description_SetWriteEnable This method sets Write Enable Latch. The device will power-up in the write disable state when Vcc is applied. All programming instruction must therefore be preceded by a Write Enable instruction.
%define! Description_ClrWriteEnable This method resets Write Enable Latch.
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\AT25HP512Settings.Inc
%define! Abstract Common\AT25HP512Abstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"
%include sw\CommonSupport.prg

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;

#define %'ModuleName'%.BLOCK_SIZE 128 /*!< can only write blocks with size 128 */

typedef unsigned int EEPROM_Address; /*!< type for an eeprom address */

%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-BW_METHOD_BEGIN ReadBlock
%ifdef ReadBlock
byte %'ModuleName'%.%ReadBlock(EEPROM_Address addr, byte *data, word size);
%define! Paraddr
%define! Pardata
%define! Parsize
%define! RetVal
%include Common\AT25HP512ReadBlock.Inc

%endif %- ReadBlock
%-BW_METHOD_END ReadBlock
%-BW_METHOD_BEGIN ReadByte
%ifdef ReadByte
byte %'ModuleName'%.%ReadByte(EEPROM_Address addr, byte *data);
%define! Paraddr
%define! Pardata
%define! RetVal
%include Common\AT25HP512ReadByte.Inc

%endif %- ReadByte
%-BW_METHOD_END ReadByte
%-BW_METHOD_BEGIN WriteBlock
%ifdef WriteBlock
byte %'ModuleName'%.%WriteBlock(EEPROM_Address addr, byte *data, word size);
%define! Paraddr
%define! Pardata
%define! Parsize
%define! RetVal
%include Common\AT25HP512WriteBlock.Inc

%endif %- WriteBlock
%-BW_METHOD_END WriteBlock
%-INTERNAL_METHOD_BEG SetWriteEnable
byte %'ModuleName'%.SetWriteEnable(void);
%define! RetVal
%include Common\GeneralInternal.inc (SetWriteEnable)

%-INTERNAL_METHOD_END SetWriteEnable
%-INTERNAL_METHOD_BEG ClrWriteEnable
byte %'ModuleName'%.ClrWriteEnable(void);
%define! RetVal
%include Common\GeneralInternal.inc (ClrWriteEnable)

%-INTERNAL_METHOD_END ClrWriteEnable
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\AT25HP512Settings.Inc
%define! Abstract Common\AT25HP512Abstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%define CTAB 45
%-
#define EE_CHIPSELECT_ON()   %@ChipSelect@'ModuleName'%.ClrVal() /* chip select is low active */
#define EE_CHIPSELECT_OFF()  %@ChipSelect@'ModuleName'%.SetVal() /* chip select is low active */

%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG SendRecvByte
static byte SendRecvByte(byte *Byte);
%-INTERNAL_LOC_METHOD_END SendRecvByte
%-INTERNAL_LOC_METHOD_BEG ReadStatusRegister
static byte ReadStatusRegister(byte *Reg);
%-INTERNAL_LOC_METHOD_END ReadStatusRegister
%-INTERNAL_LOC_METHOD_BEG SendAddr
static byte SendAddr(EEPROM_Address Addr);
%-INTERNAL_LOC_METHOD_END SendAddr
%-INTERNAL_LOC_METHOD_BEG Write128Byte
static byte Write128Byte(EEPROM_Address addr, byte *data, word size);
%-INTERNAL_LOC_METHOD_END Write128Byte
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-INTERNAL_METHOD_BEG SendRecvByte
%define! ParByte
%define! RetVal
%include Common\GeneralInternalGlobal.inc (SendRecvByte)
static byte SendRecvByte(byte *Byte)
{
  byte ErrCode, SM_RCB;                %>%CTAB /* Temporary variable - data register address */
  word Cnt;                            %>%CTAB /* Temporary variable - data register address */

  do {
    ErrCode = %@HWSPI@'ModuleName'%.RecvChar(&SM_RCB); %>%CTAB /* Recive data from SPI bus */
  } while (ErrCode == ERR_OK);
  if (ErrCode != ERR_RXEMPTY) {        %>%CTAB /* Is not release value ERR_EMPTY */
    *Byte = 0x00;                      %>%CTAB /* Set data to 0 */
    return ErrCode;                    %>%CTAB /* Return error code */
  }
  ErrCode = %@HWSPI@'ModuleName'%.SendChar(*Byte); %>%CTAB /* Send data to SPI bus */
  if (ErrCode != ERR_OK) {             %>%CTAB /* Is release value error */
    *Byte = 0x00;                      %>%CTAB /* Return error */
    return ErrCode;                    %>%CTAB /* Return error code */
  }
  do {
    Cnt = %@HWSPI@'ModuleName'%.GetCharsInRxBuf(); %>%CTAB /* Get count char in TX buffer */
    if (ErrCode != ERR_OK) {           %>%CTAB /* Is release value error */
      *Byte = 0x00;                    %>%CTAB /* Send data to SPI bus */
      return ErrCode;                  %>%CTAB /* Return error code */
    }
  } while (Cnt == 0x00);
  return(%@HWSPI@'ModuleName'%.RecvChar(Byte)); %>%CTAB /* Return release error */
}

%-INTERNAL_METHOD_END SendRecvByte
%-INTERNAL_METHOD_BEG SendAddr
%define! ParAddr
%define! RetVal
%include Common\GeneralInternalGlobal.inc (SendAddr)
static byte SendAddr(EEPROM_Address Addr)
{
  byte SNDD;                           %>%CTAB /* Temporary variable - data register address */
  byte ErrCode;                        %>%CTAB /* Temporary variable - data register address */

  SNDD = (byte)(Addr >> 0x08);         %>%CTAB /* Set address */
  ErrCode = SendRecvByte(&SNDD);       %>%CTAB /* Send upper address into EEPROM */
  if (ErrCode == ERR_OK) {             %>%CTAB /* Is not release value error */
    SNDD = (byte)Addr;                 %>%CTAB /* Set address */
    return(SendRecvByte(&SNDD));       %>%CTAB /* Send lower address into EEPROM */
  }
  return ErrCode;                      %>%CTAB /* Return error code */
}

%-INTERNAL_METHOD_END SendAddr
%-INTERNAL_METHOD_BEG ReadStatusRegister
%define! ParReg
%define! RetVal
%include Common\GeneralInternalGlobal.inc (ReadStatusRegister)
static byte ReadStatusRegister(byte *Reg)
{
  byte ErrCode;                        %>%CTAB /* Temporary variable - data register address */

  EE_CHIPSELECT_ON();                  %>%CTAB /* Activate EEPROM */
  *Reg = 0x05;                         %>%CTAB /* Set instruction */
  ErrCode = SendRecvByte(Reg);         %>%CTAB /* Send instruction into EEPROM */
  if (ErrCode == ERR_OK)               %>%CTAB /* Is not release value error */
    ErrCode = SendRecvByte(Reg);       %>%CTAB /* Read data from EEPROM*/
  EE_CHIPSELECT_OFF();                 %>%CTAB /* Deactivate EEPROM */
  if (ErrCode == ERR_OK) {             %>%CTAB /* Is not release value error */
    if (*Reg & 0x01)                   %>%CTAB /* Is EEPROM busy */
      return ERR_BUSY;                 %>%CTAB /* Return "Device is busy" */
    if ((!(*Reg & 0x02)) | (*Reg & 0x0C)) %>%CTAB /* Is EEPROM write protected */
      return ERR_PROTECT;              %>%CTAB /* Return device is write protected */
  }
  return ErrCode;                      %>%CTAB /* Return error code */
}

%-INTERNAL_METHOD_END ReadStatusRegister

%-INTERNAL_METHOD_BEG Write128Byte
%define! Paraddr
%define! Pardata
%define! Parsize
%define! RetVal
%include Common\GeneralInternalGlobal.inc (Write128Byte)
static byte Write128Byte(EEPROM_Address addr, byte *data, word size)
{
  byte ErrCode, Reg;                   %>%CTAB /* Temporary variable - data register address */
  word Trials = 0x00;                  %>%CTAB /* Temporary variable - data register address */
  unsigned char i, tmp;

  if (size <= 0 || size != %'ModuleName'%.BLOCK_SIZE || (addr%%%'ModuleName'%.BLOCK_SIZE)!=0) { /* can only write 128 bytes, at page start address */
    return ERR_RANGE;
  }
  (void)%@HWSPI@'ModuleName'%.SetShiftClockPolarity(0x00);
  (void)%@HWSPI@'ModuleName'%.SetIdleClockPolarity(0x00);
  do {
    ErrCode = ReadStatusRegister(&Reg); %>%CTAB /* Get status register selected EEPROM */
    Trials++;                           %>%CTAB /* Increased fault */
  } while (((ErrCode == ERR_BUSY) | (Reg & 0x80) == 0x80 ) & (Trials < %WritingAttempts));
  if (ErrCode != ERR_OK)                %>%CTAB /* Is release value error */
    return ErrCode;                     %>%CTAB /* Return error */
  EE_CHIPSELECT_ON();                   %>%CTAB /* Activate EEPROM */
  Reg = 0x02;
  ErrCode = SendRecvByte(&Reg);         %>%CTAB /* Send instruction into EEPROM */
  if (ErrCode != ERR_OK)                %>%CTAB /* Is release value error */
    return ErrCode;                     %>%CTAB /* Return error */
  ErrCode = SendAddr(addr);             %>%CTAB /* Send address into EEPROM */
  if (ErrCode != ERR_OK)                %>%CTAB /* Is release value error */
    return ErrCode;                     %>%CTAB /* Return error */

  for(i=0;i<%'ModuleName'%.BLOCK_SIZE;i++) {    %>%CTAB /* write block of data */
    tmp = *data;
    ErrCode = SendRecvByte(&tmp);       %>%CTAB /* Write data to EEPROM */
    if (ErrCode != ERR_OK) {
      return ErrCode;
    }
    data++;
    size--;
    if (size <= 0) {
      i++;
      break;
    }
  }
  while (i<%'ModuleName'%.BLOCK_SIZE) { %>%CTAB /* fill up remaining bytes with zeros */
    tmp = 0;
    ErrCode = SendRecvByte(&tmp);
    if (ErrCode != ERR_OK) {
      return ErrCode;
    }
    i++;
  }
  EE_CHIPSELECT_OFF(); %>%CTAB /* Deactivate EEPROM */
  return ErrCode;      %>%CTAB /* Return error code */
}

%-INTERNAL_METHOD_END Write128Byte

%-BW_METHOD_BEGIN WriteBlock
%ifdef WriteBlock
%define! Paraddr
%define! Pardata
%define! Parsize
%define! RetVal
%include Common\AT25HP512WriteBlock.Inc
%ifdef COMPILER_HIX
#pragma MESSAGE DISABLE C1855 /* recursive function call */
%endif
byte %'ModuleName'%.%WriteBlock(EEPROM_Address addr, byte *data, word size)
{
  unsigned char bbuf[%'ModuleName'%.BLOCK_SIZE];
  byte res;
  unsigned char i;
  unsigned char bufIndex;
  EEPROM_Address eepromPage = addr/%'ModuleName'%.BLOCK_SIZE;
  unsigned char offset = (unsigned char)(addr%%%'ModuleName'%.BLOCK_SIZE);

  if (size > %'ModuleName'%.BLOCK_SIZE) { %>%CTAB /* not implemented yet */
    return (byte)-1;
  }
  if (offset==0 && size == %'ModuleName'%.BLOCK_SIZE) { %>%CTAB /* full block, already aligned to page boundary */
    res = %'ModuleName'%.SetWriteEnable();
    if (res != ERR_OK) return res;
    res = Write128Byte(addr, data, size);
    if (res != ERR_OK) return res;
  } else if (offset+size <= %'ModuleName'%.BLOCK_SIZE) { %>%CTAB /* no page boundary crossing */
    if (offset != 0) { %>%CTAB /* read head of block */
      res = %'ModuleName'%.ReadBlock(eepromPage*%'ModuleName'%.BLOCK_SIZE, &bbuf[0], offset);
      if (res != ERR_OK) return res;
    }
    if (%'ModuleName'%.BLOCK_SIZE-size-offset != 0) { %>%CTAB /* read block tail */
      res = %'ModuleName'%.ReadBlock(eepromPage*%'ModuleName'%.BLOCK_SIZE + offset + size, &bbuf[0] + offset + size, (word)(%'ModuleName'%.BLOCK_SIZE-size-offset));
      if (res != ERR_OK) return res;
    }
    if (res != ERR_OK) return res;
    bufIndex = offset;
    for(i=0;i<size;i++) {
      bbuf[bufIndex] = *data;
      bufIndex++;
      data++;
    }
    res = %'ModuleName'%.SetWriteEnable();
    if (res != ERR_OK) return res;
    res = Write128Byte(eepromPage*%'ModuleName'%.BLOCK_SIZE, (unsigned char*)&bbuf[0], sizeof(bbuf));
    if (res != ERR_OK) return res;
  } else { %>%CTAB /* crossing page boundaries: make two page writes */
    res = %'ModuleName'%.WriteBlock(addr, data, (word)(%'ModuleName'%.BLOCK_SIZE-offset)); %>%CTAB /* first page write */
    if (res != ERR_OK) return res;
    res = %'ModuleName'%.WriteBlock((eepromPage+1)*%'ModuleName'%.BLOCK_SIZE, data+(%'ModuleName'%.BLOCK_SIZE-offset), (word)(size-(%'ModuleName'%.BLOCK_SIZE-offset))); /* first page write */
    if (res != ERR_OK) return res;
  }
  return res;
}
%ifdef COMPILER_HIX
#pragma MESSAGE DEFAULT C1855 /* recursive function call */
%endif
%endif %- WriteBlock
%-BW_METHOD_END WriteBlock
%-BW_METHOD_BEGIN ReadBlock
%ifdef ReadBlock
%define! Paraddr
%define! Pardata
%define! Parsize
%define! RetVal
%include Common\AT25HP512ReadBlock.Inc
byte %'ModuleName'%.%ReadBlock(EEPROM_Address addr, byte *data, word size)
{
  byte ErrCode;                   %>%CTAB /* Temporary variable - data register address */
  EEPROM_Address CurrentAddr;     %>%CTAB /* Temporary variable - data register address */

  CurrentAddr = addr;             %>%CTAB /* Set address */
  do {
    ErrCode = %'ModuleName'%.ReadByte(CurrentAddr, data); %>%CTAB /* Read data from the address CurrentAddr */
    if (ErrCode != ERR_OK) {      %>%CTAB /* Is release value error */
      return ErrCode;             %>%CTAB /* Return error */
    }
    CurrentAddr += 0x01;          %>%CTAB /* Increased address */
    data++;                       %>%CTAB /* Increased pointer to data */
  } while (CurrentAddr < (addr + size));
  return ERR_OK;                  %>%CTAB /* Return ERR_OK */
}

%endif %- ReadBlock
%-BW_METHOD_END ReadBlock
%-BW_METHOD_BEGIN ReadByte
%ifdef ReadByte
%define! Paraddr
%define! Pardata
%define! RetVal
%include Common\AT25HP512ReadByte.Inc
byte %'ModuleName'%.%ReadByte(EEPROM_Address addr, byte *data)
{
  byte ErrCode, Reg;                   %>%CTAB /* Temporary variable - data register address */
  word Trials = 0x00;                  %>%CTAB /* Temporary variable - data register address */

  (void)%@HWSPI@'ModuleName'%.SetShiftClockPolarity(0x00);
  (void)%@HWSPI@'ModuleName'%.SetIdleClockPolarity(0x00);
  do {
    ErrCode = ReadStatusRegister(&Reg);%>%CTAB /* Get status register selected EEPROM */
    Trials++;                          %>%CTAB /* Increased fault */
  } while ((ErrCode == ERR_BUSY) & (Trials < %WritingAttempts));
  if ((ErrCode != ERR_OK) & (ErrCode != ERR_PROTECT)) %>%CTAB /* Is not release value ERR_OK and ERR_PROTECT */
    return ERR_BUSY;                   %>%CTAB /* Return "Device is busy" */
  Reg = 0x03;                          %>%CTAB /* Set instruction for EEPROM */
  EE_CHIPSELECT_ON();                  %>%CTAB /* Activate EEPROM */
  ErrCode = SendRecvByte(&Reg);        %>%CTAB /* Send instruction into EEPROM */
  if (ErrCode != ERR_OK)               %>%CTAB /* Is release value error */
    return ErrCode;                    %>%CTAB /* Return error */
  ErrCode = SendAddr(addr);            %>%CTAB /* Send address */
  if (ErrCode != ERR_OK)               %>%CTAB /* Is release value error */
    return ErrCode;                    %>%CTAB /* Return error */
  ErrCode = SendRecvByte(data);        %>%CTAB /* Read data from EEPROM */
  EE_CHIPSELECT_OFF();                 %>%CTAB /* Deactivate EEPROM */
  return ErrCode;                      %>%CTAB /* Return error code */
}

%endif %- ReadByte
%-BW_METHOD_END ReadByte
%-INTERNAL_METHOD_BEG SetWriteEnable
%define! RetVal
%include Common\GeneralInternal.inc (SetWriteEnable)
byte %'ModuleName'%.SetWriteEnable(void)
{
  byte ErrCode = ERR_OK, Reg;          %>%CTAB /* Temporary variable - data register address */
  word Trials = 0x00;                  %>%CTAB /* Temporary variable - data register address */

  (void)%@HWSPI@'ModuleName'%.SetShiftClockPolarity(0x00);
  (void)%@HWSPI@'ModuleName'%.SetIdleClockPolarity(0x00);
  do {
    ErrCode = ReadStatusRegister(&Reg); %>%CTAB /* Get status register selected EEPROM */
    Trials++;                        %>%CTAB /* Increased fault */
  } while (((ErrCode == ERR_BUSY) | (Reg & 0x80) == 0x80 ) & (Trials < %WritingAttempts));
  if ((ErrCode != ERR_OK) & (ErrCode != ERR_PROTECT)) %>%CTAB /* Is not release value ERR_OK and ERR_PROTECT */
    return ErrCode;
  EE_CHIPSELECT_ON();                %>%CTAB /* Activate EEPROM */
  Reg = 0x06;
  ErrCode = SendRecvByte(&Reg);      %>%CTAB /* Send instruction into EEPROM */
  EE_CHIPSELECT_OFF();               %>%CTAB /* Deactivate EEPROM */
  return ErrCode;                    %>%CTAB /* Return error code */
}

%-INTERNAL_METHOD_END SetWriteEnable
%-INTERNAL_METHOD_BEG ClrWriteEnable
%define! RetVal
%include Common\GeneralInternal.inc (ClrWriteEnable)
byte %'ModuleName'%.ClrWriteEnable(void)
{
  byte ErrCode = ERR_OK, Reg;          %>%CTAB /* Temporary variable - data register address */
  word Trials = 0x00;                  %>%CTAB /* Temporary variable - data register address */

  (void)%@HWSPI@'ModuleName'%.SetShiftClockPolarity(0x00);
  (void)%@HWSPI@'ModuleName'%.SetIdleClockPolarity(0x00);
  do {
    ErrCode = ReadStatusRegister(&Reg); %>%CTAB /* Get status register selected EEPROM */
    Trials++;                        %>%CTAB /* Increased fault */
  } while (((ErrCode == ERR_BUSY) | (Reg & 0x80) == 0x80 ) & (Trials < %WritingAttempts));
  if ((ErrCode != ERR_OK) & (ErrCode != ERR_PROTECT)) %>%CTAB /* Is not release value ERR_OK and ERR_PROTECT */
    return ErrCode;                  %>%CTAB /* Return error code */
  EE_CHIPSELECT_ON();                %>%CTAB /* Activate EEPROM */
  Reg = 0x04;
  ErrCode = SendRecvByte(&Reg);      %>%CTAB /* Send instruction into EEPROM */
  EE_CHIPSELECT_OFF();               %>%CTAB /* Deactivate EEPROM */
  return ErrCode;                    %>%CTAB /* Return error code */
}

%-INTERNAL_METHOD_END ClrWriteEnable
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%-  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    29.01.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\MPVZ5004Settings.Inc
%define! Abstract Common\MPVZ5004Abstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\MPVZ5004Init.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetRawVal
%ifdef GetRawVal
word %'ModuleName'%.%GetRawVal(void);
%define! RetVal
%include Common\MPVZ5004GetRawVal.Inc

%endif %- GetRawVal
%-BW_METHOD_END GetRawVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCalVal
%ifdef GetCalVal
word %'ModuleName'%.%GetCalVal(void);
%define! RetVal
%include Common\MPVZ5004GetCalVal.Inc

%endif %- GetCalVal
%-BW_METHOD_END GetCalVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Calibrate
%ifdef Calibrate
void %'ModuleName'%.%Calibrate(void);
%include Common\MPVZ5004Calibrate.Inc

%endif %- Calibrate
%-BW_METHOD_END Calibrate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCalH2Omm
%ifdef GetCalH2Omm
word %'ModuleName'%.%GetCalH2Omm(void);
%define! RetVal
%include Common\MPVZ5004GetCalH2Omm.Inc

%endif %- GetCalH2Omm
%-BW_METHOD_END GetCalH2Omm
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetMilliVolts
%ifdef GetMilliVolts
word %'ModuleName'%.%GetMilliVolts(void);
%define! RetVal
%include Common\MPVZ5004GetMilliVolts.Inc

%endif %- GetMilliVolts
%-BW_METHOD_END GetMilliVolts
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\MPVZ5004Settings.Inc
%define! Abstract Common\MPVZ5004Abstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
static word %'ModuleName'%.calVal; /* calibration value: this value will be subtracted from the sensor value */
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\MPVZ5004Init.Inc
void %'ModuleName'%.%Init(void)
{
  %'ModuleName'%.calVal = 0;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetRawVal
%ifdef GetRawVal
%define! RetVal
%include Common\MPVZ5004GetRawVal.Inc
word %'ModuleName'%.%GetRawVal(void)
{
  word val;

  (void)%@ADC@'ModuleName'%.MeasureChanWait(%ADchannel);
  (void)%@ADC@'ModuleName'%.GetChanValue16(%ADchannel, &val);
  val >>= (16-%ADBitRes); /* right justify */
  return val;
}

%endif %- GetRawVal
%-BW_METHOD_END GetRawVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCalVal
%ifdef GetCalVal
%define! RetVal
%include Common\MPVZ5004GetCalVal.Inc
word %'ModuleName'%.%GetCalVal(void)
{
  word val;

  val = %'ModuleName'%.%GetRawVal();
  if (val <= %'ModuleName'%.calVal) { /* would be an underflow otherwise */
    val = 0;
  } else {
    val -= %'ModuleName'%.calVal;
  }
  return val;
}

%endif %- GetCalVal
%-BW_METHOD_END GetCalVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Calibrate
%ifdef Calibrate
%include Common\MPVZ5004Calibrate.Inc
void %'ModuleName'%.%Calibrate(void)
{
  %'ModuleName'%.calVal = %'ModuleName'%.%GetRawVal();
}

%endif %- Calibrate
%-BW_METHOD_END Calibrate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCalH2Omm
%ifdef GetCalH2Omm
%define! RetVal
%include Common\MPVZ5004GetCalH2Omm.Inc
word %'ModuleName'%.%GetCalH2Omm(void)
{
  /* MPVZ5004G data sheet:
     1.0  V/kPa
     9.8  mV/mm H2O */
  /* 1LSB = (VREFH - VREFL) / 2^nofBits */
  /* with 5V VREFH-VREFL and 10 bit resolution: 1LSB = 4.88mV/bit */
  #define _1LSB ((%VrefH_VrefL*1000)/(1<<%ADBitRes)) /* using integral values for efficient calculation */
  #define _CFACTOR  100 /* constant factor for multiplication/division to avoid numeric inaccuracies */
  #define MilliVoltmmH2O  9.8  /* millivolt per mm H2O */
  dword milliVolts;
  word adcValue;

  adcValue = %'ModuleName'%.%GetCalVal();
  milliVolts = adcValue*((dword)((_1LSB*_CFACTOR))); /* Convert ADC value to milliVolts */
  return (word)(milliVolts/((dword)(MilliVoltmmH2O*_CFACTOR))); /* approximation of the 9.8 mV/mm H2O */
}

%endif %- GetCalH2Omm
%-BW_METHOD_END GetCalH2Omm
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetMilliVolts
%ifdef GetMilliVolts
%define! RetVal
%include Common\MPVZ5004GetMilliVolts.Inc
word %'ModuleName'%.%GetMilliVolts(void)
{
  /* 1LSB = (VREFH - VREFL) / 2^nofBits */
  /* with 5V VREFH-VREFL and 10 bit resolution: 1LSB = 4.88mV/bit */
  #define _1LSB ((%VrefH_VrefL*1000)/(1<<%ADBitRes)) /* using integral values for efficient calculation */
  #define _CFACTOR  100 /* constant factor for multiplication/division to avoid numeric inaccuracies */
  dword milliVolts;
  word adcValue;

  adcValue = %'ModuleName'%.%GetRawVal();
  milliVolts = adcValue*((dword)((_1LSB*_CFACTOR))); /* Convert ADC value to milliVolts*_CFACTOR */
  milliVolts /= _CFACTOR; /* scale back */
  return (word)milliVolts;
}

%endif %- GetMilliVolts
%-BW_METHOD_END GetMilliVolts
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

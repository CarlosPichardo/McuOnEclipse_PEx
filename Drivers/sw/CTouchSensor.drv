%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    12.10.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Discharge Discharges the electrode
%define! Description_Get Returns the electrode value (either zero or non-zero)
%define! Description_SetAsInput Configures the electrode as input pin
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\CTouchSensorSettings.Inc
%define! Abstract Common\CTouchSensorAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

#define %'ModuleName'%.THRESHOLD_OFF      %ThresholdTicksOff     %>40/* threshold value for OFF detection */
#define %'ModuleName'%.THRESHOLD_ON       %ThresholdTicksOn      %>40/* threshold value for ON detection */
#define %'ModuleName'%.THRESHOLD_TIMEOUT  %TimeoutTicks          %>40/* timout threshold */

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Measure
%ifdef Measure
byte %'ModuleName'%.%Measure(byte *pTicks);
%define! ParpTicks
%define! RetVal
%include Common\CTouchSensorMeasure.Inc

%endif %- Measure
%-BW_METHOD_END Measure
%-************************************************************************************************************
%-BW_METHOD_BEGIN Scan
%ifdef Scan
byte %'ModuleName'%.%Scan(void);
%define! RetVal
%include Common\CTouchSensorScan.Inc

%endif %- Scan
%-BW_METHOD_END Scan
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue
%ifdef GetValue
byte %'ModuleName'%.%GetValue(void);
%define! RetVal
%include Common\CTouchSensorGetValue.Inc

%endif %- GetValue
%-BW_METHOD_END GetValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
void %'ModuleName'%.%Enable(void);
%include Common\CTouchSensorEnable.Inc

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
void %'ModuleName'%.%Disable(void);
%include Common\CTouchSensorDisable.Inc

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Discharge
#define %'ModuleName'%.Discharge() \
  %@Pin@'ModuleName'%.SetOutput();                               %>40/* set pin to output */ \
  %@Pin@'ModuleName'%.ClrVal()                                   %>40/* put to ground */

%include Common\GeneralInternal.inc (Discharge)

%-INTERNAL_METHOD_END Discharge
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Get
#define %'ModuleName'%.Get() \
  %@Pin@'ModuleName'%.GetVal()                                   %>40/* returns either zero or non-zero */

%define! RetVal
%include Common\GeneralInternal.inc (Get)

%-INTERNAL_METHOD_END Get
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG SetAsInput
#define %'ModuleName'%.SetAsInput() \
  %@Pin@'ModuleName'%.SetInput()                                 %>40/* configures the electode pin as input pin */
%include Common\GeneralInternal.inc (SetAsInput)

%-INTERNAL_METHOD_END SetAsInput
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnButtonPress
%ifdef OnButtonPress
%INTERFACE OnButtonPress
void %OnButtonPress(void);
%include Common\CTouchSensorOnButtonPress.Inc

%endif %- OnButtonPress
%-BW_METHOD_END OnButtonPress
%-BW_METHOD_BEGIN OnButtonRelease
%ifdef OnButtonRelease
%INTERFACE OnButtonRelease
void %OnButtonRelease(void);
%include Common\CTouchSensorOnButtonRelease.Inc

%endif %- OnButtonRelease
%-BW_METHOD_END OnButtonRelease
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\CTouchSensorSettings.Inc
%define! Abstract Common\CTouchSensorAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
static byte %'ModuleName'_average = 0;                           %>40/* stores the average value */

#define %'ModuleName'_STATUS_BIT_PRESSED  (1<<0)                 %>40/* if set, the button is pressed */
%if defined(Enable) | defined(Disable)
#define %'ModuleName'_STATUS_BIT_ENABLED  (1<<1)                 %>40/* if set, the sensor is enabled */
%endif
%if (defined(Enable) | defined(Disable)) & %EnabledWithInit='yes'
static byte %'ModuleName'_status = %'ModuleName'_STATUS_BIT_ENABLED;%>40/* stores the state of the button */
%else
static byte %'ModuleName'_status = 0;                            %>40/* stores the state of the button */
%endif
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Measure
%ifdef Measure
%define! ParpTicks
%define! RetVal
%include Common\CTouchSensorMeasure.Inc
byte %'ModuleName'%.%Measure(byte *pTicks)
{
  /* Note: the pin has to use a pullup resistor */
  word ticks;

%if defined(Enable) | defined(Disable)
  if (!(%'ModuleName'_status&%'ModuleName'_STATUS_BIT_ENABLED)) {
    *pTicks = 0;
    return ERR_DISABLED;
  }
%endif
  %'ModuleName'%.Discharge();                                    %>40/* discharge first the electrode: this means setting it as output with ground */
  %if %UseCounter='yes'
  /* set up the free running counter: */
  %@Counter@'ModuleName'%.Reset();                               %>40/* reset and start the counter */
  %else
  ticks = 0;
  %endif
  /* set pin as input to begin capacitor charging: */
  %'ModuleName'%.SetAsInput();                                   %>40/* set pin to input */
  /* measure the time until the pad charges up to logical 1: */
  while(%'ModuleName'%.Get()==0) {                               %>40/* wait until we are charged up or we have a timeout */
  %if %UseCounter='yes'
    (void)%@Counter@'ModuleName'%.GetCounterValue(&ticks);
    ticks /= %@Counter@'ModuleName'%.PERIOD_VALUE;               %>40/* scale down to number of ticks */
  %else
    ticks++;                                                     %>40/* as we do not have a hardware counter, simply increment the ticks */
  %endif
    if (ticks > %'ModuleName'%.THRESHOLD_TIMEOUT) {
      break;                                                     %>40/* timeout */
    }
  } /* while */
  %'ModuleName'%.Discharge();                                    %>40 /* Put back on discharged state */
  /* calculate what we want to return: */
  if (ticks > %'ModuleName'%.THRESHOLD_TIMEOUT) {                %>40/* we had a timeout */
    *pTicks = 0xff;
    return ERR_OVERFLOW;                                         %>40/* timeout overflow */
  }
  *pTicks = (byte)ticks;
  return ERR_OK;
}

%endif %- Measure
%-BW_METHOD_END Measure
%-************************************************************************************************************
%-BW_METHOD_BEGIN Scan
%ifdef Scan
%define! RetVal
%include Common\CTouchSensorScan.Inc
byte %'ModuleName'%.%Scan(void)
{
  byte val, res;

  res = %'ModuleName'%.%Measure(&val);
  if (res == ERR_OK) {                                           %>40/* there was no error */
    /* integrate current value into average sample value */
    %'ModuleName'_average = (byte)(%'ModuleName'_average + (((int8_t)(val-%'ModuleName'_average))>>2));
    if (%'ModuleName'_average>%'ModuleName'%.THRESHOLD_ON) {     %>40/* new value is large enough for a click */
      if (!(%'ModuleName'_status&%'ModuleName'_STATUS_BIT_PRESSED)) {
%ifdef OnButtonPress
        %OnButtonPress();                                        %>40/* call user event */
%endif
        %'ModuleName'_status |= %'ModuleName'_STATUS_BIT_PRESSED;%>40/* set bit */
      }
    } else if (%'ModuleName'_average<%'ModuleName'%.THRESHOLD_OFF) {%>40/* new value is large enough for a click */
      if (%'ModuleName'_status&%'ModuleName'_STATUS_BIT_PRESSED) {
%ifdef OnButtonRelease
        %OnButtonRelease();                                      %>40/* call user event */
%endif
        %'ModuleName'_status &= ~%'ModuleName'_STATUS_BIT_PRESSED;/* clear bit */
      }
    }
  }
  return res;
}

%endif %- Scan
%-BW_METHOD_END Scan
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue
%ifdef GetValue
%define! RetVal
%include Common\CTouchSensorGetValue.Inc
byte %'ModuleName'%.%GetValue(void)
{
  return %'ModuleName'_average;
}

%endif %- GetValue
%-BW_METHOD_END GetValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
%include Common\CTouchSensorEnable.Inc
void %'ModuleName'%.%Enable(void)
{
  %'ModuleName'_status |= %'ModuleName'_STATUS_BIT_ENABLED;
}

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
%include Common\CTouchSensorDisable.Inc
void %'ModuleName'%.%Disable(void)
{
  %'ModuleName'_status &= ~(%'ModuleName'_STATUS_BIT_ENABLED);
}

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Discharge
%include Common\GeneralInternal.inc (Discharge)
#if 0
void %'ModuleName'%.Discharge(void)
{
  /* implemented as macro in the header file */
}
#endif

%-INTERNAL_METHOD_END Discharge
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Get
%define! RetVal
%include Common\GeneralInternal.inc (Get)
#if 0
byte %'ModuleName'%.Get(void)
{
  /* implemented as macro in the header file */
}
#endif

%-INTERNAL_METHOD_END Get
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG SetAsInput
%include Common\GeneralInternal.inc (SetAsInput)
#if 0
void %'ModuleName'%.SetAsInput(void)
{
  /* implemented as macro in the header file */
}
#endif

%-INTERNAL_METHOD_END SetAsInput
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnButtonPress
%ifdef OnButtonPress
%IMPLEMENTATION OnButtonPress
%include Common\CTouchSensorOnButtonPress.Inc
void %OnButtonPress(void)
{
  /* Write your code here ... */
}

%endif %- OnButtonPress
%-BW_METHOD_END OnButtonPress
%-BW_METHOD_BEGIN OnButtonRelease
%ifdef OnButtonRelease
%IMPLEMENTATION OnButtonRelease
%include Common\CTouchSensorOnButtonRelease.Inc
void %OnButtonRelease(void)
{
  /* Write your code here ... */
}

%endif %- OnButtonRelease
%-BW_METHOD_END OnButtonRelease
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

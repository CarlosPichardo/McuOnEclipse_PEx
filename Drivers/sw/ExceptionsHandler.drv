%-Driver pre-generated by the Component Development Environment
%-      Copyright: 1997 - 2016 Freescale Semiconductor, Inc. All Rights Reserved. 
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Development Environment will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Omar Isai Pinales Ayala
%define DriverVersion 02.00
%define DriverDate    11/26/2016
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%define CDEversion Community 
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
  %-
%-
%INTERFACE
%define! Settings Common\ExceptionsHandler\Settings.inc
%define! Abstract Common\ExceptionsHandler\Abstract.inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ... 
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
#define STOP_NON_CLOSED_CATCH()			__asm("bkpt 0 \n mov pc, r7")
%if %frtos = 'yes'
#define STOP_NON_CATCHED_EXCEPTION()	__asm("bkpt 0 \n mov pc, r7")
%else %-frtos
#define STOP_NON_CATCHED_EXCEPTION()	__asm("bkpt 0 \n mov pc, r6")
%endif %-frtos

%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

#ifdef __cplusplus
extern "C" {
#endif 

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES
#ifndef __CDEUserType_Exception
#define __CDEUserType_Exception
typedef enum {
	HandledException,
	NullPointerException,
	
	UnknowException
} Exception;		%>40/*Exception enum type*/
#endif

Exception %'ModuleName'%.GlobalEx, %'ModuleName'%.ExceptResult;
%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger; 
%-
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN try
%ifdef try
%include Common\ExceptionsHandler\try.inc
%if %frtos = 'yes'
#define try %'ModuleName'%.StackPush(); if(!%'ModuleName'%.GlobalExCheck())
%else %-frtos
#define try %'ModuleName'%.StackPush(); if(!%'ModuleName'%.GlobalEx)
%endif %-frtos
%endif  %-try
%-BW_METHOD_END try

%-*****************************************************************************************************
%-BW_METHOD_BEGIN catch
%ifdef catch
%include Common\ExceptionsHandler\catch.inc
%if %frtos = 'yes'
#define catch %'ModuleName'%.StackPop(); if(%'ModuleName'%.ExceptResultCheck())
%else %-frtos
#define catch %'ModuleName'%.StackPop(); if(%'ModuleName'%.ExceptResult)
%endif %-frtos
%endif  %-catch
%-BW_METHOD_END catch

%-*****************************************************************************************************
%-BW_METHOD_BEGIN throw
%ifdef throw
%include Common\ExceptionsHandler\throw.inc
// void throw(Exception ex);
#define throw(ex) %'ModuleName'%.ThrowException(ex)
%define! Parex
%endif  %-throw
%-BW_METHOD_END throw

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetException
%ifdef GetException
%include Common\ExceptionsHandler\throw.inc
// Exception GetException();
%if %frtos = 'yes'
#define GetException() ((int) %'ModuleName'%.ExceptResultCheck())
%else %-frtos
#define GetException() ((int) %'ModuleName'%.ExceptResult)
%endif %-frtos
%endif  %-GetException
%-BW_METHOD_END GetException

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ClearException
%ifdef ClearException
%include Common\ExceptionsHandler\ClearException.inc
//void ClearException();
%if %frtos = 'yes'
#define ClearException() %'ModuleName'%.DoClearException()
%else %-frtos
#define ClearException() %'ModuleName'%.ExceptResult = 0
%endif %-frtos
%endif  %-ClearException
%-BW_METHOD_END ClearException

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GlobalExCheck
%if %frtos = 'yes'
%include Common\ExceptionsHandler\GlobalExCheck.inc
int * %'ModuleName'%.GlobalExCheck();
%endif  %-frtos
%-BW_METHOD_END GlobalExCheck

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ExceptResultCheck
%if %frtos = 'yes'
%include Common\ExceptionsHandler\ExceptResultCheck.inc
int * %'ModuleName'%.ExceptResultCheck();
%endif  %-frtos
%-BW_METHOD_END ExceptResultCheck

%-*****************************************************************************************************
%-BW_METHOD_BEGIN DoClearException
%if %frtos = 'yes'
%include Common\ExceptionsHandler\DoClearException.inc
void %'ModuleName'%.DoClearException();
%endif  %-frtos
%-BW_METHOD_END DoClearException

%-*****************************************************************************************************
%-BW_METHOD_BEGIN StackPush
%include Common\ExceptionsHandler\StackPush.inc
void %'ModuleName'%.StackPush();
%-BW_METHOD_END StackPush

%-*****************************************************************************************************
%-BW_METHOD_BEGIN StackPop
%include Common\ExceptionsHandler\StackPop.inc
void %'ModuleName'%.StackPop();
%-BW_METHOD_END StackPop

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ThrowException
%include Common\ExceptionsHandler\ThrowException.inc
void %'ModuleName'%.ThrowException(Exception ex);
%define! Parex
%-BW_METHOD_END ThrowException

%-************************************************************************************************************
%-BW_DEFINITION_END

#ifdef __cplusplus
}  /* extern "C" */
#endif 
/* END %ModuleName. */

#endif 
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\ExceptionsHandler\Settings.inc
%define! Abstract Common\ExceptionsHandler\Abstract.inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%if %frtos = 'yes'
#include "%@FreeRTOS@ModuleName.h"
%endif %-frtos
%-BW_CUSTOM_INCLUDE_END_M
                                                                                                                      
#ifdef __cplusplus
extern "C" {
#endif 

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here 
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
int * %'ModuleName'%.Exlevel = 0;
int * %'ModuleName'%.tryStack = 0;
Exception %'ModuleName'%.GlobalEx = HandledException;
Exception %'ModuleName'%.ExceptResult = HandledException;

%if %frtos = 'yes'
#define	Exlevel			0
#define	tryStack		1
#define	GlobalEx		2
#define	ExceptResult	3
%endif %-frtos

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN try
%ifdef try
%include Common\ExceptionsHandler\try.inc
// try { ... }
	/******Instruction implemented in the definition module as a macro *******/
%CODE_BEGIN
%CODE_END
%endif %-try
%-BW_METHOD_END try

%-*****************************************************************************************************
%-BW_METHOD_BEGIN catch
%ifdef catch
%include Common\ExceptionsHandler\catch.inc
// catch { ... }
	/******Instruction implemented in the definition module as a macro *******/
%CODE_BEGIN
%CODE_END
%endif %-catch
%-BW_METHOD_END catch

%-*****************************************************************************************************
%-BW_METHOD_BEGIN throw
%ifdef throw
%define! Parex
%include Common\ExceptionsHandler\throw.inc
// void throw(Exception ex) {
	/******Method implemented in the definition module as a macro *******/
%CODE_BEGIN
%CODE_END
// }
%endif %-throw
%-BW_METHOD_END throw

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetException
%ifdef GetException
%include Common\ExceptionsHandler\GetException.inc
// Exception GetException() { }
	/******Method implemented in the definition module as a macro *******/
%CODE_BEGIN
%CODE_END
%endif %-GetException
%-BW_METHOD_END GetException

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ClearException
%ifdef ClearException
%include Common\ExceptionsHandler\ClearException.inc
// void ClearException() { }
	/******Method implemented in the definition module as a macro *******/
%CODE_BEGIN
%CODE_END
%endif %-ClearException
%-BW_METHOD_END ClearException

%-*****************************************************************************************************
%-BW_METHOD_BEGIN MissingCatchInstruction
%- include Common\ExceptionsHandler\MissingCatchInstruction.inc
__attribute__((naked))
void MissingCatchInstruction() {
%CODE_BEGIN
	//System stopped because a non handled exception
	STOP_NON_CLOSED_CATCH();
	//
	// Press F5 to go to catch Error
	//
	// To solve this error go to "try { }" that caused the error
	// and add the "catch { }" instruction after "try { }"
	//     Example:
	// try {
	//   ... code to test ...
	// }
	// catch {
	//   ... code on error
	// }
%CODE_END
}
%-BW_METHOD_END MissingCatchInstruction

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GlobalExCheck
%if %frtos = 'yes'
%define! RetVal
%include Common\ExceptionsHandler\GlobalExCheck.inc
int * %'ModuleName'%.GlobalExCheck() {
%CODE_BEGIN
	xTaskHandle tsk;
	int *res;
	tsk = xTaskGetCurrentTaskHandle();
	if(tsk) {	//FreeRTOS
		res = pvTaskGetThreadLocalStoragePointer(NULL, GlobalEx);
	} else {	//Bare metal
		res = (int *) %'ModuleName'%.GlobalEx;
	}
	return res;
%CODE_END
}
%endif %-frtos
%-BW_METHOD_END GlobalExCheck

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ExceptResultCheck
%if %frtos = 'yes'
%define! RetVal
%include Common\ExceptionsHandler\ExceptResultCheck.inc
int * %'ModuleName'%.ExceptResultCheck() {
%CODE_BEGIN
	xTaskHandle tsk;
	int *res;
	tsk = xTaskGetCurrentTaskHandle();
	if(tsk) {	//FreeRTOS
		res = pvTaskGetThreadLocalStoragePointer(NULL, ExceptResult);
	} else {	//Bare metal
		res = (int *) %'ModuleName'%.ExceptResult;
	}
	return res;
%CODE_END
}
%endif %-frtos
%-BW_METHOD_END ExceptResultCheck

%-*****************************************************************************************************
%-BW_METHOD_BEGIN DoClearException
%if %frtos = 'yes'
%define! RetVal
%include Common\ExceptionsHandler\DoClearException.inc
void %'ModuleName'%.DoClearException() {
%CODE_BEGIN
	xTaskHandle tsk;
	tsk = xTaskGetCurrentTaskHandle();
	if(tsk) {	//FreeRTOS
		vTaskSetThreadLocalStoragePointer(NULL, ExceptResult, 0);
	} else {	//Bare metal
		%'ModuleName'%.ExceptResult = 0;
	}
%CODE_END
}
%endif %-frtos
%-BW_METHOD_END DoClearException

%-*****************************************************************************************************
%-BW_METHOD_BEGIN StackPush
%- include Common\ExceptionsHandler\StackPush.inc
__attribute__((naked))
void %'ModuleName'%.StackPush() {
%CODE_BEGIN
%if %frtos = 'yes'
	xTaskHandle tsk;
	int *level, *stack, ctr, *ret;
	register int *r4 __asm("r4");
	register int *r5 __asm("r5");
	register int *r6 __asm("r6");
	register int *r7 __asm("r7");
	register int *sp __asm("sp");
	register int *lr __asm("lr");
	ret = lr;
	tsk = xTaskGetCurrentTaskHandle();
	if(tsk) {	//FreeRTOS
		level = pvTaskGetThreadLocalStoragePointer(NULL, Exlevel);
		stack = pvTaskGetThreadLocalStoragePointer(NULL, tryStack);
	} else {	//Bare metal
		level = %'ModuleName'%.Exlevel;
		stack = %'ModuleName'%.tryStack;
	}
	r4 = ret - 1;
	r5 = (int *) MissingCatchInstruction;
	r6 = stack;
	__asm(
		"mov sp, r7 \n"
		"push {r4, r5, r6, r7} \n"
		"push {r4, r5} \n"
	);
	level++;
	stack = sp;
	if(tsk) {
		vTaskSetThreadLocalStoragePointer(NULL, Exlevel, level);
		vTaskSetThreadLocalStoragePointer(NULL, tryStack, stack);
	} else {
		%'ModuleName'%.Exlevel = level;
		%'ModuleName'%.tryStack = stack;
	}
	lr = ret;
	__asm("mov pc, lr");
%else %-frtos
	__asm(
		"ldr r5, =MissingCatchInstruction \n"
		"ldr r6, =%'ModuleName'%.tryStack \n"
		"ldr r6, [r6, #0] \n"
		"mov r4, lr \n"
		"sub r4, r4, #4 \n"
	//%'ModuleName'%.tryStack-4, MissingCatchInstruction, %'ModuleName'%.tryStack-4, MissingCatchInstruction, %'ModuleName'%.tryStack, sp
		"mov sp, r7 \n"
		"push {r4, r5, r6, r7} \n"
		"push {r4, r5} \n"
		"mov r1, sp \n"
		"ldr r0, =%'ModuleName'%.tryStack \n"
		"str r1, [r0, #0] \n"
		"ldr r4, =%'ModuleName'%.Exlevel \n"
		"ldr r5, [r4, #0] \n"
		"add r5, #1 \n"
		"str r5, [r4, #0] \n"
		"mov pc, lr \n"
	);
%endif %-frtos
%CODE_END
}
%-BW_METHOD_END StackPush

%-*****************************************************************************************************
%-BW_METHOD_BEGIN StackPop
%- include Common\ExceptionsHandler\StackPop.inc
__attribute__((naked))
void %'ModuleName'%.StackPop() {
%CODE_BEGIN
%if %frtos = 'yes'
	xTaskHandle tsk;
	int *level, *stack, *global, *res, *ret, *spt;
	register int *r6 __asm("r6");
	register int *sp __asm("sp");
	register int *lr __asm("lr");
	spt = sp;
	ret = lr;
	tsk = xTaskGetCurrentTaskHandle();
	if(tsk) {
		level = pvTaskGetThreadLocalStoragePointer(NULL, Exlevel);
		global = pvTaskGetThreadLocalStoragePointer(NULL, GlobalEx);
		level--;
		vTaskSetThreadLocalStoragePointer(NULL, Exlevel, level);
		res = global;
		global = 0;
		vTaskSetThreadLocalStoragePointer(NULL, GlobalEx, global);
		vTaskSetThreadLocalStoragePointer(NULL, ExceptResult, res);
		sp = spt;
		__asm("pop {r2, r3, r4, r5, r6, r7}");
		stack = r6;
		vTaskSetThreadLocalStoragePointer(NULL, tryStack, stack);
	} else {
		__asm(
		//Exlevel--;
			"ldr r4, =%'ModuleName'%.Exlevel \n"
			"ldr r5, [r4, #0] \n"
			"sub r5, #1 \n"
			"str r5, [r4, #0] \n"
		//%'ModuleName'%.ExceptResult = %'ModuleName'%.GlobalEx;
			"ldr r3, =%'ModuleName'%.GlobalEx \n"
			"ldrb r2, [r3, #0] \n"
			"ldr r4, =%'ModuleName'%.ExceptResult \n"
			"strb r2, [r4, #0] \n"
		//%'ModuleName'%.GlobalEx = %'ModuleName'%.HandledException;
			"mov r2, #0 \n"
			"strb r2, [r3, #0] \n"
			"pop {r2, r3, r4, r5, r6, r7} \n"
		//%'ModuleName'%.tryStack = r6;
			"ldr r0, =%'ModuleName'%.tryStack \n"
			"str r6, [r0, #0] \n"
		);
	}
	lr = ret;
	__asm("mov pc, lr");
%else %-frtos
	__asm(
	//Exlevel--;
		"ldr r4, =%'ModuleName'%.Exlevel \n"
		"ldr r5, [r4, #0] \n"
		"sub r5, #1 \n"
		"str r5, [r4, #0] \n"
	//%'ModuleName'%.ExceptResult = %'ModuleName'%.GlobalEx;
		"ldr r3, =%'ModuleName'%.GlobalEx \n"
		"ldrb r2, [r3, #0] \n"
		"ldr r4, =%'ModuleName'%.ExceptResult \n"
		"strb r2, [r4, #0] \n"
	//%'ModuleName'%.GlobalEx = %'ModuleName'%.HandledException;
		"mov r2, #0 \n"
		"strb r2, [r3, #0] \n"
		"pop {r2, r3, r4, r5, r6, r7} \n \n"
	//%'ModuleName'%.tryStack = r6;
		"ldr r0, =%'ModuleName'%.tryStack \n"
		"str r6, [r0, #0] \n"
		"mov pc, lr \n"
	);
%endif %-frtos
%CODE_END
}
%-BW_METHOD_END StackPop

%-*****************************************************************************************************
%-BW_METHOD_BEGIN NonCatchedException
%- include Common\ExceptionsHandler\NonCatchedException.inc
__attribute__((naked))
void NonCatchedException() {
%CODE_BEGIN
	//System stopped because a non handled exception
	STOP_NON_CATCHED_EXCEPTION();
	// To know what is the offending code line:
	//   - Active "Instruction Stepping Mode"
	//   - Press F5 two times to go to that Line
%CODE_END
}
%-BW_METHOD_END NonCatchedException

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ThrowException
%define! Parex
%include Common\ExceptionsHandler\ThrowException.inc
__attribute__((naked))
void %'ModuleName'%.ThrowException(Exception ex) {
%CODE_BEGIN
%if %frtos = 'yes'
	xTaskHandle tsk;
	int *level, *stack, ctr, *ret;
	register int *r4 __asm("r4");
	register int *r5 __asm("r5");
	register int *r6 __asm("r6");
	register int *r7 __asm("r7");
	register int *sp __asm("sp");
	register int *lr __asm("lr");
	r6 = lr;
	tsk = xTaskGetCurrentTaskHandle();
	if(tsk) {	//FreeRTOS
		level = pvTaskGetThreadLocalStoragePointer(NULL, Exlevel);
		stack = pvTaskGetThreadLocalStoragePointer(NULL, tryStack);
		if(level) {
			vTaskSetThreadLocalStoragePointer(NULL, GlobalEx, (void *) ex);
			r6 = stack;
			__asm(
				"mov sp, r6 \n"
				"ldr r7, [r6, #0] \n"
				"ldr r6, [sp, #0] \n"
				"add r7, #4 \n"
				"mov pc, r7 \n"
			);
		}
	} else {	//Bare metal
		level = %'ModuleName'%.Exlevel;
		if(level) {
			%'ModuleName'%.GlobalEx = ex;
			__asm("b _WithStartTry \n");
		}
	}
	if(level == 0) {
		__asm(
			"mov r7, r6 \n"
			"sub r7, #4 \n"
			"b NonCatchedException \n"
		);
	}
%else %-frtos
	__asm(
		"ldr r6, =%'ModuleName'%.Exlevel \n"
		"ldr r6, [r6, #0] \n"
		"cmp r6, #0 \n"
		"beq _NoStartTry \n"
	//%'ModuleName'%.GlobalEx = ex;
		"ldr r6, =%'ModuleName'%.GlobalEx \n"
		"str r0, [r6, #0] \n"
		"b _WithStartTry \n"
		"_NoStartTry: \n"
		"mov r6, lr \n"
		"sub r6, #4 \n"
		"b NonCatchedException \n"
	);
%endif %-frtos
%CODE_END
}
%-BW_METHOD_END ThrowException

%-*****************************************************************************************************
%-BW_METHOD_BEGIN CatchExceptionMSP
%- include Common\ExceptionsHandler\CatchExceptionMSP.inc
__attribute__((naked))
void %'ModuleName'%.CatchExceptionMSP() {
%CODE_BEGIN
%if %frtos = 'yes'
	__asm(
	//if(%'ModuleName'%.Exlevel == 0) {
		"ldr r6, =%'ModuleName'%.Exlevel \n"
		"ldr r6, [r6, #0] \n"
		"cmp r6, #0 \n"
	//	NonCatchedException();
		"beq NonCatchedException \n"
	//} else {
	//	%'ModuleName'%.GlobalEx = NullPointerException;
		"ldr r6, =%'ModuleName'%.GlobalEx \n"
		"movs r5, #1 \n"
		"strb r5, [r6, #0] \n"
	//	sp = tryStack;
		"_WithStartTry: \n"
		"ldr r6, =%'ModuleName'%.tryStack \n"
		"ldr r7, [r6, #0] \n"
		"mov sp, r7 \n"
	//	r6 = ((int *) *sp) + 1;
		"ldr r6, [sp, #0] \n"
		"add r6, #4 \n"
	//	return;
		"mov pc, r6 \n"
	//}
	);
%else %-frtos
	__asm(
	//%'ModuleName'%.GlobalEx = NullPointerException;
		"ldr r6, =%'ModuleName'%.GlobalEx \n"
		"movs r5, #1 \n"
		"strb r5, [r6, #0] \n"
		"_WithStartTry: \n"
		"ldr r6, =%'ModuleName'%.tryStack \n"
		"ldr r7, [r6, #0] \n"
		"mov sp, r7 \n"
		"ldr r6, [sp, #0] \n"
		"add r6, #4 \n"
		"mov pc, r6 \n"
	);
%endif %-frtos
%CODE_END
}
%-BW_METHOD_END CatchExceptionMSP

%-*****************************************************************************************************
%-BW_METHOD_BEGIN CatchExceptionPSP
%if %frtos = 'yes'
%include Common\ExceptionsHandler\CatchExceptionPSP.inc
__attribute__((naked))
void %'ModuleName'%.CatchExceptionPSP() {
%CODE_BEGIN
	int *level, *stack, global, *res, *ret, *spt;
	register int *r6 __asm("r6");
	register int *sp __asm("sp");
	level = pvTaskGetThreadLocalStoragePointer(NULL, Exlevel);
	if(level == 0) {
		__asm("b NonCatchedException");
	} else {
		global = (int) pvTaskGetThreadLocalStoragePointer(NULL, GlobalEx);
		global = NullPointerException;
		vTaskSetThreadLocalStoragePointer(NULL, GlobalEx, (void *) global);
		stack = pvTaskGetThreadLocalStoragePointer(NULL, tryStack);
		sp = stack;
		r6 = ((int *) *stack) + 1;
		__asm("mov pc, r6");
	}
%CODE_END
}
%endif %-frtos
%-BW_METHOD_END CatchExceptionPSP

%-*****************************************************************************************************
%-BW_METHOD_BEGIN HardFault
%- include Common\ExceptionsHandler\HardFault.inc
__attribute__((naked))
void HardFault() {
%CODE_BEGIN
%if %frtos = 'yes'
	__asm volatile (
		" movs r0, #4 \n"
		" movs r1, lr \n"
		" tst r0, r1 \n"
		" beq _MSP \n"
		" mrs r0, psp \n"
		"ldr r6, =%'ModuleName'%.CatchExceptionPSP \n"
		" b _HALT \n"
		"_MSP: \n"
		" mrs r0, msp \n"
		"ldr r6, =%'ModuleName'%.CatchExceptionMSP \n"
		"_HALT: \n"
		"ldr r7, [r0, #24] \n"
		"add r0, #24 \n"
		"str r6, [r0, #0] \n"
		"bx lr \n"
	);
%else %-frtos
	__asm(
		"ldr r6, =%'ModuleName'%.Exlevel \n"
		"ldr r6, [r6, #0] \n"
		"cmp r6, #0 \n"
		"beq _WithoutStartTry \n"
		"mov r0, sp \n"
		"add r0, #24 \n"
		"ldr r6, =%'ModuleName'%.CatchExceptionMSP \n"
		"str r6, [r0, #0] \n"
		"bx lr \n"
		"_WithoutStartTry: \n"
		"ldr r6, [sp, #24] \n"
		"pop {r0, r1, r2, r3, r4, r5, r6} \n"
		"b NonCatchedException \n"
	);
%endif %-frtos
%CODE_END
}
%-BW_METHOD_END HardFault

%-************************************************************************************************************
%-BW_IMPLEMENT_END

#ifdef __cplusplus
}  /* extern "C" */
#endif 
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%-  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

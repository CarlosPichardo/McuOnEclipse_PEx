%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.11.2010
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%ifdef utiOut
  %ifdef @utiOut@OnInterrupt
    %define! Description_%@utiOut@OnInterrupt This event is called when an active signal edge/level has occurred. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @utiOut@OnInterrupt
%endif %- utiOut
%ifdef Counter
  %ifdef @Counter@OnInterrupt
    %define! Description_%@Counter@OnInterrupt This event is called when a compare matches the counter value (if compare or reload is selected as a interrupt source) or a counter overflows (for free-running devices). It is valid only when the component is enabled - <a href="UntitledMethods.html#Enable">"Enable"</a> and the events are enabled - <a href="UntitledMethods.html#EnableEvent">"EnableEvent"</a>. The event is available only if <a href="UntitledProperties.html#IntService">Interrupt service/event</a> is enabled. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @Counter@OnInterrupt
%endif %- Counter
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UTISettings.Inc
%define! Abstract Common\UTIAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"


%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\UTIInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN phasesToRorC
%ifdef phasesToRorC
void %'ModuleName'%.%phasesToRorC(dword *pCycle, word *pUtiResults);
%define! ParpUtiResults
%define! ParpCycle
%include Common\UTIphasesToRorC.Inc

%endif %- phasesToRorC
%-BW_METHOD_END phasesToRorC
%-************************************************************************************************************
%-BW_METHOD_BEGIN PowerOn
%ifdef PowerOn
void %'ModuleName'%.%PowerOn(void);
%include Common\UTIPowerOn.Inc

%endif %- PowerOn
%-BW_METHOD_END PowerOn
%-************************************************************************************************************
%-BW_METHOD_BEGIN PowerDown
%ifdef PowerDown
void %'ModuleName'%.%PowerDown(void);
%include Common\UTIPowerDown.Inc

%endif %- PowerDown
%-BW_METHOD_END PowerDown
%-************************************************************************************************************
%-INHERITED_EVENT_BEGIN utiOut OnInterrupt
%ifdef @utiOut@OnInterrupt
void %@utiOut@OnInterrupt(void);

%endif %- @utiOut@OnInterrupt
%-INHERITED_EVENT_END utiOut OnInterrupt
%-INHERITED_EVENT_BEGIN Counter OnInterrupt
%ifdef @Counter@OnInterrupt
void %@Counter@OnInterrupt(void);

%endif %- @Counter@OnInterrupt
%-INHERITED_EVENT_END Counter OnInterrupt
%-************************************************************************************************************
%-BW_METHOD_BEGIN measureCycle
%ifdef measureCycle
byte %'ModuleName'%.%measureCycle(dword *pPhasesStartExt);
%define! ParpPhasesStartExt
%define! RetVal
%include Common\UTImeasureCycle.Inc

%endif %- measureCycle
%-BW_METHOD_END measureCycle
%-************************************************************************************************************
%-BW_METHOD_BEGIN getUTIresults
%ifdef getUTIresults
byte %'ModuleName'%.%getUTIresults(word *pUtiResults);
%define! ParpUtiResults
%define! RetVal
%include Common\UTIgetUTIresults.Inc

%endif %- getUTIresults
%-BW_METHOD_END getUTIresults
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\UTIDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN measureElements
%ifdef measureElements
byte %'ModuleName'%.%measureElements(void);
%define! RetVal
%include Common\UTImeasureElements.Inc

%endif %- measureElements
%-BW_METHOD_END measureElements
%-************************************************************************************************************
%-BW_METHOD_BEGIN getTemp
%ifdef getTemp
byte %'ModuleName'%.%getTemp(int16_t *pUtiTemperatures, byte selectTemp);
%define! ParpUtiTemperatures
%define! ParselectTemp
%define! RetVal
%include Common\UTIgetTemp.Inc

%endif %- getTemp
%-BW_METHOD_END getTemp
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UTISettings.Inc
%define! Abstract Common\UTIAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
  %if (%utiMode='0'|%utiMode='2'|%utiMode='7'|%utiMode='8'|%utiMode='13'|%utiMode='14'|%utiMode='15')
#define NR_OF_PH 6                                               %>>/* Number of phases in one cycle */
  %elif (%utiMode='1'|%utiMode='4'|%utiMode='9'|%utiMode='10'|%utiMode='11'|%utiMode='12')
#define NR_OF_PH 4                                               %>>/* Number of phases in one cycle */
  %elif (%utiMode='5'|%utiMode='6')
#define NR_OF_PH 5                                               %>>/* Number of phases in one cycle */
  %else
#define NR_OF_PH 0                                               %>>/* undefined UTI-mode */
  %endif
#define REF_VALUE %utiReference                                  %>>/* Reference value in [Ohm] or [picoFarad](Dependent of UTI-mode) */
#define MAXCOUNTEROVERFLOWS 10                                   %>>/* Maximal possible overflows of counter in one phase */
#define COUNTERMAX 65535                                         %>>/* Maximal counter value of a 16-bit Counter */
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
static byte counterOverflows;                                    %>>/* Number of counter overflows */
static dword *pPhasesCur;                                        %>>/* Pointer to currently phase to measure */
static dword *pPhasesStart;                                      %>>/* Pointer to save the measured phases */
static volatile bool measurement=FALSE;                          %>>/* Flag to signal a during measurement */
static word counterValueOld;                                     %>>/* counterValue from the last interrupt call */
static word counterValueCur;                                     %>>/* actual counter value */
static bool firstPhase;                                          %>>/* Flag to signal the first phase */
  %if %usingRtos='yes'
static xSemaphoreHandle xSemaphore = NULL;                       %>>/* Semaphore handler to protect the method measureCycle() */
  %endif
static word elements[3];                                         %>>/* memory for the saved elements */


%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN phasesToRorC
%ifdef phasesToRorC
%define! ParpUtiResults
%define! ParpCycle
%include Common\UTIphasesToRorC.Inc
void %'ModuleName'%.%phasesToRorC(dword *pCycle, word *pUtiResults)
{
  byte positionPhx[NR_OF_PH-1];                                  %>>/* Position on which is the first phase (phase offset1) */
  byte j;                                                        %>>/* actual phase of a counting */
  word factorR=10;                                               %>>/* Factor for rescue decimal places after calculation to save in integer value */

  /* phase recognition */
  positionPhx[0]=0;
  for(j=1;j<NR_OF_PH;j++){
    if(*(pCycle+positionPhx[0])>*(pCycle+j)){
      positionPhx[0]=j;
    }
    if((10* *(pCycle+positionPhx[0]))<(8* *(pCycle+((positionPhx[0]+1) %% NR_OF_PH)))){
      positionPhx[0]=(byte)((positionPhx[0]-1) %% NR_OF_PH);
    }
  }
  /* Set phase offset part 1 and part 2 together */
  *(pCycle+positionPhx[0])+=*(pCycle+(byte)((positionPhx[0]+1) %% NR_OF_PH));

  /* Save the position for all phases for a better overview in the following calculations */
  /* positionPhx[0]: Position phase offset */
  /* positionPhx[1]: Position phase reference */
  /* positionPhx[2]: Position phase sensor element 1 */
  /* positionPhx[...]: Position phase sensor element .. */
  for (j=1; j<(NR_OF_PH-1);j++){
    positionPhx[j]=(byte)((positionPhx[0]+(j+1)) %% NR_OF_PH);
  }
%if (%utiMode='5'|%utiMode='7')
  /* if the reference value a 100ohm resistor it needs more decimal places to keep the same accuracy  as 1000ohm */
  %if(%utiReference='100')
  factorR*=10;
  %endif
%endif
  /* calculations (dependent on selected UTI-mode) */
  %if (%utiMode='5')
    /* the values of the results in this mode are in deci-ohm, */
    /* Example: 1015.6ohm -> 10156 */

  /* 1. connected sensor element */
%if (%sensTyp1='2wire'|%sensTyp1='4wire')
  *pUtiResults=(word)(((*(pCycle+positionPhx[2])-*(pCycle+positionPhx[0]))*REF_VALUE*factorR)/(*(pCycle+positionPhx[1])-*(pCycle+positionPhx[0])));
%elif(%sensTyp1=='3wire')
  *pUtiResults=(word)(((*(pCycle+positionPhx[2])-*(pCycle+positionPhx[3]))*REF_VALUE*factorR)/(*(pCycle+positionPhx[1])-*(pCycle+positionPhx[0])));
%endif
%endif
%if (%utiMode='7')
  /* the values of the results in this mode are in deci-ohm, */
  /* Example: 1015.6ohm -> 10156 */
  /* 1. connected sensor element */
  %if (%sensTyp1='2wire')
  *pUtiResults=(word)(((*(pCycle+positionPhx[3])-*(pCycle+positionPhx[0]))*REF_VALUE*factorR)/(*(pCycle+positionPhx[1])-*(pCycle+positionPhx[0])));
  %else
  *pUtiResults=0;
  %endif
  /* 2. connected sensor element */
  pUtiResults++;
  %if (%sensTyp2='2wire'|%sensTyp2='4wire')
  *pUtiResults=(word)(((*(pCycle+positionPhx[2])-*(pCycle+positionPhx[0]))*REF_VALUE*factorR)/(*(pCycle+positionPhx[1])-*(pCycle+positionPhx[0])));
  %elif(%sensTyp2='3wire')
  *pUtiResults=(word)(((*(pCycle+positionPhx[2])-*(pCycle+positionPhx[4]))*REF_VALUE*factorR)/(*(pCycle+positionPhx[1])-*(pCycle+positionPhx[0])));
  %else
  *pUtiResults=0;
  %endif
  /* 3. connected sensor element */
  pUtiResults++;
  %if (%sensTyp3='2wire')
  *pUtiResults=(word)(((*(pCycle+positionPhx[4])-*(pCycle+positionPhx[0]))*REF_VALUE*factorR)/(*(pCycle+positionPhx[1])-*(pCycle+positionPhx[0])));
  %else
  *pUtiResults=0;
  %endif
%endif
}

%endif %- phasesToRorC
%-BW_METHOD_END phasesToRorC
%-************************************************************************************************************
%-BW_METHOD_BEGIN PowerOn
%ifdef PowerOn
%include Common\UTIPowerOn.Inc
void %'ModuleName'%.%PowerOn(void)
{
  %@UTIPowerDown@'ModuleName'%.SetVal();
}

%endif %- PowerOn
%-BW_METHOD_END PowerOn
%-************************************************************************************************************
%-BW_METHOD_BEGIN PowerDown
%ifdef PowerDown
%include Common\UTIPowerDown.Inc
void %'ModuleName'%.%PowerDown(void)
{
  %@UTIPowerDown@'ModuleName'%.ClrVal();
}

%endif %- PowerDown
%-BW_METHOD_END PowerDown
%-************************************************************************************************************
%-INHERITED_EVENT_BEGIN utiOut OnInterrupt
%ifdef @utiOut@OnInterrupt
%include Common\GeneralInternal.inc (OnInterrupt)
void %@utiOut@OnInterrupt(void)
{
  if (measurement==TRUE) {
    (void)%@Counter@'ModuleName'%.GetCounterValue(&counterValueCur);
    if(firstPhase==FALSE){                                       %>>/* first measured phase in the method is false, because the phase is not complete */
      firstPhase=TRUE;                                           %>>/* so the first phase will overwrite */
    } else {
      /* calculate the counter difference to the last interrupt */
      if (counterOverflows==0) {
        *pPhasesCur = (dword)(counterValueCur-counterValueOld);
      } else {
        *pPhasesCur = (dword)(((COUNTERMAX-counterValueOld)+counterValueCur+(counterOverflows-1)*COUNTERMAX));
      }
      /* If a complete cycle measured, finish the measure */
      if (pPhasesCur==pPhasesStart+NR_OF_PH-1) {
        %@utiOut@'ModuleName'%.Disable();
        (void)%@Counter@'ModuleName'%.DisableEvent();
        measurement = FALSE;
      } else { /* position to save the next phase */
        pPhasesCur++;
      }
    }
    /* reset values for measure next phase */
    counterValueOld=counterValueCur;
    counterOverflows=0;
  }
}

%endif %- @utiOut@OnInterrupt
%-INHERITED_EVENT_END utiOut OnInterrupt
%-INHERITED_EVENT_BEGIN Counter OnInterrupt
%ifdef @Counter@OnInterrupt
%include Common\GeneralInternal.inc (OnInterrupt)
void %@Counter@OnInterrupt(void)
{
  if (measurement==TRUE) {
    counterOverflows++;
    /* If defined maximal overflows of counter reached,
       finish the measure ahead of time */
    if (counterOverflows>MAXCOUNTEROVERFLOWS) {
      %@utiOut@'ModuleName'%.Disable();
      (void)%@Counter@'ModuleName'%.DisableEvent();
      measurement=FALSE;
    }
  }
}

%endif %- @Counter@OnInterrupt
%-INHERITED_EVENT_END Counter OnInterrupt
%-************************************************************************************************************
%-BW_METHOD_BEGIN measureCycle
%ifdef measureCycle
%define! ParpPhasesStartExt
%define! RetVal
%include Common\UTImeasureCycle.Inc
byte %'ModuleName'%.%measureCycle(dword *pPhasesStartExt)
{
  pPhasesCur=pPhasesStartExt;
  pPhasesStart=pPhasesStartExt;
  counterOverflows=0;
  measurement=TRUE;
  firstPhase=FALSE;
  /* start measurement */
  (void)%@Counter@'ModuleName'%.EnableEvent();
  %@utiOut@'ModuleName'%.Enable();
  do {
  } while(measurement==TRUE);
  /* measurement is finished, check for overflow error */
  if (counterOverflows>MAXCOUNTEROVERFLOWS) {
    return ERR_OVERFLOW;
  } else{
    return ERR_OK;
  }
}

%endif %- measureCycle
%-BW_METHOD_END measureCycle
%-************************************************************************************************************
%-BW_METHOD_BEGIN getUTIresults
%ifdef getUTIresults
%define! ParpUtiResults
%define! RetVal
%include Common\UTIgetUTIresults.Inc
byte %'ModuleName'%.%getUTIresults(word *pUtiResults)
{
  dword aCycle[NR_OF_PH];                                        %>>/* Phases of one cycle */
  byte err;                                                      %>>/* Buffer for error state */

%if %usingRtos='yes'
  if (xSemaphore != NULL && %@freeRTOS@'ModuleName'%.xSemaphoreTake(xSemaphore,portMAX_DELAY)==pdTRUE) {
    err=%'ModuleName'%.%measureCycle(aCycle);
    (void)%@freeRTOS@'ModuleName'%.xSemaphoreGive(xSemaphore);
  }
%else
  err=%'ModuleName'%.%measureCycle(aCycle);
%endif
  if (err!=ERR_OK) {
    return err;
  }
  %'ModuleName'%.%phasesToRorC(aCycle,pUtiResults);
  return ERR_OK;
}

%endif %- getUTIresults
%-BW_METHOD_END getUTIresults
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\UTIInit.Inc
void %'ModuleName'%.%Init(void)
{
%if %usingRtos='yes'
  xSemaphore = %@freeRTOS@'ModuleName'%.xSemaphoreCreateRecursiveMutex();%>>/* Create semaphore to protect the method measureCycle() */
  if (xSemaphore==NULL) { /* semaphore creation failed */
    for(;;) {} /* error, not enough memory? */
  }
%endif
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\UTIDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
%if %usingRtos='yes'
  %@freeRTOS@'ModuleName'%.vSemaphoreDelete(xSemaphore);
%endif
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN measureElements
%ifdef measureElements
%define! RetVal
%include Common\UTImeasureElements.Inc
byte %'ModuleName'%.%measureElements(void)
{
  dword aCycle[NR_OF_PH];                                        %>>/* Phases of one cycle */
  byte err;                                                      %>>/* Buffer for error state */

%if %usingRtos='yes'
  if (xSemaphore != NULL && %@freeRTOS@'ModuleName'%.xSemaphoreTake(xSemaphore,portMAX_DELAY)==pdTRUE) {
    err=%'ModuleName'%.%measureCycle(aCycle);
    (void)%@freeRTOS@'ModuleName'%.xSemaphoreGive(xSemaphore);
  }
%else
  err=%'ModuleName'%.%measureCycle(aCycle);
%endif
  if (err!=ERR_OK) {
    return err;
  }
  %'ModuleName'%.%phasesToRorC(aCycle,elements);
  return ERR_OK;
}


%endif %- measureElements
%-BW_METHOD_END measureElements
%-************************************************************************************************************
%-BW_METHOD_BEGIN getTemp
%ifdef getTemp
%define! ParpUtiTemperatures
%define! ParselectTemp
%define! RetVal
%include Common\UTIgetTemp.Inc
byte %'ModuleName'%.%getTemp(int16_t *pUtiTemperatures, byte selectTemp)
{
  /* converts the resistor values in decimal temperatures */
  *pUtiTemperatures = (int16_t)%@ptConv@'ModuleName'%.PtRtoTemperatur(elements[selectTemp]);

  return ERR_OK;
}

%endif %- getTemp
%-BW_METHOD_END getTemp
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

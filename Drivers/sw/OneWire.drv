%-Driver pre-generated by the Component Development Environment
%-      Copyright: 1997 - 2014 Freescale Semiconductor, Inc. All Rights Reserved.
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Development Environment will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor
%define DriverVersion 01.00
%define DriverDate    09/09/2014
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%ifdef TU
  %ifdef @TU@OnCounterRestart
    %define! Description_%@TU@OnCounterRestart Called if counter overflow/underflow or counter is reinitialized by modulo or compare register matching. OnCounterRestart event and Timer unit must be enabled. See <a href="TimerUnit_LDDMethods.html#SetEventMask">SetEventMask</a> and <a href="TimerUnit_LDDMethods.html#GetEventMask">GetEventMask</a> methods.This event is available only if a <a href="TimerUnit_LDDProperties.html#IntServiceCounter">Interrupt</a> is enabled. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @TU@OnCounterRestart
%endif %- TU
%ifdef TUSDK
  %ifdef @TUSDK@OnCounterRestart
    %define! Description_%@TUSDK@OnCounterRestart Event called from timer overflow interrupt The event services the event of the inherited component and eventually invokes other events.
  %endif %- @TUSDK@OnCounterRestart
%endif %- TUSDK
%-BW_INTERN_COMMENTS_END
%-
%define CDEversion Community
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
  %-
%-
%INTERFACE
%define! Settings Common\OneWireSettings.Inc
%define! Abstract Common\OneWireAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
typedef enum {
  OWERR_OK,
  OWERR_NO_DEVICE,
  OWERR_NO_RESPONSE,
  OWERR_BUSY,
  OWERR_CRC
} %'ModuleName'%.Error;

%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetError
%ifdef GetError
%include Common\OneWireGetError.inc
%'ModuleName'%.Error %'ModuleName'%.%GetError(void);
%endif  %-GetError
%-BW_METHOD_END GetError
%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_low
%ifdef i_recv_low
%include Common\OneWirei_recv_low.inc
void %'ModuleName'%.%i_recv_low(void);
%endif  %-i_recv_low
%-BW_METHOD_END i_recv_low
%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_wait
%ifdef i_wait
%include Common\OneWirei_wait.inc
void %'ModuleName'%.%i_wait(void);
%endif  %-i_wait
%-BW_METHOD_END i_wait
%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_presence
%ifdef i_presence
%include Common\OneWirei_presence.inc
void %'ModuleName'%.%i_presence(void);
%endif  %-i_presence
%-BW_METHOD_END i_presence
%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_action
%ifdef i_action
%include Common\OneWirei_action.inc
void %'ModuleName'%.%i_action(void);
%endif  %-i_action
%-BW_METHOD_END i_action
%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_run
%ifdef i_run
%include Common\OneWirei_run.inc
void %'ModuleName'%.%i_run(void);
%endif  %-i_run
%-BW_METHOD_END i_run
%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_get
%ifdef i_recv_get
%include Common\OneWirei_recv_get.inc
void %'ModuleName'%.%i_recv_get(void);
%endif  %-i_recv_get
%-BW_METHOD_END i_recv_get
%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_float
%ifdef i_recv_float
%include Common\OneWirei_recv_float.inc
void %'ModuleName'%.%i_recv_float(void);
%endif  %-i_recv_float
%-BW_METHOD_END i_recv_float
%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_send_float
%ifdef i_send_float
%include Common\OneWirei_send_float.inc
void %'ModuleName'%.%i_send_float(void);
%endif  %-i_send_float
%-BW_METHOD_END i_send_float
%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_send_low
%ifdef i_send_low
%include Common\OneWirei_send_low.inc
void %'ModuleName'%.%i_send_low(void);
%endif  %-i_send_low
%-BW_METHOD_END i_send_low
%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_reset
%ifdef i_reset
%include Common\OneWirei_reset.inc
void %'ModuleName'%.%i_reset(void);
%endif  %-i_reset
%-BW_METHOD_END i_reset
%-*****************************************************************************************************
%ifdef Waitms
%define! Parkey
%define! Partime_ms
%define! RetVal
%include Common\OneWireWaitms.inc
uint8_t %'ModuleName'%.%Waitms(uint8_t key, uint8_t time_ms);
%endif %- Waitms
%-*****************************************************************************************************
%ifdef ProgramEvent
%define! Parkey
%define! RetVal
%include Common\OneWireProgramEvent.inc
uint8_t %'ModuleName'%.%ProgramEvent(uint8_t key);
%endif %- ProgramEvent
%-*****************************************************************************************************
%-BW_METHOD_BEGIN Count
%ifdef Count
%include Common\OneWireCount.inc
uint8_t %'ModuleName'%.%Count(void);
%define!  RetVal
%endif  %-Count
%-BW_METHOD_END Count
%-*****************************************************************************************************
%ifdef Receive
%define! Parcounter
%define! RetVal
%include Common\OneWireReceive.inc
uint8_t %'ModuleName'%.%Receive(uint8_t counter);
%endif %- Receive
%-*****************************************************************************************************
%ifdef SendByte
%define! Pardata
%define! RetVal
%include Common\OneWireSendByte.inc
uint8_t %'ModuleName'%.%SendByte(uint8_t data);
%endif %- SendBytes
%-*****************************************************************************************************
%ifdef SendBytes
%define! Pardata
%define! Parcount
%define! RetVal
%include Common\OneWireSendBytes.inc
uint8_t %'ModuleName'%.%SendBytes(uint8_t *data, uint8_t count);
%endif %- SendBytes
%-*****************************************************************************************************
%-BW_METHOD_BEGIN SendReset
%ifdef SendReset
%define! RetVal
%include Common\OneWireSendReset.inc
uint8_t %'ModuleName'%.%SendReset(void);
%endif %- SendReset
%-BW_METHOD_END SendReset
%-*****************************************************************************************************
%ifdef add_CRC
%define! ParbitValue
%include Common\OneWireadd_CRC.inc
void %'ModuleName'%.%add_CRC(uint8_t bitValue);
%endif %- add_CRC
%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetByte
%ifdef GetBytes
%define! Pardata
%define! RetVal
%include Common\OneWireGetByte.inc
uint8_t %'ModuleName'%.%GetByte(uint8_t *data);
%endif %- GetByte
%-BW_METHOD_END GetByte
%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetBytes
%ifdef GetBytes
%define! Pardata
%define! Parcount
%define! RetVal
%include Common\OneWireGetBytes.inc
uint8_t %'ModuleName'%.%GetBytes(uint8_t *data, uint8_t count);
%endif %- GetBytes
%-BW_METHOD_END GetBytes
%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\OneWireInit.inc
void %'ModuleName'%.%Init(void);
%endif  %-Init
%-BW_METHOD_END Init

%-INHERITED_EVENT_BEGIN TU OnCounterRestart
%ifdef @TU@OnCounterRestart
void %@TU@OnCounterRestart(LDD_TUserData *UserDataPtr);

%endif %- @TU@OnCounterRestart
%-INHERITED_EVENT_END TU OnCounterRestart

%-************************************************************************************************************
%-BW_METHOD_BEGIN isBusy
%ifdef isBusy
bool %'ModuleName'%.%isBusy(void);
%define! RetVal
%include Common\OneWireisBusy.Inc

%endif %- isBusy
%-BW_METHOD_END isBusy
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\OneWireDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalcCRC
%ifdef CalcCRC
uint8_t %'ModuleName'%.%CalcCRC(uint8_t *data, uint8_t dataSize);
%define! Pardata
%define! PardataSize
%define! RetVal
%include Common\OneWireCalcCRC.Inc

%endif %- CalcCRC
%-BW_METHOD_END CalcCRC
%-INHERITED_EVENT_BEGIN TUSDK OnCounterRestart
%if defined(TUSDK)
%ifdef @TUSDK@OnCounterRestart
void %@TUSDK@OnCounterRestart(void);

%endif %- @TUSDK@OnCounterRestart
%endif
%-INHERITED_EVENT_END TUSDK OnCounterRestart
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnSendedReset
%ifdef OnSendedReset
%INTERFACE OnSendedReset
void %OnSendedReset(void);
%include Common\OneWireOnSendedReset.inc
%endif %-OnSendedReset
%-BW_METHOD_END OnSendedReset
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnSendEnd
%ifdef OnSendEnd
%INTERFACE OnSendEnd
void %OnSendEnd(void);
%include Common\OneWireOnSendEnd.inc
%endif %-OnSendEnd
%-BW_METHOD_END OnSendEnd
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnWaitEnd
%ifdef OnWaitEnd
%INTERFACE OnWaitEnd
void %OnWaitEnd(uint8_t key2);
%define! Parkey2
%include Common\OneWireOnWaitEnd.inc
%endif %- OnWaitEnd
%-BW_METHOD_END OnWaitEnd
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnBlockReceived
%ifdef OnBlockReceived
%INTERFACE OnBlockReceived
void %OnBlockReceived(void);
%include Common\OneWireOnBlockReceived.inc
%endif %-OnBlockReceived
%-BW_METHOD_END OnBlockReceived
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%INTERFACE OnError
void %OnError(%'ModuleName'_Error error);
%include Common\OneWireOnError.inc
%endif %-OnError
%-BW_METHOD_END OnError
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnProgramEvent
%ifdef OnProgramEvent
%INTERFACE OnProgramEvent
void %OnProgramEvent(uint8_t key4);
%define! Parkey4
%include Common\OneWireOnProgramEvent.inc
%endif %- OnProgramEvent
%-BW_METHOD_END OnProgramEvent
%-*****************************************************************************************************

%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\OneWireSettings.Inc
%define! Abstract Common\OneWireAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
#define INPUT          0U
#define OUTPUT         1U

#if %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN
  #define DQ_Init()               %@DataPin@'ModuleName'%.Init(); \
                                  %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN_INIT()
#else
  #define DQ_Init()               %@DataPin@'ModuleName'%.Init()
#endif
#define DQ_Floating()           %@DataPin@'ModuleName'%.SetInput()
#if %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN
  #define DQ_SetLow()             %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN_LOW()
  #define DQ_Low()                %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN_SETOUTPUT()
#else
  #define DQ_SetLow()             %@DataPin@'ModuleName'%.ClrVal()
  #define DQ_Low()                %@DataPin@'ModuleName'%.SetOutput()
#endif
#if %'ModuleName'%.CONFIG_DEBUG_READ_PIN_ENABLED
  #define DBG_Init()              %'ModuleName'%.CONFIG_DEBUG_READ_PIN_INIT()
  #define DQ_Read()               (%'ModuleName'%.CONFIG_DEBUG_READ_PIN_TOGGLE(), %@DataPin@'ModuleName'%.GetVal()!=0)
#else
  #define DBG_Init()              /* empty */
  #define DQ_Read()               %@DataPin@'ModuleName'%.GetVal()!=0
#endif

/* timer macros */
#if %'ModuleName'%.CONFIG_TIMER_UNIT_LDD
  #define TU_Reset()
#else
#endif

#if %'ModuleName'%.CONFIG_TIMER_UNIT_LDD
%if defined(TU)
  #define TU_Init()              %@TU@'ModuleName'%.Init(NULL)
  #define TU_Deinit()            %@TU@'ModuleName'%.Deinit(Data.TUDeviceDataPtr)
  #define TU_GetTimerFrequency() %@TU@'ModuleName'%.GetInputFrequency(Data.TUDeviceDataPtr)
  #define TU_Disable()           %@TU@'ModuleName'%.Disable(Data.TUDeviceDataPtr)
  #define TU_ResetCounter()      %@TU@'ModuleName'%.ResetCounter(Data.TUDeviceDataPtr)
  #define TU_SetPeriodUS(us)     %@TU@'ModuleName'%.SetPeriodTicks(Data.TUDeviceDataPtr, (us)*Data.Ticks)
  #define TU_Enable()            %@TU@'ModuleName'%.Enable(Data.TUDeviceDataPtr)
%else
  #define TU_Init()               NULL
  #define TU_Deinit()             /* empty */
  #define TU_GetTimerFrequency()  0
  #define TU_Disable()            /* empty */
  #define TU_ResetCounter()       /* empty */
  #define TU_SetPeriodUS(us)      /* empty */
  #define TU_Enable()             /* empty */
%endif
#else
  #define TU_Init()               NULL
  #define TU_Deinit()             /* empty */
  #define TU_GetTimerFrequency()  0
  #define TU_Disable()            /* empty */
  #define TU_ResetCounter()       /* empty */
  #define TU_SetPeriodUS(us)      /* empty */
  #define TU_Enable()             /* empty */
#endif

typedef enum {
  I_RESET, /* reset instruction */
  I_SEND,  /* send data instruction */
  I_RECV,  /* receive data instruction */
  I_WAIT,  /* wait instruction */
  I_EVENT  /* event instruction */
} INSTR;

typedef enum {
  TS_NOTHING, /* end of timer step */
  /* I_RESET: reset sequence */
  TS_RESET_LOW, /* start of reset, pulling pin LOW */
  TS_RESET_FLOAT, /* reset sequence, release pin */
  TS_PRESENCE, /* check for presence */
  /* I_SEND: writing sequence */
  TS_WRITE_LOW, /* strt of write, pulling pin LOW */
  TS_WRITE_FLOAT, /* writing sequence, releasing pin */
  /* I_RECV: reading sequence */
  TS_READ_LOW, /* start of read, pulling pin low */
  TS_READ_FLOAT, /* middle of read, releasing pin */
  TS_READ_GET, /* reading data */
  /* I_WAIT_ waiting sequence */
  TS_WAIT_INTER,
  TS_WAIT,
  TS_EVENT
} %'ModuleName'%.TimerStep;

typedef struct {
  INSTR Instr     :3; /* instruction code */
  unsigned Count  :5; /* e.g. how many bytes to send */
} PROG;

struct {
#if !%@sdk@'ModuleName'%.CONFIG_NXP_SDK_USED
  LDD_TDeviceData *TUDeviceDataPtr; /* timer handle */
#endif
  %'ModuleName'%.TimerStep Step;
  uint16 Ticks; /* number of timer ticks for one us */
  uint16 WaitTime;
  uint32 WaitTotal;
  uint16 WaitDiv;
  uint16 WaitRes;
  uint8 CRC;
  %'ModuleName'%.Error Error;
  PROG Prog;
  uint8 WorkByte;
  unsigned ToWork     :6;
  unsigned WorkBit    :1;
  volatile unsigned Busy       :1;
  unsigned WorkBitPos :3;
  unsigned WaitEvent  :1;
  unsigned SkipWEvent :1;
  unsigned WaitKey    :5;
} Data;

static void TU_SetTime(uint32_t us) {
  TU_Disable();
  TU_ResetCounter();
  TU_SetPeriodUS(us);
  TU_Enable();
}

static void %'ModuleName'%.OnTimerRestart(void) {
  switch(Data.Step) {
    case TS_NOTHING:
      if(%@Program@'ModuleName'%.NofElements()==0) {
        TU_Disable();
        Data.Busy = FALSE;
      } else {
        %'ModuleName'%.i_action();
      }
      break;
    case TS_RESET_LOW:
      %'ModuleName'%.i_reset();
      break;
    case TS_RESET_FLOAT:
      DQ_Floating();
      TU_SetTime(%'ModuleName'%.CONFIG_I_RESPONSE_TIME); /* have it floating for this time until handling of TS_PRESENCE */
      Data.Step = TS_PRESENCE;
      break;
    case TS_PRESENCE:
      %'ModuleName'%.i_presence();
      break;
    case TS_WRITE_LOW:
      %'ModuleName'%.i_send_low();
      break;
    case TS_WRITE_FLOAT:
      %'ModuleName'%.i_send_float();
      break;
    case TS_READ_LOW:
      %'ModuleName'%.i_recv_low();
      break;
    case TS_READ_FLOAT:
      %'ModuleName'%.i_recv_float();
      break;
    case TS_READ_GET:
      %'ModuleName'%.i_recv_get();
      break;
    case TS_WAIT_INTER:
      Data.WaitDiv--;
      if(Data.WaitDiv == 0) {
        TU_SetPeriodUS(Data.WaitRes);
        Data.Step = TS_WAIT;
      }
      break;
    case TS_WAIT:
      Data.WaitKey = Data.Prog.Count;
      %'ModuleName'%.i_action();
      Data.WaitEvent = TRUE;
      Data.SkipWEvent = TRUE;
      break;
    case TS_EVENT:
      %ifdef OnProgramEvent
      %OnProgramEvent(Data.Prog.Count);
      %endif %- OnProgramEvent
      %'ModuleName'%.i_action();
      break;
    default:
      break;
  } /* switch */
  if(Data.SkipWEvent) {
    Data.SkipWEvent = FALSE;
  } else {
    if(Data.WaitEvent) {
    %ifdef OnWaitEnd
      %OnWaitEnd(Data.WaitKey);
    %endif %- OnWaitEnd
      Data.WaitEvent = FALSE;
    }
  }
}

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetError
%ifdef GetError
%include Common\OneWireGetError.inc
%'ModuleName'%.Error %'ModuleName'%.%GetError(void)
{
  return Data.Error;
}
%endif %-GetError
%-BW_METHOD_END GetError

%-*****************************************************************************************************
%-BW_METHOD_BEGIN SendBytes
%ifdef SendBytes
%define! Pardata
%define! Parcount
%define! RetVal
%include Common\OneWireSendBytes.inc
uint8_t %'ModuleName'%.%SendBytes(uint8_t *data, uint8_t count)
{
  PROG pr, last;

  (void)%@Program@'ModuleName'%.Peek(0, (uint8_t*)&last);
  if((last.Instr != I_SEND && %@Program@'ModuleName'%.NofFreeElements()==0) || (%@Output@'ModuleName'%.NofFreeElements() < count)) {
    return ERR_FAILED;
  }
  pr.Instr = I_SEND;
  pr.Count = count;
  for(;count>0;count--) {
    (void)%@Output@'ModuleName'%.Put(*data);
    data++;
  }
  if(last.Instr == I_SEND) { /* update last element */
    last.Count += pr.Count; /* update */
    (void)%@Program@'ModuleName'%.Update(0, (uint8_t*)&last); /* update */
  } else {
    (void)%@Program@'ModuleName'%.Put(*(uint8_t*)&pr);
  }
  if(!Data.Busy) {
    %'ModuleName'%.i_action();
    %'ModuleName'%.i_run();
    %'ModuleName'%.i_send_low();
  }
  return ERR_OK;
}
%endif %- SendBytes
%-BW_METHOD_END SendBytes

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_run
%ifdef i_run
%include Common\OneWirei_run.inc
void %'ModuleName'%.%i_run(void)
{
  Data.Busy = TRUE;
  TU_ResetCounter();
  TU_Enable();
}
%endif %-i_run
%-BW_METHOD_END i_run

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_action
%ifdef i_action
%include Common\OneWirei_action.inc
void %'ModuleName'%.%i_action(void)
{
  if(%@Program@'ModuleName'%.NofElements()==0) {
    TU_SetTime(%'ModuleName'%.CONFIG_SLOT_TIME);
    Data.Step = TS_NOTHING;
    return;
  }
  (void)%@Program@'ModuleName'%.Get((uint8_t*)&Data.Prog);
  switch(Data.Prog.Instr) {
    case I_RESET:
      TU_SetTime(%'ModuleName'%.CONFIG_H_RESET_TIME);
      Data.Step = TS_RESET_LOW;
      break;
    case I_SEND:
      Data.ToWork = Data.Prog.Count;
      %'ModuleName'%.i_send_float();
      break;
    case I_RECV:
      Data.ToWork = Data.Prog.Count;
      Data.WorkByte = 0;
      TU_SetTime(%'ModuleName'%.CONFIG_A_READ_TIME);
      Data.Step = TS_READ_LOW;
      break;
    case I_WAIT:
      (void)%@Time@'ModuleName'%.Get(&Data.WaitTime);
      Data.WaitTotal = (uint32) Data.WaitTime * Data.Ticks * 1000U;
      Data.WaitDiv = Data.WaitTotal >> 16;
      Data.WaitRes = Data.WaitTotal & 0x0000FFFF;
      if(Data.WaitDiv == 0) {
        TU_SetPeriodUS(Data.WaitRes);
        Data.Step = TS_WAIT;
      } else {
        TU_SetPeriodUS(0xFFFF);
        Data.Step = TS_WAIT_INTER;
      }
      break;
    case I_EVENT:
      TU_SetTime(%'ModuleName'%.CONFIG_H_RESET_TIME);
      Data.Step = TS_EVENT;
      break;
    default:
      break;
  } /* switch */
}
%endif %-i_action
%-BW_METHOD_END i_action

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_presence
%ifdef i_presence
%include Common\OneWirei_presence.inc
void %'ModuleName'%.%i_presence(void)
{
  if(DQ_Read()) {	//No response
    Data.Step = TS_NOTHING;
    Data.Error = OWERR_NO_DEVICE;
  %ifdef OnError
    %OnError(Data.Error);
  %endif
  } else {
    Data.Error = OWERR_OK;
    %'ModuleName'%.i_action();
  }
}
%endif %-i_presence
%-BW_METHOD_END i_presence

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_reset
%ifdef i_reset
%include Common\OneWirei_reset.inc
void %'ModuleName'%.%i_reset(void)
{
  DQ_Low();
  TU_SetTime(%'ModuleName'%.CONFIG_H_RESET_TIME);
  Data.Step = TS_RESET_FLOAT;
}
%endif %-i_reset
%-BW_METHOD_END i_reset

%-*****************************************************************************************************
%-BW_METHOD_BEGIN SendReset
%ifdef SendReset
%define! RetVal
%include Common\OneWireSendReset.inc
uint8_t %'ModuleName'%.%SendReset(void)
{
  PROG pr;

  if(%@Program@'ModuleName'%.NofFreeElements()==0) {
    return ERR_FAILED;
  }
  pr.Instr = I_RESET;
  (void)%@Program@'ModuleName'%.Put(*(uint8_t*)&pr);
  if(!Data.Busy) { /* start action */
    %'ModuleName'%.i_action();
    %'ModuleName'%.i_reset();
    %'ModuleName'%.i_run();
  }
  return ERR_OK;
}
%endif %- SendReset
%-BW_METHOD_END SendReset

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_send_low
%ifdef i_send_low
%include Common\OneWirei_send_low.inc
void %'ModuleName'%.%i_send_low(void)
{
  DQ_Low();
  if(Data.WorkBit) {
    TU_SetTime(%'ModuleName'%.CONFIG_A_WRITE_1_LOW_TIME);
    Data.SkipWEvent = TRUE;
  } else {
    TU_SetTime(%'ModuleName'%.CONFIG_C_WRITE_0_LOW_TIME);
  }
  Data.Step = TS_WRITE_FLOAT; /* next step is to release pin */
}
%endif %-i_send_low
%-BW_METHOD_END i_send_low

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_send_float
%ifdef i_send_float
%include Common\OneWirei_send_float.inc
void %'ModuleName'%.%i_send_float(void)
{
  DQ_Floating();
  if(Data.WorkBitPos==0) { /* all bits sent? */
    if(Data.ToWork) {
      (void)%@Output@'ModuleName'%.Get(&Data.WorkByte);
      Data.ToWork--;
    } else {
      %'ModuleName'%.i_action();
      return;
    }
  }
  Data.WorkBit = Data.WorkByte & 1;
  Data.WorkByte >>= 1;
  if(Data.WorkBit) { /* set time for when we will get back to floating */
    TU_SetTime(%'ModuleName'%.CONFIG_B_WRITE_1_HIGH_TIME);
  } else {
    TU_SetTime(%'ModuleName'%.CONFIG_D_WRITE_0_HIGH_TIME);
  }
  Data.WorkBitPos++;
  Data.Step = TS_WRITE_LOW; /* next action for the next bit: pull LOW to start new bit */
}
%endif %-i_send_float
%-BW_METHOD_END i_send_float

%-*****************************************************************************************************
%-BW_METHOD_BEGIN SendByte
%ifdef SendByte
%define! Pardata
%define! RetVal
%include Common\OneWireSendByte.inc
uint8_t %'ModuleName'%.%SendByte(uint8_t data)
{
  PROG pr, last;

  (void)%@Program@'ModuleName'%.Peek(0, (uint8_t*)&last);
  if(last.Instr == I_SEND) {
    (void)%@Output@'ModuleName'%.Put(data);
    last.Count++; /* update */
    (void)%@Program@'ModuleName'%.Update(0, (uint8_t*)&last); /* update element */
  } else {
    if(%@Program@'ModuleName'%.NofFreeElements()==0) {
      return ERR_FAILED;
    }
    (void)%@Output@'ModuleName'%.Put(data);
    pr.Instr = I_SEND;
    pr.Count = 1;
    (void)%@Program@'ModuleName'%.Put(*(uint8_t*)&pr);
  }
  if(!Data.Busy) {
    %'ModuleName'%.i_action();
    %'ModuleName'%.i_send_low();
    %'ModuleName'%.i_run();
  }
  return ERR_OK;
}
%endif %- SendByte
%-BW_METHOD_END SendByte

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_get
%ifdef i_recv_get
%include Common\OneWirei_recv_get.inc
void %'ModuleName'%.%i_recv_get(void)
{
  Data.WorkByte >>= 1;
  Data.WorkBit = DQ_Read();
  %'ModuleName'%.add_CRC(Data.WorkBit);
  Data.WorkByte += (Data.WorkBit ? 0x80 : 0);
  if(Data.WorkBitPos == 7) { /* Full byte */
    (void)%@Input@'ModuleName'%.Put(Data.WorkByte);
    Data.ToWork--;
    if(Data.ToWork == 0) {  /* finish */
      if(Data.CRC){
        Data.Error = OWERR_CRC;
      %ifdef OnError
        %OnError(Data.Error);
      %endif
      } else {
        Data.Error = OWERR_OK;
      %ifdef OnBlockReceived
        %OnBlockReceived();
      %endif
      }
      %'ModuleName'%.i_action();
      return;
    }
  }
  Data.WorkBitPos++;
  TU_SetTime(%'ModuleName'%.CONFIG_F_AFTER_READ_DELAY_TIME);
  Data.Step = TS_READ_LOW;
}
%endif %-i_recv_get
%-BW_METHOD_END i_recv_get

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_float
%ifdef i_recv_float
%include Common\OneWirei_recv_float.inc
void %'ModuleName'%.%i_recv_float(void)
{
  DQ_Floating();
  TU_SetTime(%'ModuleName'%.CONFIG_E_BEFORE_READ_DELAY_TIME);
  Data.SkipWEvent = TRUE;
  Data.Step = TS_READ_GET;
}
%endif %-i_recv_float
%-BW_METHOD_END i_recv_float

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_low
%ifdef i_recv_low
%include Common\OneWirei_recv_low.inc
void %'ModuleName'%.%i_recv_low(void)
{
  DQ_Low();
  Data.SkipWEvent = TRUE;
  TU_SetTime(%'ModuleName'%.CONFIG_A_READ_TIME);
  Data.Step = TS_READ_FLOAT;
}
%endif %-i_recv_low
%-BW_METHOD_END i_recv_low

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Receive
%ifdef Receive
%define! Parcounter
%define! RetVal
%include Common\OneWireReceive.inc
uint8_t %'ModuleName'%.%Receive(uint8_t counter)
{
  PROG pr;

  if(%@Program@'ModuleName'%.NofFreeElements()==0) {
    return ERR_FAILED;
  }
  pr.Instr = I_RECV;
  pr.Count = counter;
  (void)%@Program@'ModuleName'%.Put(*(uint8_t*)&pr);
  if(!Data.Busy) {
    %'ModuleName'%.i_action();
    %'ModuleName'%.i_recv_low();
    %'ModuleName'%.i_run();
  }
  return ERR_OK;
}
%endif %- Receive
%-BW_METHOD_END Receive

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ProgramEvent
%ifdef ProgramEvent
%define! Parkey
%define! RetVal
%include Common\OneWireProgramEvent.inc
uint8_t %'ModuleName'%.%ProgramEvent(uint8_t key)
{
  PROG pr;

  if(%@Program@'ModuleName'%.NofFreeElements()==0) {
    return ERR_FAILED;
  }
  pr.Instr = I_EVENT;
  pr.Count = key;
  (void)%@Program@'ModuleName'%.Put(*(uint8_t*)&pr);
  if(!Data.Busy) {
    %'ModuleName'%.i_action();
  }
  return ERR_OK;
}
%endif %- ProgramEvent
%-BW_METHOD_END ProgramEvent

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_wait
%ifdef i_wait
%include Common\OneWirei_wait.inc
void %'ModuleName'%.%i_wait(void)
{
  Data.WaitEvent = FALSE;
%if defined(OnWaitEnd)
  %OnWaitEnd(Data.WaitKey);
%endif
}
%endif %-i_wait
%-BW_METHOD_END i_wait

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Waitms
%ifdef Waitms
%define! Partime_ms
%define! Parkey
%define! RetVal
%include Common\OneWireWaitms.inc
uint8_t %'ModuleName'%.%Waitms(uint8_t key, uint8_t time_ms)
{
  PROG pr;
  %@CS@'ModuleName'%.CriticalVariable()

  if((%@Program@'ModuleName'%.NofFreeElements()==0) || (%@Time@'ModuleName'%.NofFreeElements()==0)) {
    return ERR_FAILED;
  }
  %@CS@'ModuleName'%.EnterCritical();
  pr.Instr = I_WAIT;
  pr.Count = key;
  (void)%@Program@'ModuleName'%.Put(*(uint8_t*)&pr);
  (void)%@Time@'ModuleName'%.Put(time_ms);
  %@CS@'ModuleName'%.ExitCritical();
  return ERR_OK;
}
%endif %- Waitms
%-BW_METHOD_END Waitms

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Count
%ifdef Count
%define! RetVal
%include Common\OneWireCount.inc
uint8_t %'ModuleName'%.%Count(void)
{
  return %@Input@'ModuleName'%.NofElements();
}
%endif %-Count
%-BW_METHOD_END Count

%-*****************************************************************************************************
%-BW_METHOD_BEGIN add_CRC
%ifdef add_CRC
%define! ParbitValue
%include Common\OneWireadd_CRC.inc
void %'ModuleName'%.%add_CRC(uint8_t bitValue)
{
  bool fb;

  fb = (Data.CRC & 0x01) ^ bitValue;
  Data.CRC >>= 1;
  if(fb) {
    Data.CRC ^= 0x8C;
  }
}
%endif %- add_CRC
%-BW_METHOD_END add_CRC

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetByte
%ifdef GetByte
%define! Pardata
%define! RetVal
%include Common\OneWireGetByte.inc
uint8_t %'ModuleName'%.%GetByte(uint8_t *data)
{
  if (%@Input@'ModuleName'%.NofElements()==0) {
    return ERR_FAILED;
  }
  (void)%@Input@'ModuleName'%.Get(data);
  return ERR_OK;
}
%endif %- GetByte
%-BW_METHOD_END GetByte

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetBytes
%ifdef GetBytes
%define! Par_byte
%define! Pardata
%define! Parcount
%define! RetVal
%include Common\OneWireGetBytes.inc
uint8_t %'ModuleName'%.%GetBytes(uint8_t *data, uint8_t count)
{
  if(count > %@Input@'ModuleName'%.NofElements()) {
    return ERR_FAILED;
  }
  for(;count>0;count--) {
    (void)%@Input@'ModuleName'%.Get(data);
    data++;
  }
  return ERR_OK;
}
%endif %- GetBytes
%-BW_METHOD_END GetBytes

%-************************************************************************************************************
%-BW_METHOD_BEGIN isBusy
%ifdef isBusy
%define! RetVal
%include Common\OneWireisBusy.Inc
bool %'ModuleName'%.%isBusy(void)
{
  return (Data.Busy!=0);
}

%endif %- isBusy
%-BW_METHOD_END isBusy
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalcCRC
%ifdef CalcCRC
%define! Pardata
%define! PardataSize
%define! RetVal
%include Common\OneWireCalcCRC.Inc
uint8_t %'ModuleName'%.%CalcCRC(uint8_t *data, uint8_t dataSize)
{
  uint8_t crc, i, x, y;

  crc = 0;
  for(x=0;x<dataSize;x++){
    y = data[x];
    for(i=0;i<8;i++) { /* go through all bits of the data byte */
      if((crc&0x01)^(y&0x01)) {
        crc >>= 1;
        crc ^= 0x8c;
      } else {
        crc >>= 1;
      }
      y >>= 1;
    }
  }
  return crc;
}

%endif %- CalcCRC
%-BW_METHOD_END CalcCRC
%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\OneWireInit.inc
void %'ModuleName'%.%Init(void)
{
#if %@sdk@'ModuleName'%.CONFIG_NXP_SDK_USED
  /* using SDK, need to initialize inherited components */
  DQ_Init();
  DBG_Init();
  %@Input@'ModuleName'%.Init(); /* input ringbuffer */
  %@Output@'ModuleName'%.Init(); /* output ringbuffer */
  %@Program@'ModuleName'%.Init(); /* program ringbuffer */
  %@Time@'ModuleName'%.Init(); /* time ringbuffer */
#else
  Data.TUDeviceDataPtr = TU_Init(); /* timer init */
#endif
  Data.Ticks = TU_GetTimerFrequency()/1000000U;
  Data.Busy = FALSE;
  Data.WorkBitPos = 0;
  Data.WaitEvent = FALSE;
  Data.SkipWEvent = FALSE;
  Data.Step = TS_NOTHING;
  Data.CRC = 0;
  Data.Error = OWERR_OK;

  DQ_Floating(); /* input mode, let the pull-up take the signal high */
  /* load LOW to output register. We won't change that value afterwards, we only switch between output and input/float mode */
  DQ_SetLow();
}
%endif %-Init
%-BW_METHOD_END Init

%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\OneWireDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  TU_Deinit(); /* timer deinit */
#if !%@sdk@'ModuleName'%.CONFIG_NXP_SDK_USED
  Data.TUDeviceDataPtr = NULL;
#endif
  Data.Ticks = 0;
  Data.Busy = FALSE;
  Data.WorkBitPos = 0;
  Data.WaitEvent = FALSE;
  Data.SkipWEvent = FALSE;
  Data.Step = TS_NOTHING;
  Data.CRC = 0;
  Data.Error = OWERR_OK;

  DQ_Floating(); /* input mode, tristate pin */
}

%endif %- Deinit
%-BW_METHOD_END Deinit

%-INHERITED_EVENT_BEGIN TU OnCounterRestart
%if defined(TU)
%ifdef @TU@OnCounterRestart
%include Common\GeneralInternal.inc (OnCounterRestart)
void %@TU@OnCounterRestart(LDD_TUserData *UserDataPtr)
{
  (void)UserDataPtr; /* not used */
  %'ModuleName'%.OnTimerRestart();
}
%endif %- @TU@OnCounterRestart
%endif
%-INHERITED_EVENT_END TU OnCounterRestart
%-INHERITED_EVENT_BEGIN TUSDK OnCounterRestart
%if defined(TUSDK)
%ifdef @TUSDK@OnCounterRestart
%include Common\GeneralInternal.inc (OnCounterRestart)
void %@TUSDK@OnCounterRestart(void)
{
  %'ModuleName'%.OnTimerRestart();
}

%endif %- @TUSDK@OnCounterRestart
%endif
%-INHERITED_EVENT_END TUSDK OnCounterRestart
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnSendedReset
%ifdef OnSendedReset
%IMPLEMENTATION OnSendedReset
%include Common\OneWireOnSendedReset.inc
void %OnSendedReset(void)
{
  /* Write your code here ... */
}
%endif %-OnSendedReset
%-BW_METHOD_END OnSendedReset

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnSendEnd
%ifdef OnSendEnd
%IMPLEMENTATION OnSendEnd
%include Common\OneWireOnSendEnd.inc
void %OnSendEnd(void)
{
  /* Write your code here ... */
}
%endif %-OnSendEnd
%-BW_METHOD_END OnSendEnd

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnWaitEnd
%ifdef OnWaitEnd
%IMPLEMENTATION OnWaitEnd
%define! Parkey2
%include Common\OneWireOnWaitEnd.inc
void %OnWaitEnd(uint8_t key2)
{
  /* Write your code here ... */
}
%endif %- OnWaitEnd
%-BW_METHOD_END OnWaitEnd

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnBlockReceived
%ifdef OnBlockReceived
%IMPLEMENTATION OnBlockReceived
%include Common\OneWireOnBlockReceived.inc
void %OnBlockReceived()
{
  /* Write your code here ... */
}
%endif %-OnBlockReceived
%-BW_METHOD_END OnBlockReceived

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%IMPLEMENTATION OnError
%define! Parerror
%include Common\OneWireOnError.inc
void %OnError(%'ModuleName'_Error error)
{
  /* Write your code here ... */
}
%endif %-OnError
%-BW_METHOD_END OnError

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnProgramEvent
%ifdef OnProgramEvent
%IMPLEMENTATION OnProgramEvent
%define! Parkey4
%include Common\OneWireOnProgramEvent.inc
void %OnProgramEvent(uint8_t key4)
{
  /* Write your code here ... */
}
%endif %- OnProgramEvent
%-BW_METHOD_END OnProgramEvent

%-*****************************************************************************************************
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for 1-Wire
 *
 * This header file is used to configure settings of the 1-Wire module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

/* timing in micro seconds */
#define %'ModuleName'%.CONFIG_A_WRITE_1_LOW_TIME                 %>60 %write1LowTime%>60/* A */
#define %'ModuleName'%.CONFIG_B_WRITE_1_HIGH_TIME                %>60 %write1HighTime%>60/* B */
#define %'ModuleName'%.CONFIG_C_WRITE_0_LOW_TIME                 %>60 %write0LowTime%>60/* C */
#define %'ModuleName'%.CONFIG_D_WRITE_0_HIGH_TIME                %>60 %write0HighTime%>60/* D */
#define %'ModuleName'%.CONFIG_H_RESET_TIME                       %>60 %resetTime%>60/* H */
#define %'ModuleName'%.CONFIG_I_RESPONSE_TIME                    %>60 %responseTime%>60/* I */
#define %'ModuleName'%.CONFIG_A_READ_TIME                        %>60 %'ModuleName'%.CONFIG_A_WRITE_1_LOW_TIME%>60/* A (for read) */
#define %'ModuleName'%.CONFIG_E_BEFORE_READ_DELAY_TIME           %>60 %beforeReadDelayTime%>60/* E */
#define %'ModuleName'%.CONFIG_F_AFTER_READ_DELAY_TIME            %>60 %afterReadDelayTime%>60/* F */
#define %'ModuleName'%.CONFIG_SLOT_TIME                          %>60 %slotTime

%if defined(DbgReadPin)
#define %'ModuleName'%.CONFIG_DEBUG_READ_PIN_ENABLED             %>60 (1)
%else
#define %'ModuleName'%.CONFIG_DEBUG_READ_PIN_ENABLED             %>60 (0)
%endif
  /*!< 1: Toggle extra GPIO pin during 1-wire read access; 0: no debug */

#if %'ModuleName'%.CONFIG_DEBUG_READ_PIN_ENABLED
%if defined(DbgReadPin)
  #include "%@DbgReadPin@ModuleName.h" /* SDK and API used */
  #define %'ModuleName'%.CONFIG_DEBUG_READ_PIN_INIT()            %>60 %@DbgReadPin@'ModuleName'%.Init()
  #define %'ModuleName'%.CONFIG_DEBUG_READ_PIN_TOGGLE()          %>60 %@DbgReadPin@'ModuleName'%.NegVal()
%else
  #include "DbgReadPin.h"
  #define %'ModuleName'%.CONFIG_DEBUG_READ_PIN_INIT()            %>60 DbgReadPin_Init()
  #define %'ModuleName'%.CONFIG_DEBUG_READ_PIN_TOGGLE()          %>60 DbgReadPin_NegVal()
%endif
#endif

#ifndef %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN
%if defined(WritePin)
  #define %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN              %>50 (1)
%else
  #define %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN              %>60 (0)
%endif
    /*!< 1: using dedicated write pin; 0: using single pin for read/write */
#endif

#if %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN
%if defined(WritePin)
  #include "%@WritePin@ModuleName.h" /* SDK and API used */
  #define %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN_INIT()       %>60 %@WritePin@'ModuleName'%.Init()
  #define %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN_LOW()        %>60 %@WritePin@'ModuleName'%.ClrVal()
  #define %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN_SETOUTPUT    %>60 %@WritePin@'ModuleName'%.SetOutput()
%else
  #include "WritePin.h"
  #define %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN_INIT()       %>60 WritePin_Init()
  #define %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN_LOW()        %>60 WritePin_ClrVal()
  #define %'ModuleName'%.CONFIG_DEDICATED_WRITE_PIN_SETOUTPUT    %>60 WritePin_SetOutput()
%endif
#endif

#ifndef %'ModuleName'%.CONFIG_TIMER_UNIT_LDD
%if defined(TU)
  #define %'ModuleName'%.CONFIG_TIMER_UNIT_LDD                   %>60 (1)
%else
  #define %'ModuleName'%.CONFIG_TIMER_UNIT_LDD                   %>60 (0)
%endif
    /*!< 1: using TimerUnit_LDD, 0: not using TimerUnit_LDD */
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------

%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    26.06.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\LEDSensorSettings.Inc
%define! Abstract Common\LEDSensorAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"
#include <stddef.h> /* for NULL */

%if defined(SetThreshold) %- use variable threshold values
extern word %'ModuleName'%.Threshold_us;
%else %- use constant value
#define %'ModuleName'%.Threshold_us  %ThresholdUs /* the threshold time in us at which time we can decide if we have a light or not */
%endif

%include sw\CommonSupport.prg
%-
%define INLINE_ME
%-
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_PortStatus
#define __BWUserType_%'ModuleName'_PortStatus
  typedef %@RevBiasLED@'ModuleName'%.PortStatus %'ModuleName'%.PortStatus;%>40/* Structure used for backup and restore of port status. */
#endif
#ifndef __BWUserType_%'ModuleName'_SensorValType
#define __BWUserType_%'ModuleName'_SensorValType
  typedef %@RevBiasLED@'ModuleName'%.SensorValType %'ModuleName'%.SensorValType;%>40/* The type the sensor can return it's value. It is a boolean for a single LED and a byte or even word if we have a more capable sensor available. */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
#define %'ModuleName'%.LIGHT_MASK  %@RevBiasLED@'ModuleName'%.LIGHT_MASK /* how many bits we are able to see with light */
#define %'ModuleName'%.THRESHOLD_STEP_US %ThresholdStepUs /* threshold step in us */
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-BW_METHOD_BEGIN On
%ifdef On
%if defined(INLINE_ME)
#define %'ModuleName'%.%On() %@RevBiasLED@'ModuleName'%.On()
%else
void %'ModuleName'%.%On(void);
%endif /* INLINE_ME */
%include Common\LEDSensorOn.Inc

%endif %- On
%-BW_METHOD_END On
%-BW_METHOD_BEGIN Off
%ifdef Off
%if defined(INLINE_ME)
#define %'ModuleName'%.%Off() %@RevBiasLED@'ModuleName'%.Off()
%else
void %'ModuleName'%.%Off(void);
%endif /* INLINE_ME */
%include Common\LEDSensorOff.Inc

%endif %- Off
%-BW_METHOD_END Off
%-************************************************************************************************************
%-BW_METHOD_BEGIN FindThreshold
%ifdef FindThreshold
byte %'ModuleName'%.%FindThreshold(word *threshold);
%define! Parthreshold
%define! RetVal
%include Common\LEDSensorFindThreshold.Inc

%endif %- FindThreshold
%-BW_METHOD_END FindThreshold
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetThreshold
%ifdef SetThreshold
void %'ModuleName'%.%SetThreshold(word value);
%define! Parvalue
%include Common\LEDSensorSetThreshold.Inc

%endif %- SetThreshold
%-BW_METHOD_END SetThreshold
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateThreshold
%ifdef CalibrateThreshold
byte %'ModuleName'%.%CalibrateThreshold(bool forAmbient);
%define! ParforAmbient
%define! RetVal
%include Common\LEDSensorCalibrateThreshold.Inc

%endif %- CalibrateThreshold
%-BW_METHOD_END CalibrateThreshold
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%'ModuleName'_SensorValType %'ModuleName'%.%GetVal(void);
%define! RetVal
%include Common\LEDSensorGetVal.Inc

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLightVal
%ifdef GetLightVal
%'ModuleName'_SensorValType %'ModuleName'%.%GetLightVal(word time);
%define! Partime
%define! RetVal
%include Common\LEDSensorGetLightVal.Inc

%endif %- GetLightVal
%-BW_METHOD_END GetLightVal
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\LEDSensorSettings.Inc
%define! Abstract Common\LEDSensorAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%if defined(SetThreshold) %- use variable threshold values
word %'ModuleName'%.Threshold_us = %ThresholdUs; /* the threshold time in us at which time we can decide if we have a light or not */
static word rxThreshold = %RxThreshold;
static word ambientThreshold = %AmbientThreshold;
%endif

#define DEBUG  0  /* data collection debugging */

#if DEBUG
static byte dbgLightSeen[128];
static word dbgLightSeenIdx = 0;
#endif

%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-BW_METHOD_BEGIN On
%ifdef On
%include Common\LEDSensorOn.Inc
%if defined(INLINE_ME)
/* This method is implemented as macro in the header file */
%else
void %'ModuleName'%.%On(void)
{
  %@RevBiasLED@'ModuleName'%.On();
}
%endif /* INLINE_ME */

%endif %- On
%-BW_METHOD_END On
%-BW_METHOD_BEGIN Off
%ifdef Off
%include Common\LEDSensorOff.Inc
%if defined(INLINE_ME)
/* This method is implemented as macro in the header file */
%else
void %'ModuleName'%.%Off(void)
{
  %@RevBiasLED@'ModuleName'%.Off();
}
%endif

%endif %- Off
%-BW_METHOD_END Off
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%define! RetVal
%include Common\LEDSensorGetVal.Inc
%'ModuleName'_SensorValType %'ModuleName'%.%GetVal(void)
{
  %'ModuleName'_SensorValType val;
  %'ModuleName'%.PortStatus status;

  %@RevBiasLED@'ModuleName'%.StartSafeReverseBias(&status);
  %@Wait@'ModuleName'%.Waitus(%'ModuleName'%.Threshold_us);      %>40/* lower value means more light is needed to get discharge to zero */
  val = %@RevBiasLED@'ModuleName'%.GetCathodeVal();
  %@RevBiasLED@'ModuleName'%.StopSafeReverseBias(&status);
#if DEBUG
  dbgLightSeen[dbgLightSeenIdx] = (byte)!val;
  dbgLightSeenIdx++;
  if (dbgLightSeenIdx == sizeof(dbgLightSeen)) {                 %>40/* circular buffer */
    dbgLightSeenIdx = 0;
  }
#endif
  return val;
}

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLightVal
%ifdef GetLightVal
%define! Partime
%define! RetVal
%include Common\LEDSensorGetLightVal.Inc
%'ModuleName'_SensorValType %'ModuleName'%.%GetLightVal(word time)
{
  %'ModuleName'_SensorValType val;
  %'ModuleName'%.PortStatus status;

  %@RevBiasLED@'ModuleName'%.StartSafeReverseBias(&status);
  %@Wait@'ModuleName'%.Waitus(time);                             %>40/* lower value means more light is needed to get discharge to zero */
  val = %@RevBiasLED@'ModuleName'%.GetCathodeVal();
  %@RevBiasLED@'ModuleName'%.StopSafeReverseBias(&status);
  return val;
}

%endif %- GetLightVal
%-BW_METHOD_END GetLightVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN FindThreshold
%ifdef FindThreshold
%define! Parthreshold
%define! RetVal
%include Common\LEDSensorFindThreshold.Inc
byte %'ModuleName'%.%FindThreshold(word *threshold)
{
  %@RevBiasLED@'ModuleName'%.SensorValType val;
  word t;
  byte res = ERR_OK;
  %'ModuleName'%.PortStatus status;

  %@RevBiasLED@'ModuleName'%.StartSafeReverseBias(&status);
  for(t=1;/*breaks*/;t++) {                                      %>40/* Measure number of us it takes to get to low level (discharge) */
    if (t==0xffff) {                                             %>40/* timeout! */
     *threshold = 0;
      res = ERR_NOTAVAIL;
      break;
    }
    %@Wait@'ModuleName'%.Waitus(%'ModuleName'%.THRESHOLD_STEP_US);%>40/* wait for some time */
    val = %@RevBiasLED@'ModuleName'%.GetCathodeVal();
    if (val == 0) {                                              %>40/* yes, seen the light! */
      *threshold = t;
      res = ERR_OK;
      break;
    }
  }
  %@RevBiasLED@'ModuleName'%.StopSafeReverseBias(&status);
  return res;
}

%endif %- FindThreshold
%-BW_METHOD_END FindThreshold
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetThreshold
%ifdef SetThreshold
%define! Parvalue
%include Common\LEDSensorSetThreshold.Inc
void %'ModuleName'%.%SetThreshold(word value)
{
  %'ModuleName'%.Threshold_us = value;
}

%endif %- SetThreshold
%-BW_METHOD_END SetThreshold
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateThreshold
%ifdef CalibrateThreshold
%define! ParforAmbient
%define! RetVal
%include Common\LEDSensorCalibrateThreshold.Inc
byte %'ModuleName'%.%CalibrateThreshold(bool forAmbient)
{
  word buf[%NofCalibrationSamples];
  byte i;
  byte res = ERR_OK;
  dword val;

  for(i=0;i<sizeof(buf)/sizeof(buf[0]);i++) { /* collect samples */
    res |= %'ModuleName'%.%FindThreshold(&buf[i]);
  }
  if (res != ERR_OK) {                                           %>40/* error happend during sampling */
    return ERR_NOTAVAIL;
  }
  /* everything ok. Calculate now the average threshold value */
  val = 0;
  for(i=0;i<sizeof(buf)/sizeof(buf[0]);i++) {                    %>40/* collect samples */
    val += buf[i];
  }
  val /= sizeof(buf)/sizeof(buf[0]);                             %>40/* average: this is our ambient light level */
  if (val <= %RxThreshold) {                                     %>40/* hmm, our light level is lower than the level of the Rx one? */
    return ERR_NOTAVAIL;
  }
  if (forAmbient && val > rxThreshold) {
    ambientThreshold = (word)val;
    %'ModuleName'%.%SetThreshold((word)(rxThreshold + (val-rxThreshold)/10));%>40/* set threshold 10%% above rx threshold */
    rxThreshold = (word)(rxThreshold - (val-rxThreshold)/10);    %>40/* assume rx threshold 10%% below */
    return ERR_OK;
  } else if (!forAmbient && val < ambientThreshold) {
    rxThreshold = (word)val;
    %'ModuleName'%.%SetThreshold((word)(rxThreshold + (ambientThreshold-val)/10));%>40/* set threshold 10%% above rx threshold */
    return ERR_OK;
  }
  return ERR_NOTAVAIL;
}

%endif %- CalibrateThreshold
%-BW_METHOD_END CalibrateThreshold
%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Erich Styger
%define DriverVersion 01.00
%define DriverDate    15.01.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_LoadData Function to transfer data to the display.
%define! Description_RefreshRows Function to send parameter for up-dating the display screen with the data. The data are in the driver.
%define! Description_OpenWindow Opens a window inside the display we want to write to.
%define! Description_CloseWindow Closes a window previously opened with OpenWindow().
%define! Description_NextWindowPixel Moves to the next pixel in the window
%define! Description_WritePixel Writes a pixel to the display, within the previously opened window
%define! Description_FillWindow Fills the window with a color
%define! Description_Init Initializes the display driver
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\ChLCDSettings.Inc
%define! Abstract Common\ChLCDAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

#define %'ModuleName'%.DISPLAY_HW_NOF_COLUMNS  %'Width'u         %>40/* number of columns in hardware */
#define %'ModuleName'%.DISPLAY_HW_NOF_ROWS     %'Height'u        %>40/* number of rows in hardware */

typedef bool %'ModuleName'%.PixelColor;                          %>40/* one bit is enough to describe the color as we have a monochrome display */
typedef byte %'ModuleName'%.PixelDim;                            %>40/* one byte is enough to describe an x/y position */

#define %'ModuleName'%.PIXEL_WHITE  1                            %>40/* 1 is a white pixel */
#define %'ModuleName'%.PIXEL_BLUE   0                            %>40/* 0 is a blue pixel */
#define %'ModuleName'%.COLOR_PIXEL_SET      %'ModuleName'%.PIXEL_WHITE%>40/* color for a pixel set */
#define %'ModuleName'%.COLOR_PIXEL_CLR      %'ModuleName'%.PIXEL_BLUE%>40/* color for a pixel cleared */
%if DisplayInvert='yes'
#define %'ModuleName'%.COLOR_BLACK          %'ModuleName'%.PIXEL_WHITE
#define %'ModuleName'%.COLOR_WHITE          %'ModuleName'%.PIXEL_BLUE
%else
#define %'ModuleName'%.COLOR_BLACK          %'ModuleName'%.PIXEL_BLUE
#define %'ModuleName'%.COLOR_WHITE          %'ModuleName'%.PIXEL_WHITE
%endif
#define %'ModuleName'%.COLOR_RED            %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_RED     %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_RED       %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_GREEN          %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_GREEN   %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_GREEN     %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BLUE           %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_BLUE    %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_BLUE      %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_YELLOW         %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_YELLOW  %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_ORANGE         %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_GREY           %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_GREY    %'ModuleName'%.COLOR_WHITE

/* different clear types for %'ModuleName'%.BlankDisplay(): */
#define %'ModuleName'_CLR_DISP_BRT      0x10 /* clear display bright */
#define %'ModuleName'_CLR_DISP_BRT_IB   0x11 /* clear display bright, inverted border */
#define %'ModuleName'_CLR_DISP_DRK      0x12 /* clear display dark */
#define %'ModuleName'_CLR_DISP_DRK_IB   0x13 /* clear display dark, inverted border */

/* different clear types for %'ModuleName'%.BlankDisplayRows(): */
#define %'ModuleName'_CLR_SECT_BRT      0x14 /* clear section bright */
#define %'ModuleName'_CLR_SECT_BRT_IB   0x15 /* clear section bright, inverted border */
#define %'ModuleName'_CLR_SECT_DRK      0x16 /* clear section dark */
#define %'ModuleName'_CLR_SECT_DRK_IB   0x17 /* clear section dark, inverted border */

typedef enum {
  %'ModuleName'%.ORIENTATION_PORTRAIT    = 0,
  %'ModuleName'%.ORIENTATION_PORTRAIT180 = 1,
  %'ModuleName'%.ORIENTATION_LANDSCAPE   = 2,
  %'ModuleName'%.ORIENTATION_LANDSCAPE180= 3
} %'ModuleName'%.DisplayOrientation;

#define %'ModuleName'%.HW_WIDTH         %'Width'u                %>40/* width of display in pixels */
#define %'ModuleName'%.HW_HEIGHT        %'Height'u               %>40/* height of display in pixels */

%if %Height <. %Width
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Height'u               %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Width'u                %>40/* size of longer display side in pixels */
%else
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Width'u                %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Height'u               %>40/* size of longer display side in pixels */
%endif

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_PixelCount
#define __BWUserType_%'ModuleName'_PixelCount
  typedef word %'ModuleName'_PixelCount ;                        %>40/* A word is enough to count all pixels of the display. */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN ElectronicErase
%ifdef ElectronicErase
void %'ModuleName'%.%ElectronicErase(void);
%include Common\ChLCDElectronicErase.Inc

%endif %- ElectronicErase
%-BW_METHOD_END ElectronicErase
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
void %'ModuleName'%.%UpdateFull(void);
%include Common\ChLCDUpdateFull.Inc

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h);
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\ChLCDUpdateRegion.Inc

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Init
void %'ModuleName'%.Init(void);
%include Common\GeneralInternal.inc (Init)

%-INTERNAL_METHOD_END Init
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG OpenWindow
void %'ModuleName'%.OpenWindow(%'ModuleName'_PixelDim x0, %'ModuleName'_PixelDim y0, %'ModuleName'_PixelDim x1, %'ModuleName'_PixelDim y1);
%define! Parx0
%define! Pary0
%define! Parx1
%define! Pary1
%include Common\GeneralInternal.inc (OpenWindow)

%-INTERNAL_METHOD_END OpenWindow
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG CloseWindow
void %'ModuleName'%.CloseWindow(void);
%include Common\GeneralInternal.inc (CloseWindow)

%-INTERNAL_METHOD_END CloseWindow
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG WritePixel
void %'ModuleName'%.WritePixel(%'ModuleName'_PixelColor color);
%define! Parcolor
%include Common\GeneralInternal.inc (WritePixel)

%-INTERNAL_METHOD_END WritePixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
void %'ModuleName'%.%Clear(void);
%include Common\ChLCDClear.Inc

%endif %- Clear
%-BW_METHOD_END Clear
%-************************************************************************************************************
%-BW_METHOD_BEGIN FillMemory
%ifdef FillMemory
void %'ModuleName'%.%FillMemory(%'ModuleName'_PixelCount startAddr, %'ModuleName'_PixelCount endAddr, byte pattern);
%define! ParstartAddr
%define! ParendAddr
%define! Parpattern
%include Common\ChLCDFillMemory.Inc

%endif %- FillMemory
%-BW_METHOD_END FillMemory
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG FillWindow
void %'ModuleName'%.FillWindow(%'ModuleName'_PixelColor color);
%define! Parcolor
%include Common\GeneralInternal.inc (FillWindow)

%-INTERNAL_METHOD_END FillWindow
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetBits
%ifdef SetBits
void %'ModuleName'%.%SetBits(%'ModuleName'_PixelCount addr, byte mask);
%define! Paraddr
%define! Parmask
%include Common\ChLCDSetBits.Inc

%endif %- SetBits
%-BW_METHOD_END SetBits
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearBits
%ifdef ClearBits
void %'ModuleName'%.%ClearBits(%'ModuleName'_PixelCount addr, byte mask);
%define! Paraddr
%define! Parmask
%include Common\ChLCDClearBits.Inc

%endif %- ClearBits
%-BW_METHOD_END ClearBits
%-************************************************************************************************************
%-BW_METHOD_BEGIN XorBits
%ifdef XorBits
void %'ModuleName'%.%XorBits(%'ModuleName'_PixelCount addr, byte mask);
%define! Paraddr
%define! Parmask
%include Common\ChLCDXorBits.Inc

%endif %- XorBits
%-BW_METHOD_END XorBits
%-************************************************************************************************************
%-BW_METHOD_BEGIN DrawFilledBox
%ifdef DrawFilledBox
void %'ModuleName'%.%DrawFilledBox(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h, %'ModuleName'_PixelColor color);
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%define! Parcolor
%include Common\ChLCDDrawFilledBox.Inc

%endif %- DrawFilledBox
%-BW_METHOD_END DrawFilledBox
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetPixel
%ifdef SetPixel
void %'ModuleName'%.%SetPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y);
%define! Parx
%define! Pary
%include Common\ChLCDSetPixel.Inc

%endif %- SetPixel
%-BW_METHOD_END SetPixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClrPixel
%ifdef ClrPixel
void %'ModuleName'%.%ClrPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y);
%define! Parx
%define! Pary
%include Common\ChLCDClrPixel.Inc

%endif %- ClrPixel
%-BW_METHOD_END ClrPixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegPixel
%ifdef NegPixel
void %'ModuleName'%.%NegPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y);
%define! Parx
%define! Pary
%include Common\ChLCDNegPixel.Inc

%endif %- NegPixel
%-BW_METHOD_END NegPixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetPixel
%ifdef GetPixel
%'ModuleName'_PixelColor %'ModuleName'%.%GetPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y);
%define! Parx
%define! Pary
%define! RetVal
%include Common\ChLCDGetPixel.Inc

%endif %- GetPixel
%-BW_METHOD_END GetPixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN ResetController
%ifdef ResetController
void %'ModuleName'%.%ResetController(void);
%include Common\ChLCDResetController.Inc

%endif %- ResetController
%-BW_METHOD_END ResetController
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadMem
%ifdef ReadMem
byte %'ModuleName'%.%ReadMem(%'ModuleName'_PixelCount addr);
%define! Paraddr
%define! RetVal
%include Common\ChLCDReadMem.Inc

%endif %- ReadMem
%-BW_METHOD_END ReadMem
%-************************************************************************************************************
%-BW_METHOD_BEGIN SleepController
%ifdef SleepController
void %'ModuleName'%.%SleepController(void);
%include Common\ChLCDSleepController.Inc

%endif %- SleepController
%-BW_METHOD_END SleepController
%-************************************************************************************************************
%-BW_METHOD_BEGIN BlankDisplay
%ifdef BlankDisplay
void %'ModuleName'%.%BlankDisplay(byte blankType);
%define! ParblankType
%include Common\ChLCDBlankDisplay.Inc

%endif %- BlankDisplay
%-BW_METHOD_END BlankDisplay
%-************************************************************************************************************
%-BW_METHOD_BEGIN BlankDisplayRows
%ifdef BlankDisplayRows
void %'ModuleName'%.%BlankDisplayRows(byte blankType, %'ModuleName'_PixelDim firstRow, %'ModuleName'_PixelDim lastRow);
%define! ParblankType
%define! ParfirstRow
%define! ParlastRow
%include Common\ChLCDBlankDisplayRows.Inc

%endif %- BlankDisplayRows
%-BW_METHOD_END BlankDisplayRows
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetContrast
%ifdef SetContrast
void %'ModuleName'%.%SetContrast(signed char contrast);
%define! Parcontrast
%include Common\ChLCDSetContrast.Inc

%endif %- SetContrast
%-BW_METHOD_END SetContrast
%-************************************************************************************************************
%-BW_METHOD_BEGIN PowerDown
%ifdef PowerDown
void %'ModuleName'%.%PowerDown(void);
%include Common\ChLCDPowerDown.Inc

%endif %- PowerDown
%-BW_METHOD_END PowerDown
%-************************************************************************************************************
%-BW_METHOD_BEGIN PowerUp
%ifdef PowerUp
void %'ModuleName'%.%PowerUp(void);
%include Common\ChLCDPowerUp.Inc

%endif %- PowerUp
%-BW_METHOD_END PowerUp
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void);
%define! RetVal
%include Common\ChLCDGetDisplayOrientation.Inc

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation);
%define! ParnewOrientation
%include Common\ChLCDSetDisplayOrientation.Inc

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
#define %'ModuleName'%.%GetWidth() \
  %'ModuleName'%.HW_WIDTH

%define! RetVal
%include Common\ChLCDGetWidth.Inc

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
#define %'ModuleName'%.%GetHeight() \
  %'ModuleName'%.HW_HEIGHT

%define! RetVal
%include Common\ChLCDGetHeight.Inc

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
#define %'ModuleName'%.%GetLongerSide() \
  %'ModuleName'%.HW_LONGER_SIDE

%define! RetVal
%include Common\ChLCDGetLongerSide.Inc

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
#define %'ModuleName'%.%GetShorterSide() \
  %'ModuleName'%.HW_SHORTER_SIDE

%define! RetVal
%include Common\ChLCDGetShorterSide.Inc

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\ChLCDSettings.Inc
%define! Abstract Common\ChLCDAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"

/* ****************************************************************************
   Copyright (c) 2008. Kent Displays, Inc. All Rights Reserved.

   Permission to use, copy, modify, and distribute this software and its
   documentation for any purpose, without fee, and without a written
   agreement, is hereby granted, provided that the above copyright notice,
   this paragraph, the following two paragraphs appear in all copies,
   modifications, and distributions and is included with a Kent Displays,
   Inc. product.

   IN NO EVENT SHALL KENT DISPLAYS, INC. BE LIABLE TO ANY PARTY FOR DIRECT,
   INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
   LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
   DOCUMENTATION, EVEN IF KENT DISPLAYS, INC. HAS BEEN ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE.

   KENT DISPLAYS, INC. SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT
   NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
   FOR A PARTICULAR PURPOSE. THE SOFTWARE AND ACCOMPANYING
   DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED "AS IS".
   KENT DISPLAYS, INC. HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,
   UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 *************************************************************************** */
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-

/* Display Commands */
#define WRITE_MEM             0x00
#define FILL_MEM              0x01
#define READ_MEM              0x04
#define CLEAR_BITS            0x08
#define SET_BITS              0x09
#define XOR_BITS              0x0A

#define DISP_FULLSCRN         0x18
#define DISP_PARTSCRN         0x19

#define SLEEP                 0x20
#define RESET                 0x24

#define SET_CONTRAST          0x27
#define ELEC_ERASE            0x2A

/* Defines for the ports */
%if %ControlVcc='yes'
#define ENA_VDISP  %@EnVcc@'ModuleName'%.SetVal()                %>40/* Enable Bias Voltage */
#define DIS_VDISP  %@EnVcc@'ModuleName'%.ClrVal()                %>40/* Disable Bias Voltage */
%else
#define ENA_VDISP                                                %>40/* do nothing as not useing the Vcc pin */
#define DIS_VDISP                                                %>40/* do nothing as not useing the Vcc pin */
%endif
#define SET_RESET  %@Reset@'ModuleName'%.ClrVal()                %>40/* Reset Display */
#define CLR_RESET  %@Reset@'ModuleName'%.SetVal()                %>40/* Clear Reset Display */
#define SET_CS     %@CS@'ModuleName'%.ClrVal()                   %>40/* Set Chip Select Display */
#define CLR_CS     %@CS@'ModuleName'%.SetVal()                   %>40/* Clear Chip Select Display */
#define DISP_BUSY (%@BusyPin@'ModuleName'%.GetVal()!=0)          %>40/* Display Busy */

#define %'ModuleName'_MAX_PART_ROW_COUNT 80                      %>40/* the display can only update a certain number of rows */

%if WindowCapability='yes'
static struct {
  %'ModuleName'_PixelDim x, y;                                   %>40/* current pixel coordinates */
  %'ModuleName'_PixelDim x0, y0;                                 %>40/* upper left corner */
  %'ModuleName'_PixelDim x1, y1;                                 %>40/* lower right corner */
  %'ModuleName'_PixelCount addr;                                 %>40/* current pixel address */
} window;
%endif

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG LoadData
static void LoadData(word index, word numBytes, byte *data);
%-INTERNAL_LOC_METHOD_END LoadData
%-INTERNAL_LOC_METHOD_BEG RefreshRows
static void RefreshRows(byte firstDataRow, byte firstImageRow, byte numRows);
%-INTERNAL_LOC_METHOD_END RefreshRows
%-INTERNAL_LOC_METHOD_BEG NextWindowPixel
static void NextWindowPixel(void);
%-INTERNAL_LOC_METHOD_END NextWindowPixel
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG LoadData
%define! Parindex
%define! Pardata
%define! ParnumBytes
%include Common\GeneralInternalGlobal.inc (LoadData)
static void LoadData(word index, word numBytes, byte *data)
{
  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(WRITE_MEM);
  (void)%@SPI@'ModuleName'%.SendChar((index>>8)&0xFF);           %>40 /* Address High Byte */
  (void)%@SPI@'ModuleName'%.SendChar(index&0xFF);                %>40 /* Address Low Byte */
  while (numBytes>0) {
  %if WatchdogEnabled='yes'
    %@Watchdog@'ModuleName'%.Clear();                            %>40/* kick the dog in order not to timeout */
  %endif
    (void)%@SPI@'ModuleName'%.SendChar(*data++);
    numBytes--;
  }
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%-INTERNAL_METHOD_END LoadData
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG RefreshRows
%define! ParfirstDataRow
%define! ParfirstImageRow
%define! ParnumRows
%include Common\GeneralInternalGlobal.inc (RefreshRows)
static void RefreshRows(byte firstDataRow, byte firstImageRow, byte numRows)
{
  (void)firstDataRow;
  (void)firstImageRow;
  (void)numRows;
%if %ControlVcc='yes'
//  DISABLE_VCC();                                               %>40/* Power down display/driver. */
%endif
}

%-INTERNAL_METHOD_END RefreshRows
%-************************************************************************************************************
%-BW_METHOD_BEGIN ElectronicErase
%ifdef ElectronicErase
%include Common\ChLCDElectronicErase.Inc
void %'ModuleName'%.%ElectronicErase(void)
{
  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(ELEC_ERASE);
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%endif %- ElectronicErase
%-BW_METHOD_END ElectronicErase
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
%include Common\ChLCDUpdateFull.Inc
void %'ModuleName'%.%UpdateFull(void)
{
  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(DISP_FULLSCRN);
  (void)%@SPI@'ModuleName'%.SendChar(0);                         %>40 /* Address High Byte */
  (void)%@SPI@'ModuleName'%.SendChar(0);                         %>40 /* Address Low Byte */
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\ChLCDUpdateRegion.Inc
#pragma MESSAGE DISABLE C5900 /* result is zero */
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h)
{
  %'ModuleName'_PixelCount address;
  %'ModuleName'_PixelDim firstRow, lastRow, nofRows;

  (void)w; (void)x;                                              %>40/* unused arguments */
  while(h>0) {
  %if WatchdogEnabled='yes'
    %@Watchdog@'ModuleName'%.Clear();                            %>40/* kick the dog in order not to timeout */
  %endif
    if (h>%'ModuleName'_MAX_PART_ROW_COUNT) {                    %>40/* the display only permits a max of 80 rows to be updated partially */
      nofRows = %'ModuleName'_MAX_PART_ROW_COUNT;
    } else {
      nofRows = h;
    }
    address = (%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS/8)*y;
    firstRow = y;
    lastRow = y+nofRows-1;
    while(DISP_BUSY);
    SET_CS;
    (void)%@SPI@'ModuleName'%.SendChar(DISP_PARTSCRN);
    (void)%@SPI@'ModuleName'%.SendChar((address>>8)&0xFF);       %>40/* Address High Byte */
    (void)%@SPI@'ModuleName'%.SendChar(address&0xFF);            %>40/* Address Low Byte */
    (void)%@SPI@'ModuleName'%.SendChar((firstRow>>8)&0xFF);      %>40/* Start Row High Byte */
    (void)%@SPI@'ModuleName'%.SendChar(firstRow&0xFF);           %>40/* Start Row Low Byte */
    (void)%@SPI@'ModuleName'%.SendChar((lastRow>>8)&0xFF);       %>40/* End Row High Byte */
    (void)%@SPI@'ModuleName'%.SendChar(lastRow&0xFF);            %>40/* End Row Low Byte */
    CLR_CS;
    h -= nofRows;
    y += nofRows;
  }
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}
#pragma MESSAGE DEFAULT C5900 /* result is zero */

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Init
%include Common\GeneralInternal.inc (Init)
void %'ModuleName'%.Init(void)
{
  CLR_CS;                                                        %>40/* CS line is high at beginning (active low) */
  SET_RESET;
  ENA_VDISP;
  CLR_RESET;
  %@Wait@'ModuleName'%.Waitus(800);
  while(DISP_BUSY);
%if ClearDisplayOnInit='yes'
  %'ModuleName'%.%Clear();
%endif
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%-INTERNAL_METHOD_END Init
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG OpenWindow
%if WindowCapability='yes'
%define! Parx0
%define! Pary0
%define! Parx1
%define! Pary1
%include Common\GeneralInternal.inc (OpenWindow)
void %'ModuleName'%.OpenWindow(%'ModuleName'_PixelDim x0, %'ModuleName'_PixelDim y0, %'ModuleName'_PixelDim x1, %'ModuleName'_PixelDim y1)
{
  window.x0 = x0;
  window.y0 = y0;
  window.x1 = x1;
  window.y1 = y1;
  window.x = x0;
  window.y = y0;
  window.addr = (%'ModuleName'_PixelCount)((%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS*y0 + x0)/8);
}
%endif

%-INTERNAL_METHOD_END OpenWindow
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG CloseWindow
%if WindowCapability='yes'
%include Common\GeneralInternal.inc (CloseWindow)
void %'ModuleName'%.CloseWindow(void)
{
  %'ModuleName'%.%UpdateRegion(0, window.y0, %'ModuleName'%.DISPLAY_HW_NOF_COLUMNS, window.y1-window.y0+1);
}
%endif

%-INTERNAL_METHOD_END CloseWindow
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG NextWindowPixel
%if WindowCapability='yes'
%include Common\GeneralInternalGlobal.inc (NextWindowPixel)
static void NextWindowPixel(void)
{
  window.x++;
  if (window.x > window.x1) {                                    %>40/* new row */
    window.x = window.x0;
    window.y++;
    if (window.y > window.y1) {                                  %>40/* hmm, not good */
      window.y = window.y1;
    }
    window.addr = (%'ModuleName'_PixelCount)((%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS*window.y + window.x)/8);
  } else if ((window.x&7)==0) {                                  %>40/* new byte */
    window.addr++;
  }
}
%endif

%-INTERNAL_METHOD_END NextWindowPixel
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG WritePixel
%if WindowCapability='yes'
%define! Parcolor
%include Common\GeneralInternal.inc (WritePixel)
void %'ModuleName'%.WritePixel(%'ModuleName'_PixelColor color)
{
  byte mask;

  mask = 1<<(7-(window.x&7));
  if (color==%'ModuleName'%.COLOR_BLUE) {
    %'ModuleName'%.SetBits(window.addr, mask);
  } else {
    %'ModuleName'%.ClearBits(window.addr, mask);
  }
  NextWindowPixel();
}
%endif

%-INTERNAL_METHOD_END WritePixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
%include Common\ChLCDClear.Inc
void %'ModuleName'%.%Clear(void)
{
  %'ModuleName'%.%FillMemory(
    0,
    ((%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS/8)*%'ModuleName'%.DISPLAY_HW_NOF_ROWS)-1,
%if DisplayInvert='yes'
    0x00 /* 0xff are white pixels. 0x00 would be blue pixels */
%else
    0xff /* 0xff are white pixels. 0x00 would be blue pixels */
%endif
    );
}

%endif %- Clear
%-BW_METHOD_END Clear
%-************************************************************************************************************
%-BW_METHOD_BEGIN FillMemory
%ifdef FillMemory
%define! ParstartAddr
%define! ParendAddr
%define! Parpattern
%include Common\ChLCDFillMemory.Inc
void %'ModuleName'%.%FillMemory(%'ModuleName'_PixelCount startAddr, %'ModuleName'_PixelCount endAddr, byte pattern)
{
  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(FILL_MEM);
  (void)%@SPI@'ModuleName'%.SendChar((startAddr>>8)&0xFF);       %>40 /* Start Address High Byte */
  (void)%@SPI@'ModuleName'%.SendChar(startAddr&0xFF);            %>40 /* Start Address Low Byte */
  (void)%@SPI@'ModuleName'%.SendChar((endAddr>>8)&0xFF);         %>40 /* End Address High Byte */
  (void)%@SPI@'ModuleName'%.SendChar(endAddr&0xFF);              %>40 /* End Address Low Byte */
  (void)%@SPI@'ModuleName'%.SendChar(pattern);
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%endif %- FillMemory
%-BW_METHOD_END FillMemory
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG FillWindow
%if WindowCapability='yes'
%define! Parcolor
%include Common\GeneralInternal.inc (FillWindow)
void %'ModuleName'%.FillWindow(%'ModuleName'_PixelColor color)
{
  %'ModuleName'%.DrawFilledBox(window.x0, window.y0, window.x1-window.x0+1, window.y1-window.y0+1, color);
}
%endif

%-INTERNAL_METHOD_END FillWindow
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetBits
%ifdef SetBits
%define! Paraddr
%define! Parmask
%include Common\ChLCDSetBits.Inc
void %'ModuleName'%.%SetBits(%'ModuleName'_PixelCount addr, byte mask)
{
  while(DISP_BUSY);
  SET_CS;
%if DisplayInvert='yes'
  (void)%@SPI@'ModuleName'%.SendChar(CLEAR_BITS);
%else
  (void)%@SPI@'ModuleName'%.SendChar(SET_BITS);
%endif
  (void)%@SPI@'ModuleName'%.SendChar((addr>>8)&0xFF);            %>40/* Start Address High Byte */
  (void)%@SPI@'ModuleName'%.SendChar(addr&0xFF);                 %>40/* Start Address Low Byte */
  (void)%@SPI@'ModuleName'%.SendChar(mask);                      %>40/* build the mask of the bit (MSB) */
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%endif %- SetBits
%-BW_METHOD_END SetBits
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearBits
%ifdef ClearBits
%define! Paraddr
%define! Parmask
%include Common\ChLCDClearBits.Inc
void %'ModuleName'%.%ClearBits(%'ModuleName'_PixelCount addr, byte mask)
{
  while(DISP_BUSY);
  SET_CS;
%if DisplayInvert='yes'
  (void)%@SPI@'ModuleName'%.SendChar(SET_BITS);
%else
  (void)%@SPI@'ModuleName'%.SendChar(CLEAR_BITS);
%endif
  (void)%@SPI@'ModuleName'%.SendChar((addr>>8)&0xFF);            %>40/* Start Address High Byte */
  (void)%@SPI@'ModuleName'%.SendChar(addr&0xFF);                 %>40/* Start Address Low Byte */
  (void)%@SPI@'ModuleName'%.SendChar(mask);                      %>40/* build the mask of the bit (MSB) */
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%endif %- ClearBits
%-BW_METHOD_END ClearBits
%-************************************************************************************************************
%-BW_METHOD_BEGIN XorBits
%ifdef XorBits
%define! Paraddr
%define! Parmask
%include Common\ChLCDXorBits.Inc
void %'ModuleName'%.%XorBits(%'ModuleName'_PixelCount addr, byte mask)
{
  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(XOR_BITS);
  (void)%@SPI@'ModuleName'%.SendChar((addr>>8)&0xFF);            %>40/* Start Address High Byte */
  (void)%@SPI@'ModuleName'%.SendChar(addr&0xFF);                 %>40/* Start Address Low Byte */
  (void)%@SPI@'ModuleName'%.SendChar(mask);                      %>40/* build the mask of the bit (MSB) */
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%endif %- XorBits
%-BW_METHOD_END XorBits
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadMem
%ifdef ReadMem
%define! Paraddr
%define! RetVal
%include Common\ChLCDReadMem.Inc
byte %'ModuleName'%.%ReadMem(%'ModuleName'_PixelCount addr)
{
  byte val;

  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(READ_MEM);
  (void)%@SPI@'ModuleName'%.SendChar((addr>>8)&0xFF);            %>40/* Start Address High Byte */
  (void)%@SPI@'ModuleName'%.SendChar(addr&0xFF);                 %>40/* Start Address Low Byte */
  (void)%@SPI@'ModuleName'%.RecvChar(&val);                      %>40/* arg3 is a dummy read */
  (void)%@SPI@'ModuleName'%.RecvChar(&val);                      %>40/* arg4 is a dummy read */
  (void)%@SPI@'ModuleName'%.RecvChar(&val);                      %>40/* arg5 is now the result */
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
  return val;
}

%endif %- ReadMem
%-BW_METHOD_END ReadMem
%-************************************************************************************************************
%-BW_METHOD_BEGIN DrawFilledBox
%ifdef DrawFilledBox
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%define! Parcolor
%include Common\ChLCDDrawFilledBox.Inc
void %'ModuleName'%.%DrawFilledBox(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h, %'ModuleName'_PixelColor color)
{
  %'ModuleName'_PixelCount lineStartAddr, lineEndAddr;
  byte pattern, begMask=0, endMask=0;
  bool hasBegMask, hasEndMask, hasMiddle;
  %'ModuleName'_PixelDim x1, y1;

  x1 = (%'ModuleName'_PixelDim)(x+w-1);
  y1 = (%'ModuleName'_PixelDim)(y+h-1);
  if (color==%'ModuleName'%.COLOR_BLUE) {
%if DisplayInvert='yes'
    pattern = 0x00;
%else
    pattern = 0xff;
%endif
  } else {
%if DisplayInvert='yes'
    pattern = 0xff;
%else
    pattern = 0x00;
%endif
  }
  hasBegMask = (x&7)!=0;                                         %>40/* have a mask if we do not start at byte boundary (MSB) */
  if (hasBegMask) {                                              %>40/* partial pattern at the beginning */
    begMask = (byte)(0xffu>>(x&7));
  }
  hasEndMask = (x1&7)!=7;                                        %>40/* have a mask if we do not end at byte boundary (LSB) */
  if (hasEndMask) {                                              %>40/* partial pattern at the end */
    endMask = (byte)(0xffu<<(7-(x1&7)));
  }
  lineStartAddr = (%'ModuleName'_PixelCount)((%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS*y + x)/8);
  lineEndAddr = (y*%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS+x1)/8;
  if (hasBegMask) {
    lineStartAddr++;                                             %>40/* adjust for middle part */
  }
  if (hasEndMask) {
    if (lineEndAddr == 0) {                                      %>40/* we are in row 0: change to begMask */
      if (!hasBegMask) {
        begMask = endMask;
        hasBegMask = TRUE;
        lineStartAddr++;
      } else {
        begMask &= endMask;
      }
      hasEndMask = FALSE;
    } else {
      lineEndAddr--;                                             %>40/* adjust for middle part */
    }
  }
  hasMiddle = lineEndAddr>=lineStartAddr;
  if (lineStartAddr == lineEndAddr+2) {                          %>40/* no middle, and start and end mask: merge */
    begMask &= endMask;
    hasEndMask = FALSE;
  }
  while (h>0) {
    if (hasBegMask) {
      if (color==%'ModuleName'%.COLOR_BLUE) {
        %'ModuleName'%.%SetBits(lineStartAddr-1, begMask);
      } else {
        %'ModuleName'%.%ClearBits(lineStartAddr-1, begMask);
      }
    }
    if (hasMiddle) {
      %'ModuleName'%.%FillMemory(lineStartAddr, lineEndAddr, pattern);
    }
    if (hasEndMask) {
      if (color==%'ModuleName'%.COLOR_BLUE) {
        %'ModuleName'%.%SetBits(lineEndAddr+1, endMask);
      } else {
        %'ModuleName'%.%ClearBits(lineEndAddr+1, endMask);
      }
    }
    lineStartAddr += %'ModuleName'%.DISPLAY_HW_NOF_COLUMNS/8;
    lineEndAddr += %'ModuleName'%.DISPLAY_HW_NOF_COLUMNS/8;
    h--;
  }
}

%endif %- DrawFilledBox
%-BW_METHOD_END DrawFilledBox
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetPixel
%ifdef SetPixel
%define! Parx
%define! Pary
%include Common\ChLCDSetPixel.Inc
void %'ModuleName'%.%SetPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y)
{
  byte mask;
  %'ModuleName'_PixelCount addr;

  mask = 1<<(7-(x&7));
  addr = (%'ModuleName'_PixelCount)((%'ModuleName'_DISPLAY_HW_NOF_COLUMNS*y + x)/8);
  %'ModuleName'%.SetBits(addr, mask);
}

%endif %- SetPixel
%-BW_METHOD_END SetPixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClrPixel
%ifdef ClrPixel
%define! Parx
%define! Pary
%include Common\ChLCDClrPixel.Inc
void %'ModuleName'%.%ClrPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y)
{
  byte mask;
  %'ModuleName'_PixelCount addr;

  mask = 1<<(7-(x&7));
  addr = (%'ModuleName'_PixelCount)((%'ModuleName'_DISPLAY_HW_NOF_COLUMNS*y + x)/8);
  %'ModuleName'%.ClearBits(addr, mask);
}

%endif %- ClrPixel
%-BW_METHOD_END ClrPixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegPixel
%ifdef NegPixel
%define! Parx
%define! Pary
%include Common\ChLCDNegPixel.Inc
void %'ModuleName'%.%NegPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y)
{
  byte mask;
  %'ModuleName'_PixelCount addr;

  mask = 1<<(7-(x&7));
  addr = (%'ModuleName'_PixelCount)((%'ModuleName'_DISPLAY_HW_NOF_COLUMNS*y + x)/8);
  %'ModuleName'%.XorBits(addr, mask);
}

%endif %- NegPixel
%-BW_METHOD_END NegPixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetPixel
%ifdef GetPixel
%define! Parx
%define! Pary
%define! RetVal
%include Common\ChLCDGetPixel.Inc
%'ModuleName'_PixelColor %'ModuleName'%.%GetPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y)
{
  byte mask, val;
  %'ModuleName'_PixelCount addr;

  mask = 1<<(7-(x&7));
  addr = (%'ModuleName'_PixelCount)((%'ModuleName'_DISPLAY_HW_NOF_COLUMNS*y + x)/8);
  val = %'ModuleName'%.ReadMem(addr);
  if (val&mask) {
    return 1; /* pixel set */
  } else {
    return 0; /* pixel cleared */
  }
}

%endif %- GetPixel
%-BW_METHOD_END GetPixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN ResetController
%ifdef ResetController
%include Common\ChLCDResetController.Inc
void %'ModuleName'%.%ResetController(void)
{
  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(RESET);
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%endif %- ResetController
%-BW_METHOD_END ResetController
%-************************************************************************************************************
%-BW_METHOD_BEGIN SleepController
%ifdef SleepController
%include Common\ChLCDSleepController.Inc
void %'ModuleName'%.%SleepController(void)
{
  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(SLEEP);
  CLR_CS;
}

%endif %- SleepController
%-BW_METHOD_END SleepController
%-************************************************************************************************************
%-BW_METHOD_BEGIN BlankDisplay
%ifdef BlankDisplay
%define! ParblankType
%include Common\ChLCDBlankDisplay.Inc
void %'ModuleName'%.%BlankDisplay(byte blankType)
{
  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(blankType);
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%endif %- BlankDisplay
%-BW_METHOD_END BlankDisplay
%-************************************************************************************************************
%-BW_METHOD_BEGIN BlankDisplayRows
%ifdef BlankDisplayRows
%define! ParblankType
%define! ParfirstRow
%define! ParlastRow
%include Common\ChLCDBlankDisplayRows.Inc
#pragma MESSAGE DISABLE C5900 /* result is zero */
void %'ModuleName'%.%BlankDisplayRows(byte blankType, %'ModuleName'_PixelDim firstRow, %'ModuleName'_PixelDim lastRow)
{
  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(blankType);
  (void)%@SPI@'ModuleName'%.SendChar((firstRow>>8)&0xFF);        %>40/* Start Row High Byte */
  (void)%@SPI@'ModuleName'%.SendChar(firstRow&0xFF);             %>40/* Start Row Low Byte */
  (void)%@SPI@'ModuleName'%.SendChar((lastRow>>8)&0xFF);         %>40/* End Row High Byte */
  (void)%@SPI@'ModuleName'%.SendChar(lastRow&0xFF);              %>40/* End Row Low Byte */
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}
#pragma MESSAGE DEFAULT C5900 /* result is zero */

%endif %- BlankDisplayRows
%-BW_METHOD_END BlankDisplayRows
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetContrast
%ifdef SetContrast
%define! Parcontrast
%include Common\ChLCDSetContrast.Inc
void %'ModuleName'%.%SetContrast(signed char contrast)
{
  while(DISP_BUSY);
  SET_CS;
  (void)%@SPI@'ModuleName'%.SendChar(SET_CONTRAST);
  (void)%@SPI@'ModuleName'%.SendChar(contrast);
  CLR_CS;
%if SleepDisplay='yes'
  %'ModuleName'%.%SleepController();
%endif
}

%endif %- SetContrast
%-BW_METHOD_END SetContrast
%-************************************************************************************************************
%-BW_METHOD_BEGIN PowerDown
%ifdef PowerDown
%include Common\ChLCDPowerDown.Inc
void %'ModuleName'%.%PowerDown(void)
{
  /* set pins to low level, otherwise display may draw current from them */
  %@Reset@'ModuleName'%.ClrVal();                                %>40/* reset line to ground */
  %@CS@'ModuleName'%.ClrVal();                                   %>40/* Chip Select to ground */
  DIS_VDISP;                                                     %>40/* cut of power to display */
}

%endif %- PowerDown
%-BW_METHOD_END PowerDown
%-************************************************************************************************************
%-BW_METHOD_BEGIN PowerUp
%ifdef PowerUp
%include Common\ChLCDPowerUp.Inc
void %'ModuleName'%.%PowerUp(void)
{
  ENA_VDISP;                                                     %>40/* enable power to display */
  %'ModuleName'%.Init();
}

%endif %- PowerUp
%-BW_METHOD_END PowerUp
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%define! RetVal
%include Common\ChLCDGetDisplayOrientation.Inc
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void)
{
  return %'ModuleName'%.ORIENTATION_LANDSCAPE;                   %>40/* Landscape mode */
}

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
%define! ParnewOrientation
%include Common\ChLCDSetDisplayOrientation.Inc
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation)
{
  (void)newOrientation; /* setting the display orientation is not implemented yet */
}

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
%define! RetVal
%include Common\ChLCDGetWidth.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetWidth(void)
{
  /* implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
%define! RetVal
%include Common\ChLCDGetHeight.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetHeight(void)
{
  /* implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
%define! RetVal
%include Common\ChLCDGetLongerSide.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetLongerSide(void)
{
  /* implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
%define! RetVal
%include Common\ChLCDGetShorterSide.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetShorterSide(void)
{
  /* implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

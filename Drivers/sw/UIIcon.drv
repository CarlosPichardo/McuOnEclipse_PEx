%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Paint Paints an icon in the element
%define! Description_MsgHandler Callback used for widget events
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UIIconSettings.Inc
%define! Abstract Common\UIIconAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

typedef %@UI@'ModuleName'%.PixelColor                            %>30 %'ModuleName'%.PixelColor;     %>55/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim                              %>30 %'ModuleName'%.PixelDim;       %>55/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Element                               %>30 %'ModuleName'%.Element;        %>55/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.MsgKind                               %>30 %'ModuleName'%.MsgKind;        %>55/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Pvoid                                 %>30 %'ModuleName'%.Pvoid;          %>55/* Alias to Pvoid data type */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES
%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;

typedef enum %'ModuleName'_IconType {
  %'ModuleName'_ICON_ARROW_LEFT,                                 %>40/* left arrow icon */
  %'ModuleName'_ICON_ARROW_RIGHT,                                %>40/* right arrow icon */
  %'ModuleName'_ICON_ARROW_UP,                                   %>40/* up arrow icon */
  %'ModuleName'_ICON_ARROW_DOWN,                                 %>40/* down arrow icon */
  %'ModuleName'_ICON_CLOSE                                       %>40/* X shape */
} %'ModuleName'_IconType;

/* --- Element: Icon --- */
typedef struct {
  %'ModuleName'_Element element;                                 %>40/* the base element, always first in structure */
%ifdef SetUserMsgHandler
  %@UI@'ModuleName'%.MsgHandler userMsgHandler;                  %>40/* optional user handler */
%endif %- SetUserMsgHandler
  %'ModuleName'_IconType type;                                   %>40/* defines the type of the icon */
  %'ModuleName'_PixelColor fgColor;                              %>40/* foreground color */
} %'ModuleName'_IconWidget;
%-
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateIcon
%ifdef CreateIcon
byte %'ModuleName'%.%CreateIcon(%'ModuleName'_Element *parent, %'ModuleName'_IconWidget *icon, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height, %'ModuleName'_IconType type);
%define! Paricon
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Partype
%define! Parparent
%define! RetVal
%include Common\UIIconCreateIcon.Inc

%endif %- CreateIcon
%-BW_METHOD_END CreateIcon
%-************************************************************************************************************
%-BW_METHOD_BEGIN ChangeIconFgColor
%ifdef ChangeIconFgColor
#define %'ModuleName'%.%ChangeIconFgColor(icon, newFgColor) \
  (icon)->fgColor = newFgColor
%define! Paricon
%define! ParfgColor
%include Common\UIIconChangeIconFgColor.Inc

%endif %- ChangeIconFgColor
%-BW_METHOD_END ChangeIconFgColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.MsgHandler handler);
%define! Paricon
%define! Parhandler
%include Common\UIIconSetUserMsgHandler.Inc

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UIIconSettings.Inc
%define! Abstract Common\UIIconAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG Paint
static byte Paint(%'ModuleName'_Element *element);
%-INTERNAL_LOC_METHOD_END Paint
%-INTERNAL_LOC_METHOD_BEG MsgHandler
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData);
%-INTERNAL_LOC_METHOD_END MsgHandler
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Paint
%define! Parelement
%define! RetVal
%include Common\GeneralInternalGlobal.inc (Paint)
static byte Paint(%'ModuleName'_Element *element)
{
  %'ModuleName'_PixelDim x, y, w, h;
  %'ModuleName'_IconWidget *icon = (%'ModuleName'_IconWidget *)element;
  %'ModuleName'_PixelColor fgColor, bgColor;

%if %@UI@SelectionEnabled='yes'
  if (element->prop.flags&%@UI@'ModuleName'%.FLAGS_IS_SELECTED) {
    fgColor = element->prop.color;
    bgColor = icon->fgColor;
  } else {
    bgColor = element->prop.color;
    fgColor = icon->fgColor;
  }
%else
  bgColor = element->prop.color;
  fgColor = icon->fgColor;
%endif
  x = 0;
  y = 0;
  w = element->prop.width;
  h = element->prop.height;
%if IconBox='yes'
  %@UI@'ModuleName'%.DrawBox(element, x, y, w, h, 1, fgColor);   %>40/* paint box */
  x++; y++; w -= 2; h -= 2;
%endif
  %@UI@'ModuleName'%.DrawFilledBox(element, x, y, w, h, bgColor);%>40/* fill background */
  x++; y++; w -= 2; h -= 2;
  if (icon->type == %'ModuleName'_ICON_CLOSE) {                  %>40/* paint an X */
    %@UI@'ModuleName'%.DrawLine(element, x, y, (%'ModuleName'_PixelDim)(x+w-1), (%'ModuleName'_PixelDim)(y+h-1), fgColor);
    %@UI@'ModuleName'%.DrawLine(element, x, (%'ModuleName'_PixelDim)(y+h-1), (%'ModuleName'_PixelDim)(x+w-1), y, fgColor);
  } else if (icon->type == %'ModuleName'_ICON_ARROW_LEFT) {      %>40/* paint <- */
    %@UI@'ModuleName'%.DrawHLine(element, x, (%'ModuleName'_PixelDim)(y+(h/2)), w, fgColor);
    %@UI@'ModuleName'%.DrawLine(element, x, (%'ModuleName'_PixelDim)(y+(h/2)), (%'ModuleName'_PixelDim)(x+(w/2)), y, fgColor);
    %@UI@'ModuleName'%.DrawLine(element, x, (%'ModuleName'_PixelDim)(y+(h/2)), (%'ModuleName'_PixelDim)(x+(w/2)), (%'ModuleName'_PixelDim)(y+h-1), fgColor);
  } else if (icon->type == %'ModuleName'_ICON_ARROW_RIGHT) {     %>40/* paint -> */
    %@UI@'ModuleName'%.DrawHLine(element, x, (%'ModuleName'_PixelDim)(y+(h/2)), w, fgColor);
    %@UI@'ModuleName'%.DrawLine(element, (%'ModuleName'_PixelDim)(x+(w/2)), y, (%'ModuleName'_PixelDim)(x+w-1), (%'ModuleName'_PixelDim)(y+(h/2)), fgColor);
    %@UI@'ModuleName'%.DrawLine(element, (%'ModuleName'_PixelDim)(x+(w/2)), (%'ModuleName'_PixelDim)(y+h-1), (%'ModuleName'_PixelDim)(x+w-1), (%'ModuleName'_PixelDim)(y+(h/2)), fgColor);
  } else if (icon->type == %'ModuleName'_ICON_ARROW_UP) {        %>40/* paint up arrow */
    %@UI@'ModuleName'%.DrawVLine(element, (%'ModuleName'_PixelDim)(x+(w/2)), y, h, fgColor);
    %@UI@'ModuleName'%.DrawLine(element, (%'ModuleName'_PixelDim)(x+(w/2)), y, x, (%'ModuleName'_PixelDim)(y+(h/2)), fgColor);
    %@UI@'ModuleName'%.DrawLine(element, (%'ModuleName'_PixelDim)(x+(w/2)), y, (%'ModuleName'_PixelDim)(x+w-1), (%'ModuleName'_PixelDim)(y+(h/2)), fgColor);
  } else if (icon->type == %'ModuleName'_ICON_ARROW_DOWN) {      %>40/* paint down arrow */
    %@UI@'ModuleName'%.DrawVLine(element, (%'ModuleName'_PixelDim)(x+(w/2)), y, h, fgColor);
    %@UI@'ModuleName'%.DrawLine(element, x, (%'ModuleName'_PixelDim)(y+(h/2)), (%'ModuleName'_PixelDim)(x+(w/2)), (%'ModuleName'_PixelDim)(y+h-1), fgColor);
    %@UI@'ModuleName'%.DrawLine(element, (%'ModuleName'_PixelDim)(x+(w/2)),(%'ModuleName'_PixelDim)(y+h-1), (%'ModuleName'_PixelDim)(x+w-1), (%'ModuleName'_PixelDim)(y+(h/2)), fgColor);
  }
  return ERR_OK;
}

%-INTERNAL_METHOD_END Paint
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG MsgHandler
%define! Parkind
%define! ParpData
%define! Parelement
%include Common\GeneralInternalGlobal.inc (MsgHandler)
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData)
{
  %'ModuleName'_IconWidget *widget = (%'ModuleName'_IconWidget*)element;

  if (kind==%@UI@'ModuleName'%.MSG_WIDGET_PAINT) {
    (void)Paint(element);
%-  } else if (kind==%@UI@'ModuleName'%.MSG_WIDGET_RESIZE) {
%-    (void)%'ModuleName'%.%Resize(widget);
  }
%ifdef SetUserMsgHandler
  if (widget->userMsgHandler != NULL){
    widget->userMsgHandler(kind, element, pData);                %>40/* call user event  */
  }
%else
  (void)pData; /* avoid warning about unused argument */
%endif
}

%-INTERNAL_METHOD_END MsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateIcon
%ifdef CreateIcon
%define! Paricon
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Partype
%define! Parparent
%define! RetVal
%include Common\UIIconCreateIcon.Inc
byte %'ModuleName'%.%CreateIcon(%'ModuleName'_Element *parent, %'ModuleName'_IconWidget *icon, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height, %'ModuleName'_IconType type)
{
  if (parent == NULL || icon == NULL) {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.ElementInitCommon(&icon->element, %@UI@'ModuleName'%.WIDGET_ICON,
    x, y, width, height, parent->prop.color, MsgHandler);
  icon->type = type;
  icon->fgColor = %@UI@'ModuleName'%.COLOR_BLACK;
%ifdef SetUserMsgHandler
  icon->userMsgHandler = NULL;                                   %>40/* needs to be set by user */
%endif %- SetUserMsgHandler
  if (%@UI@'ModuleName'%.AddSubElement(parent, &icon->element) != ERR_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- CreateIcon
%-BW_METHOD_END CreateIcon
%-************************************************************************************************************
%-BW_METHOD_BEGIN ChangeIconFgColor
%ifdef ChangeIconFgColor
%define! Paricon
%define! ParfgColor
%include Common\UIIconChangeIconFgColor.Inc
/*
void %'ModuleName'%.%ChangeIconFgColor(%'ModuleName'_IconWidget *icon, %'ModuleName'_PixelColor fgColor)
 ** This method is implemented as macro
*/

%endif %- ChangeIconFgColor
%-BW_METHOD_END ChangeIconFgColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
%define! Paricon
%define! Parhandler
%include Common\UIIconSetUserMsgHandler.Inc
/*
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.MsgHandler handler)
 ** This method is implemented as macro
*/

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

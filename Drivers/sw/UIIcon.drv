%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UIIconSettings.Inc
%define! Abstract Common\UIIconAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited components */
#include "%@UI@ModuleName.h"
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;

typedef enum %'ModuleName'_IconType {
  %'ModuleName'_ICON_EMPTY,                                      %>40/* empty rectangular box */
  %'ModuleName'_ICON_BOX,                                        %>40/* simple rectangular box */
  %'ModuleName'_ICON_CIRCLE,                                     %>40/* simple circle*/
  %'ModuleName'_ICON_X,                                          %>40/* X shape icon */
  %'ModuleName'_ICON_CHECKMARK,                                  %>40/* icon with a checkmark */
  %'ModuleName'_ICON_ARROW_LEFT,                                 %>40/* left arrow icon */
  %'ModuleName'_ICON_ARROW_RIGHT,                                %>40/* right arrow icon */
  %'ModuleName'_ICON_ARROW_UP,                                   %>40/* up arrow icon */
  %'ModuleName'_ICON_ARROW_DOWN,                                 %>40/* down arrow icon */
  %'ModuleName'_ICON_ARROW_LEFT_BOXED,                           %>40/* left arrow icon in a box */
  %'ModuleName'_ICON_ARROW_RIGHT_BOXED,                          %>40/* right arrow icon in a box */
  %'ModuleName'_ICON_ARROW_UP_BOXED,                             %>40/* up arrow icon in a box */
  %'ModuleName'_ICON_ARROW_DOWN_BOXED,                           %>40/* down arrow icon in a box */
  %'ModuleName'_ICON_X_BOXED,                                    %>40/* X shape icon in a box */
  %'ModuleName'_ICON_CHECKMARK_BOXED,                            %>40/* boxed icon with a checkmark */
  %'ModuleName'_ICON_CIRCLE_DOT,                                 %>40/* radio button: circle with a button */
} %'ModuleName'_IconType;

/* --- Icon Widget --- */
typedef struct {
  %@UI@'ModuleName'%.Element element;                            %>40/* the base element, always first in structure */
  %'ModuleName'_IconType type;                                   %>40/* defines the type of the icon */
  %@UI@'ModuleName'%.PixelColor fgColor;                         %>40/* foreground color */
  %@UI@'ModuleName'%.PixelColor bgColor;                         %>40/* foreground color */
  %@UI@'ModuleName'%.PixelColor insideColor;                     %>40/* inside color */
#if %'ModuleName'%.CONFIG_ICON_HAS_USER_MSG_HANDLER
  %@UI@'ModuleName'%.MsgHandler userMsgHandler;                  %>40/* optional user handler */
#endif
} %'ModuleName'_IconWidget;
%-
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
uint8_t %'ModuleName'%.%Create(%@UI@'ModuleName'%.Element *parent, %'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.PixelDim x, %@UI@'ModuleName'%.PixelDim y, %@UI@'ModuleName'%.PixelDim width, %@UI@'ModuleName'%.PixelDim height);
%define! Paricon
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parparent
%define! RetVal
%include Common\UIIconCreate.Inc

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.MsgHandler handler);
%define! Paricon
%define! Parhandler
%include Common\UIIconSetUserMsgHandler.Inc

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN MessageHandler
%ifdef MessageHandler
void %'ModuleName'%.%MessageHandler(%@UI@'ModuleName'%.Element *element, %@UI@'ModuleName'%.MsgKind kind, void *pData);
%define! Parelement
%define! Parkind
%define! ParpData
%include Common\UIIconMessageHandler.Inc

%endif %- MessageHandler
%-BW_METHOD_END MessageHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Paint
%ifdef Paint
void %'ModuleName'%.%Paint(%'ModuleName'_IconWidget *icon);
%define! Paricon
%include Common\UIIconPaint.Inc

%endif %- Paint
%-BW_METHOD_END Paint
%-************************************************************************************************************
%ifdef SetForegroundColor
void %'ModuleName'%.%SetForegroundColor(%'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.PixelColor color);
%define! Paricon
%define! Parcolor
%include Common\UIIconSetForegroundColor.Inc

%endif %- SetForegroundColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetBackgroundColor
%ifdef SetBackgroundColor
void %'ModuleName'%.%SetBackgroundColor(%'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.PixelColor color);
%define! Paricon
%define! Parcolor
%include Common\UIIconSetBackgroundColor.Inc

%endif %- SetBackgroundColor
%-BW_METHOD_END SetBackgroundColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInsideColor
%ifdef SetInsideColor
void %'ModuleName'%.%SetInsideColor(%'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.PixelColor color);
%define! Paricon
%define! Parcolor
%include Common\UIIconSetInsideColor.Inc

%endif %- SetInsideColor
%-BW_METHOD_END SetInsideColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetType
%ifdef SetType
void %'ModuleName'%.%SetType(%'ModuleName'_IconWidget *icon, %'ModuleName'_IconType type);
%define! Paricon
%define! Partype
%include Common\UIIconSetType.Inc

%endif %- SetType
%-BW_METHOD_END SetType
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UIIconSettings.Inc
%define! Abstract Common\UIIconAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M
%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Paint
%ifdef Paint
%define! Paricon
%include Common\UIIconPaint.Inc
void %'ModuleName'%.%Paint(%'ModuleName'_IconWidget *icon)
{
  %@UI@'ModuleName'%.PixelDim x, y, w, h, r;
  %@UI@'ModuleName'%.PixelColor fgColor, bgColor, insideColor;

#if %@UI@'ModuleName'%.CONFIG_SELECTION_ENABLED
  if (icon->element.prop.flags&%@UI@'ModuleName'%.FLAGS_IS_SELECTED) {
    if (icon->bgColor == icon->insideColor) {
      fgColor = icon->insideColor;
      bgColor = icon->bgColor;
      insideColor = icon->fgColor;
    } else {
      fgColor = icon->insideColor;
      bgColor = icon->fgColor;
      insideColor = icon->bgColor;
    }
  } else {
    fgColor = icon->fgColor;
    bgColor = icon->bgColor;
    insideColor = icon->insideColor;
  }
#else
  fgColor = icon->fgColor;
  bgColor = icon->bgColor;
#endif
  x = icon->element.prop.x;
  y = icon->element.prop.y;
  w = icon->element.prop.width;
  h = icon->element.prop.height;
  switch(icon->type) {
    case %'ModuleName'_ICON_BOX:
    case %'ModuleName'_ICON_X_BOXED:
    case %'ModuleName'_ICON_CHECKMARK_BOXED:
    case %'ModuleName'_ICON_ARROW_LEFT_BOXED:
    case %'ModuleName'_ICON_ARROW_RIGHT_BOXED:
    case %'ModuleName'_ICON_ARROW_UP_BOXED:
    case %'ModuleName'_ICON_ARROW_DOWN_BOXED:
    %@UI@'ModuleName'%.DrawBox(&icon->element, x, y, w, h, 1, fgColor);%>40/* paint box */
      x++; y++; w -= 2; h -= 2; /* adjust for border */
      %@UI@'ModuleName'%.DrawFilledBox(&icon->element, x, y, w, h, insideColor);%>40/* fill background */
      break;
    case %'ModuleName'_ICON_CIRCLE_DOT:
    case %'ModuleName'_ICON_CIRCLE:
      %@UI@'ModuleName'%.DrawFilledBox(&icon->element, x, y, w, h, bgColor);%>40/* fill background */
      if (w>=3) { /* check for minimal size/radius */
        r = (%@UI@'ModuleName'%.PixelDim)((w-1)/2);
      } else {
        r = 1;
      }
      %@UI@'ModuleName'%.DrawFilledCircle(&icon->element,
        (%@UI@'ModuleName'%.PixelDim)(x+((w-1)/2)),
        (%@UI@'ModuleName'%.PixelDim)(y+((h-1)/2)),
        r, insideColor);                                         %>40/* paint inside of circle */
      %@UI@'ModuleName'%.DrawCircle(&icon->element,
        (%@UI@'ModuleName'%.PixelDim)(x+((w-1)/2)),
        (%@UI@'ModuleName'%.PixelDim)(y+((h-1)/2)),
        r, fgColor);                                             %>40/* paint circle line */
      break;
    default:
      %@UI@'ModuleName'%.DrawFilledBox(&icon->element, x, y, w, h, bgColor);%>40/* fill background for all icon types*/
      break;
  } /* switch */
  switch(icon->type) {
    case %'ModuleName'_ICON_EMPTY:
    case %'ModuleName'_ICON_CIRCLE:
    case %'ModuleName'_ICON_BOX:
      /* everything already handled*/
      break;
    case %'ModuleName'_ICON_CIRCLE_DOT:
      if (w>=7) { /* check for minimal size/radius */
        r = (%@UI@'ModuleName'%.PixelDim)(((w-1)/2)-2); /* 2 pixel border to outside circle */
      } else if (w>=5) {
        r = (%@UI@'ModuleName'%.PixelDim)(((w-1)/2)-1); /* 1 pixel border to outside circle */
      } else {
        r = 1;
      }
      %@UI@'ModuleName'%.DrawFilledCircle(&icon->element,
        (%@UI@'ModuleName'%.PixelDim)(x+((w-1)/2)),
        (%@UI@'ModuleName'%.PixelDim)(y+((h-1)/2)),
        r,
        fgColor);                                                %>40/* paint filled circle */
      break;
    case %'ModuleName'_ICON_CHECKMARK:
    case %'ModuleName'_ICON_CHECKMARK_BOXED:
      %@UI@'ModuleName'%.DrawLine(&icon->element, x, (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), (%@UI@'ModuleName'%.PixelDim)(y+h-1), fgColor);
      %@UI@'ModuleName'%.DrawLine(&icon->element, (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), (%@UI@'ModuleName'%.PixelDim)(y+h-1), (%@UI@'ModuleName'%.PixelDim)(x+w-1), y, fgColor);
      break;
    case %'ModuleName'_ICON_X:                                   %>40/* paint an X */
    case %'ModuleName'_ICON_X_BOXED:
      %@UI@'ModuleName'%.DrawLine(&icon->element, x, y, (%@UI@'ModuleName'%.PixelDim)(x+w-1), (%@UI@'ModuleName'%.PixelDim)(y+h-1), fgColor);
      %@UI@'ModuleName'%.DrawLine(&icon->element, x, (%@UI@'ModuleName'%.PixelDim)(y+h-1), (%@UI@'ModuleName'%.PixelDim)(x+w-1), y, fgColor);
      break;
    case %'ModuleName'_ICON_ARROW_LEFT:                          %>40/* paint <- */
    case %'ModuleName'_ICON_ARROW_LEFT_BOXED:
      %@UI@'ModuleName'%.DrawHLine(&icon->element, x, (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), w, fgColor);
      %@UI@'ModuleName'%.DrawLine(&icon->element, x, (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), y, fgColor);
      %@UI@'ModuleName'%.DrawLine(&icon->element, x, (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), (%@UI@'ModuleName'%.PixelDim)(y+h-1), fgColor);
      break;
    case %'ModuleName'_ICON_ARROW_RIGHT:                         %>40/* paint -> */
    case %'ModuleName'_ICON_ARROW_RIGHT_BOXED:
      %@UI@'ModuleName'%.DrawHLine(&icon->element, x, (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), w, fgColor);
      %@UI@'ModuleName'%.DrawLine(&icon->element, (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), y, (%@UI@'ModuleName'%.PixelDim)(x+w-1), (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), fgColor);
      %@UI@'ModuleName'%.DrawLine(&icon->element, (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), (%@UI@'ModuleName'%.PixelDim)(y+h-1), (%@UI@'ModuleName'%.PixelDim)(x+w-1), (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), fgColor);
      break;
    case %'ModuleName'_ICON_ARROW_UP:                            %>40/* paint up arrow */
    case %'ModuleName'_ICON_ARROW_UP_BOXED:
      %@UI@'ModuleName'%.DrawVLine(&icon->element, (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), y, h, fgColor);
      %@UI@'ModuleName'%.DrawLine(&icon->element, (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), y, x, (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), fgColor);
      %@UI@'ModuleName'%.DrawLine(&icon->element, (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), y, (%@UI@'ModuleName'%.PixelDim)(x+w-1), (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), fgColor);
      break;
    case %'ModuleName'_ICON_ARROW_DOWN:                          %>40/* paint down arrow */
    case %'ModuleName'_ICON_ARROW_DOWN_BOXED:
      %@UI@'ModuleName'%.DrawVLine(&icon->element, (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), y, h, fgColor);
      %@UI@'ModuleName'%.DrawLine(&icon->element, x, (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), (%@UI@'ModuleName'%.PixelDim)(x+(w/2)), (%@UI@'ModuleName'%.PixelDim)(y+h-1), fgColor);
      %@UI@'ModuleName'%.DrawLine(&icon->element, (%@UI@'ModuleName'%.PixelDim)(x+(w/2)),(%@UI@'ModuleName'%.PixelDim)(y+h-1), (%@UI@'ModuleName'%.PixelDim)(x+w-1), (%@UI@'ModuleName'%.PixelDim)(y+(h/2)), fgColor);
      break;
    default:
      break;
  } /* switch */
}

%endif %- Paint
%-BW_METHOD_END Paint
%-************************************************************************************************************
%-BW_METHOD_BEGIN MessageHandler
%ifdef MessageHandler
%define! Parkind
%define! ParpData
%define! Parelement
%include Common\UIIconMessageHandler.Inc
void %'ModuleName'%.%MessageHandler(%@UI@'ModuleName'%.Element *element, %@UI@'ModuleName'%.MsgKind kind, void *pData)
{
  %'ModuleName'_IconWidget *widget = (%'ModuleName'_IconWidget*)element;

  if (widget==NULL || widget->element.prop.type!=%@UI@'ModuleName'%.WIDGET_ICON) {
    return; /* not a window widget */
  }
  switch(kind) {
    case %@UI@'ModuleName'%.MSG_WIDGET_UPDATE:
    case %@UI@'ModuleName'%.MSG_WIDGET_PAINT:
      %'ModuleName'%.%Paint(widget);
      break;
    default:
      break;
  } /* switch */
#if %'ModuleName'%.CONFIG_ICON_HAS_USER_MSG_HANDLER
  if (widget->userMsgHandler != NULL){
    widget->userMsgHandler(element, kind, pData);                %>40/* call user event  */
  }
#else
  (void)pData; /* avoid warning about unused argument */
#endif
}

%endif %- MessageHandler
%-BW_METHOD_END MessageHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
%define! Paricon
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parparent
%define! RetVal
%include Common\UIIconCreate.Inc
uint8_t %'ModuleName'%.%Create(%@UI@'ModuleName'%.Element *parent, %'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.PixelDim x, %@UI@'ModuleName'%.PixelDim y, %@UI@'ModuleName'%.PixelDim width, %@UI@'ModuleName'%.PixelDim height)
{
  if (icon == NULL) {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.ElementInitCommon(&icon->element, %@UI@'ModuleName'%.WIDGET_ICON,
    x, y, width, height,
    %'ModuleName'%.%MessageHandler);
  icon->type = %'ModuleName'%.CONFIG_DEFAULT_ICON_KIND;
  icon->fgColor = %'ModuleName'%.CONFIG_DEFAULT_ICON_FOREGROUND_COLOR;
  icon->bgColor = %'ModuleName'%.CONFIG_DEFAULT_ICON_BACKGROUND_COLOR;
  icon->insideColor = %'ModuleName'%.CONFIG_DEFAULT_ICON_INSIDE_COLOR;
#if %'ModuleName'%.CONFIG_ICON_HAS_USER_MSG_HANDLER
  icon->userMsgHandler = NULL;                                   %>40/* needs to be set by user */
#endif
  if (parent!=NULL) {
    return %@UI@'ModuleName'%.AddSubElement(parent, &icon->element);
  }
  return ERR_OK;
}

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetForegroundColor
%ifdef SetForegroundColor
%define! Paricon
%define! Parcolor
%include Common\UIIconSetForegroundColor.Inc
void %'ModuleName'%.%SetForegroundColor(%'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.PixelColor color)
{
 icon->fgColor = color;
}

%endif %- SetForegroundColor
%-BW_METHOD_END SetForegroundColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetBackgroundColor
%ifdef SetBackgroundColor
%define! Paricon
%define! Parcolor
%include Common\UIIconSetBackgroundColor.Inc
void %'ModuleName'%.%SetBackgroundColor(%'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.PixelColor color)
{
  icon->bgColor = color;
}

%endif %- SetBackgroundColor
%-BW_METHOD_END SetBackgroundColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInsideColor
%ifdef SetInsideColor
%define! Paricon
%define! Parcolor
%include Common\UIIconSetInsideColor.Inc
void %'ModuleName'%.%SetInsideColor(%'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.PixelColor color)
{
  icon->insideColor = color;
}

%endif %- SetInsideColor
%-BW_METHOD_END SetInsideColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
%define! Paricon
%define! Parhandler
%include Common\UIIconSetUserMsgHandler.Inc
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_IconWidget *icon, %@UI@'ModuleName'%.MsgHandler handler)
{
#if %'ModuleName'%.CONFIG_ICON_HAS_USER_MSG_HANDLER
  icon->userMsgHandler = handler;
#else
  (void)icon;
  (void)handler;
#endif
}

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetType
%ifdef SetType
%define! Paricon
%define! Partype
%include Common\UIIconSetType.Inc
void %'ModuleName'%.%SetType(%'ModuleName'_IconWidget *icon, %'ModuleName'_IconType type)
{
  icon->type = type;
}

%endif %- SetType
%-BW_METHOD_END SetType
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Application configuration file for UIWindow module
 *
 * This header file is a configuration header file to configure the module %'ModuleName' (UIWindow).
 * You can configure the defines directly in this file or with the compiler -D option.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#ifndef %'ModuleName'%.CONFIG_DEFAULT_ICON_BACKGROUND_COLOR
  #define %'ModuleName'%.CONFIG_DEFAULT_ICON_BACKGROUND_COLOR  %@UI@'ModuleName'%.COLOR_%DefaultBackgroundColor
    /*!< Default icon background color */
#endif

#ifndef %'ModuleName'%.CONFIG_DEFAULT_ICON_FOREGROUND_COLOR
  #define %'ModuleName'%.CONFIG_DEFAULT_ICON_FOREGROUND_COLOR  %@UI@'ModuleName'%.COLOR_%DefaultForegroundColor
    /*!< Default icon border color */
#endif

#ifndef %'ModuleName'%.CONFIG_DEFAULT_ICON_INSIDE_COLOR
  #define %'ModuleName'%.CONFIG_DEFAULT_ICON_INSIDE_COLOR  %@UI@'ModuleName'%.COLOR_%DefaultInsideColor
    /*!< Default icon inside color */
#endif

#ifndef %'ModuleName'%.CONFIG_DEFAULT_ICON_KIND
  #define %'ModuleName'%.CONFIG_DEFAULT_ICON_KIND  %'ModuleName'%.%DefaultIconType
    /*!< Default icon type */
#endif

#ifndef %'ModuleName'%.CONFIG_ICON_HAS_USER_MSG_HANDLER
%ifdef SetUserMsgHandler
  #define %'ModuleName'%.CONFIG_ICON_HAS_USER_MSG_HANDLER  (1)
    /*!< 1: icons have extra user message handler; 0: no extra message handler*/
%else
  #define %'ModuleName'%.CONFIG_ICON_HAS_USER_MSG_HANDLER  (0)
    /*!< 1: icons have extra user message handler; 0: no extra message handler*/
%endif %- SetUserMsgHandler
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

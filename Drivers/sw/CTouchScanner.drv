%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    13.10.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\CTouchScannerSettings.Inc
%define! Abstract Common\CTouchScannerAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

#define %'ModuleName'%.NOF_ELECTRODES %SensorSymbolNumItems      %>40/* number of sensors */

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Scan
%ifdef Scan
void %'ModuleName'%.%Scan(void);
%include Common\CTouchScannerScan.Inc

%endif %- Scan
%-BW_METHOD_END Scan
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue
%ifdef GetValue
byte %'ModuleName'%.%GetValue(byte *value, byte electrodeNr);
%define! Parvalue
%define! ParelectrodeNr
%define! RetVal
%include Common\CTouchScannerGetValue.Inc

%endif %- GetValue
%-BW_METHOD_END GetValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
void %'ModuleName'%.%Enable(byte electrodeNr);
%define! ParelectrodeNr
%include Common\CTouchScannerEnable.Inc

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
void %'ModuleName'%.%Disable(byte electrodeNr);
%define! ParelectrodeNr
%include Common\CTouchScannerDisable.Inc

%endif %- Disable
%-BW_METHOD_END Disable
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnPress
%ifdef OnPress
%INTERFACE OnPress
void %OnPress(byte electrodeNr);
%define! ParelectrodeNr
%include Common\CTouchScannerOnPress.Inc

%endif %- OnPress
%-BW_METHOD_END OnPress
%-BW_METHOD_BEGIN OnRelease
%ifdef OnRelease
%INTERFACE OnRelease
void %OnRelease(byte electrodeNr);
%define! ParelectrodeNr
%include Common\CTouchScannerOnRelease.Inc

%endif %- OnRelease
%-BW_METHOD_END OnRelease
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%INTERFACE OnError
void %OnError(byte electrodeNr);
%define! ParelectrodeNr
%include Common\CTouchScannerOnError.Inc

%endif %- OnError
%-BW_METHOD_END OnError
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\CTouchScannerSettings.Inc
%define! Abstract Common\CTouchScannerAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
/* array of function pointers to get the electrode values */
typedef byte(*%'ModuleName'%.ElectrodeValueFnPtr)(byte*);        %>40/* type of function pointer who gives us the electrode value */
%:maxSensor=%SensorSymbolNumItems
%:maxSensor-=1

static const %'ModuleName'%.ElectrodeValueFnPtr %'ModuleName'%.getElectrodeValueFn[%'ModuleName'%.NOF_ELECTRODES] =
{
  %for i from [0..%maxSensor]
  %@SensorsSymb%i@'ModuleName'%.Measure, /* Measure electrode #%i */
  %endfor
};

static byte %'ModuleName'_average[%'ModuleName'%.NOF_ELECTRODES]; /* cumulated average value for each electrode */
static const byte %'ModuleName'_thresholdOff[%'ModuleName'%.NOF_ELECTRODES] = /* threshold values where electrode switches off */
{
  %for i from [0..%maxSensor]
  %@SensorsSymb%i@'ModuleName'%.THRESHOLD_OFF, /* off threshold value for electrode #%i */
  %endfor
};
static const byte %'ModuleName'_thresholdOn[%'ModuleName'%.NOF_ELECTRODES] = /* threshold values where electrodes switches on */
{
%:maxSensor=%SensorSymbolNumItems
%:maxSensor-=1
  %for i from [0..%maxSensor]
  %@SensorsSymb%i@'ModuleName'%.THRESHOLD_ON, /* on threshold value for electrode #%i */
  %endfor
};

%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Scan
%ifdef Scan
%include Common\CTouchScannerScan.Inc
void %'ModuleName'%.%Scan(void)
{
  byte i;
  static byte electrodeState = 0;                                %>40/* a bit set to 1 means electrode is pressed */
  byte mask;
  byte status;
  byte values[%'ModuleName'%.NOF_ELECTRODES];
  word ticks;

  %for i from [0..%maxSensor]
  %@SensorsSymb%i@'ModuleName'%.Discharge();                     %>40/* discharge electrode #%i */
  %endfor
  %for i from [0..%maxSensor]
  %@SensorsSymb%i@'ModuleName'%.SetAsInput();                    %>40/* set electrode #%i as input*/
  %endfor
  %@Counter@'ModuleName'%.Reset();
  status = 0;
  while(status != 0xff) {                                        %>40/* breaks when all electrodes have reached logical one */
    (void)%@Counter@'ModuleName'%.GetCounterValue(&ticks);
     ticks /= %@Counter@'ModuleName'%.PERIOD_VALUE;         /* scale down to number of ticks */
    %for i from [0..%maxSensor]
    if ((status&(1<<%i))==0) {                                   %>40/* did not charge up yet */
      if (%@SensorsSymb%i@'ModuleName'%.Get()!=0) {              %>40/* electrode #%i charged up again */
        status |= (1<<%i);                                       %>40/* mark status for electrode that we reached charge level */
        values[%i] = (byte)ticks;                                %>40/* store time */
      } else if (ticks > %@SensorsSymb%i@'ModuleName'%.THRESHOLD_TIMEOUT) {%>40/* check for timeout */
        /* timeout! */
        status |= (1<<%i);                                       %>40/* mark so we do not check again */
        values[%i] = %@SensorsSymb%i@'ModuleName'%.THRESHOLD_TIMEOUT;%>40/* store timout value */
      }
    }
    %endfor
  } /* for */
  /* discharge all electrodes */
  %for i from [0..%maxSensor]
  %@SensorsSymb%i@'ModuleName'%.Discharge(); /* discharge electrode #%i */
  %endfor

  mask = 1;
  for(i=0; i<%'ModuleName'%.NOF_ELECTRODES; i++) {
    /* integrate current value into average sample value */
    %'ModuleName'_average[i] = (byte)(%'ModuleName'_average[i]
      + (((int8_t)(values[i]-%'ModuleName'_average[i]))>>2));
    if (%'ModuleName'_average[i]>%'ModuleName'_thresholdOn[i]) { %>40/* new value is large enough for a click */
      if ((electrodeState&mask)==0) {
%ifdef OnPress
        %OnPress(i);                                             %>40/* call user event */
%endif %- OnPress
        electrodeState |= mask;
      }
    } else if (%'ModuleName'_average[i]<%'ModuleName'_thresholdOff[i]) {%>40/* new value is large enough for a click */
      if ((electrodeState&mask)==mask) {
%ifdef OnRelease
        %OnRelease(i);                                           %>40/* call user event */
%endif %- OnRelease
        electrodeState &= ~mask;
      }
    }
    mask <<= 1;                                                  %>40/* next bit in mask */
  }


#if 0
  mask = 1;
  for(i=0; i<%'ModuleName'%.NOF_ELECTRODES; i++) {
    res = %'ModuleName'%.getElectrodeValueFn[i](&val);
    if (res == ERR_OK) {
      /* integrate current value into average sample value */
      %'ModuleName'_average[i] = (byte)(%'ModuleName'_average[i]
        + (((int8_t)(val-%'ModuleName'_average[i]))>>2));
      if (%'ModuleName'_average[i]>%'ModuleName'_thresholdOn[i]) {%>40/* new value is large enough for a click */
        if ((electrodeState&mask)==0) {
%ifdef OnPress
          %OnPress(i);                                           %>40/* call user event */
%endif %- OnPress
          electrodeState |= mask;
        }
      } else if (%'ModuleName'_average[i]<%'ModuleName'_thresholdOff[i]) {%>40/* new value is large enough for a click */
        if ((electrodeState&mask)==mask) {
%ifdef OnRelease
          %OnRelease(i);                                         %>40/* call user event */
%endif %- OnRelease
          electrodeState &= ~mask;
        }
      }
%ifdef OnError
    } else { /* error case */
      %OnError(i);                                               %>40/* call user event */
%endif %- OnError
    }
    mask <<= 1;                                                  %>40/* next bit in mask */
  }
#endif
}

%endif %- Scan
%-BW_METHOD_END Scan
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue
%ifdef GetValue
%define! Parvalue
%define! ParelectrodeNr
%define! RetVal
%include Common\CTouchScannerGetValue.Inc
byte %'ModuleName'%.%GetValue(byte *value, byte electrodeNr)
{
  if (electrodeNr > %'ModuleName'%.NOF_ELECTRODES) { /* illegal electrode number */
    return ERR_OVERFLOW;
  }
  *value = %'ModuleName'_average[electrodeNr];
  return ERR_OK;
}

%endif %- GetValue
%-BW_METHOD_END GetValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
%define! ParelectrodeNr
%include Common\CTouchScannerEnable.Inc
void %'ModuleName'%.%Enable(byte electrodeNr)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
%define! ParelectrodeNr
%include Common\CTouchScannerDisable.Inc
void %'ModuleName'%.%Disable(byte electrodeNr)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- Disable
%-BW_METHOD_END Disable
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnPress
%ifdef OnPress
%IMPLEMENTATION OnPress
%define! ParelectrodeNr
%include Common\CTouchScannerOnPress.Inc
void %OnPress(byte electrodeNr)
{
  (void)electrodeNr; /* avoid warning in case argument is not used */
  /* Write your code here ... */
}

%endif %- OnPress
%-BW_METHOD_END OnPress
%-BW_METHOD_BEGIN OnRelease
%ifdef OnRelease
%IMPLEMENTATION OnRelease
%define! ParelectrodeNr
%include Common\CTouchScannerOnRelease.Inc
void %OnRelease(byte electrodeNr)
{
  (void)electrodeNr; /* avoid warning in case argument is not used */
  /* Write your code here ... */
}

%endif %- OnRelease
%-BW_METHOD_END OnRelease
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%IMPLEMENTATION OnError
%define! ParelectrodeNr
%include Common\CTouchScannerOnError.Inc
void %OnError(byte electrodeNr)
{
  (void)electrodeNr; /* avoid warning in case argument is not used */
  /* Write your code here ... */
}

%endif %- OnError
%-BW_METHOD_END OnError
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

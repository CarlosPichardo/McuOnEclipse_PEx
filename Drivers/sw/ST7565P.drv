%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    16.12.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_WriteCmd Writes a command to the display
%define! Description_WriteData Write a data byte to the display
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\ST7565PSettings.Inc
%define! Abstract Common\ST7565PAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

#define %'ModuleName'%.DISPLAY_HW_NOF_COLUMNS  %'Width'u         %>40/* number of columns in hardware */
#define %'ModuleName'%.DISPLAY_HW_NOF_ROWS     %'Height'u        %>40/* number of rows in hardware */

extern uint8_t %'ModuleName'%.DisplayBuf[((%'ModuleName'%.DISPLAY_HW_NOF_ROWS-1)/8)+1][%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS]; /* buffer for the display */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_PixelCount
#define __BWUserType_%'ModuleName'_PixelCount
  typedef int16_t %'ModuleName'_PixelCount ;                     %>40/* A word is enough to hold the number of pixels (84x48). */
#endif
#ifndef __BWUserType_%'ModuleName'_PixelDim
#define __BWUserType_%'ModuleName'_PixelDim
  typedef uint8_t %'ModuleName'_PixelDim ;                       %>40/* One byte is enough to describe an x/y position. */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
typedef bool %'ModuleName'%.PixelColor;                          %>40/* one bit is enough to describe the color as we have a monochrome display */

#define %'ModuleName'%.PIXEL_BLACK  1 /* 1 is a black pixel */
#define %'ModuleName'%.PIXEL_WHITE  0 /* 0 is a white pixel */
#define %'ModuleName'%.COLOR_PIXEL_SET      %'ModuleName'%.PIXEL_BLACK /* color for a pixel set */
#define %'ModuleName'%.COLOR_PIXEL_CLR      %'ModuleName'%.PIXEL_WHITE /* color for a pixel cleared */
%if DisplayInvert='yes'
#define %'ModuleName'%.COLOR_BLACK          %'ModuleName'%.PIXEL_WHITE
#define %'ModuleName'%.COLOR_WHITE          %'ModuleName'%.PIXEL_BLACK
%else
#define %'ModuleName'%.COLOR_BLACK          %'ModuleName'%.PIXEL_BLACK
#define %'ModuleName'%.COLOR_WHITE          %'ModuleName'%.PIXEL_WHITE
%endif
#define %'ModuleName'%.COLOR_RED            %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_RED     %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_RED       %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_GREEN          %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_GREEN   %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_GREEN     %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BLUE           %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_BLUE    %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_BLUE      %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_YELLOW         %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_YELLOW  %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_ORANGE         %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_GREY           %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_GREY    %'ModuleName'%.COLOR_WHITE

typedef enum {
  %'ModuleName'%.ORIENTATION_PORTRAIT    = 0,
  %'ModuleName'%.ORIENTATION_PORTRAIT180 = 1,
  %'ModuleName'%.ORIENTATION_LANDSCAPE   = 2,
  %'ModuleName'%.ORIENTATION_LANDSCAPE180= 3
} %'ModuleName'%.DisplayOrientation;

#define %'ModuleName'%.HW_WIDTH         %'Width'u                %>40/* width of display in pixels */
#define %'ModuleName'%.HW_HEIGHT        %'Height'u               %>40/* height of display in pixels */

%if %Height <. %Width
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Height'u               %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Width'u                %>40/* size of longer display side in pixels */
%else
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Width'u                %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Height'u               %>40/* size of longer display side in pixels */
%endif

%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-Unused %-INHERITED_EVENT_BEGIN D_C BeforeNewSpeed
%-Unused %ifdef @D_C@BeforeNewSpeed
%-Unused void %@D_C@BeforeNewSpeed(void);
%-Unused
%-Unused %endif %- @D_C@BeforeNewSpeed
%-Unused %-INHERITED_EVENT_END D_C BeforeNewSpeed
%-Unused %-INHERITED_EVENT_BEGIN D_C AfterNewSpeed
%-Unused %ifdef @D_C@AfterNewSpeed
%-Unused void %@D_C@AfterNewSpeed(void);
%-Unused
%-Unused %endif %- @D_C@AfterNewSpeed
%-Unused %-INHERITED_EVENT_END D_C AfterNewSpeed
%-Unused %-INHERITED_EVENT_BEGIN D_C OnEnd
%-Unused %ifdef @D_C@OnEnd
%-Unused void %@D_C@OnEnd(void);
%-Unused
%-Unused %endif %- @D_C@OnEnd
%-Unused %-INHERITED_EVENT_END D_C OnEnd
%-Unused %-INHERITED_EVENT_BEGIN D_C OnTrgOverrun
%-Unused %ifdef @D_C@OnTrgOverrun
%-Unused void %@D_C@OnTrgOverrun(void);
%-Unused
%-Unused %endif %- @D_C@OnTrgOverrun
%-Unused %-INHERITED_EVENT_END D_C OnTrgOverrun
%-************************************************************************************************************
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
void %'ModuleName'%.%Clear(void);
%include Common\ST7565PClear.Inc

%endif %- Clear
%-BW_METHOD_END Clear
%-************************************************************************************************************
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\ST7565PInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h);
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\ST7565PUpdateRegion.Inc

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
void %'ModuleName'%.%UpdateFull(void);
%include Common\ST7565PUpdateFull.Inc

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetMode
%ifdef SetMode
void %'ModuleName'%.%SetMode(bool inverted);
%define! Parinverted
%include Common\ST7565PSetMode.Inc

%endif %- SetMode
%-BW_METHOD_END SetMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetWindow
%ifdef SetWindow
void %'ModuleName'%.%SetWindow(%'ModuleName'_PixelDim x0, %'ModuleName'_PixelDim x1, %'ModuleName'_PixelDim y0, %'ModuleName'_PixelDim y1);
%define! Parx0
%define! Parx1
%define! Pary0
%define! Pary1
%include Common\ST7565PSetWindow.Inc

%endif %- SetWindow
%-BW_METHOD_END SetWindow
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void);
%define! RetVal
%include Common\ST7565PGetDisplayOrientation.Inc

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
#define %'ModuleName'%.%GetWidth() \
  %'ModuleName'%.HW_WIDTH

%define! RetVal
%include Common\ST7565PGetWidth.Inc

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
#define %'ModuleName'%.%GetHeight() \
  %'ModuleName'%.HW_HEIGHT

%define! RetVal
%include Common\ST7565PGetHeight.Inc

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
#define %'ModuleName'%.%GetLongerSide() \
  %'ModuleName'%.HW_LONGER_SIDE

%define! RetVal
%include Common\ST7565PGetLongerSide.Inc

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
#define %'ModuleName'%.%GetShorterSide() \
  %'ModuleName'%.HW_SHORTER_SIDE

%define! RetVal
%include Common\ST7565PGetShorterSide.Inc

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation);
%define! ParnewOrientation
%include Common\ST7565PSetDisplayOrientation.Inc

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLCD
%ifdef GetLCD
void %'ModuleName'%.%GetLCD(void);
%include Common\ST7565PGetLCD.Inc

%endif %- GetLCD
%-BW_METHOD_END GetLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN GiveLCD
%ifdef GiveLCD
void %'ModuleName'%.%GiveLCD(void);
%include Common\ST7565PGiveLCD.Inc

%endif %- GiveLCD
%-BW_METHOD_END GiveLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\ST7565PDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\ST7565PSettings.Inc
%define! Abstract Common\ST7565PAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;

uint8_t %'ModuleName'%.DisplayBuf[((%'ModuleName'%.DISPLAY_HW_NOF_ROWS-1)/8)+1][%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS]; /* buffer for the display */

%if defined(CSLDD)
static LDD_TDeviceData *CS_DeviceData; /* device handle for CS pin */
%endif
%if defined(A0LDD)
static LDD_TDeviceData *A0_DeviceData; /* device handle for A0 pin */
%endif

/* some aspects of the protocol are pretty timing sensitive... */
%if %HardwareGroup='yes'
#define SET_CS()   \
    %@Wait@'ModuleName'%.Waitns(500); \
    %@CS@'ModuleName'%.SetVal(); \
    %@Wait@'ModuleName'%.Waitns(500);

#define CLR_CS()   \
    %@Wait@'ModuleName'%.Waitns(100); \
    %@CS@'ModuleName'%.ClrVal(); \
    %@Wait@'ModuleName'%.Waitns(100);

#define CLR_A0() \
    %@A0@'ModuleName'%.ClrVal()
#define SET_A0() \
    %@A0@'ModuleName'%.SetVal()
%endif

%if %HardwareGroupLDD='yes'
#define SET_CS()   \
    %@Wait@'ModuleName'%.Waitns(500); \
    %@CSLDD@'ModuleName'%.SetVal(CS_DeviceData); /* set bit */ \
    %@Wait@'ModuleName'%.Waitns(500);

#define CLR_CS()   \
    %@Wait@'ModuleName'%.Waitns(100); \
    %@CSLDD@'ModuleName'%.ClrVal(A0_DeviceData); /* clr bit */ \
    %@Wait@'ModuleName'%.Waitns(100);

#define CLR_CS()   %@CSLDD@'ModuleName'%.ClrVal(CS_DeviceData) /* clr bit */
#define SET_CS()   %@CSLDD@'ModuleName'%.SetVal(CS_DeviceData) /* set bit */

#define CLR_A0()   %@A0LDD@'ModuleName'%.ClrVal(A0_DeviceData) /* clr bit */
#define SET_A0()   %@A0LDD@'ModuleName'%.SetVal(A0_DeviceData) /* set bit */

static volatile bool %'ModuleName'%.DataReceivedFlag = FALSE;
%endif

%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG WriteCmd
static void WriteCmd(uint8_t cmd);
%-INTERNAL_LOC_METHOD_END WriteCmd
%-INTERNAL_LOC_METHOD_BEG WriteData
static void WriteData(uint8_t data);
%-INTERNAL_LOC_METHOD_END WriteData
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG WriteCmd
%define! Parcmd
%include Common\GeneralInternalGlobal.inc (WriteCmd)
static void WriteCmd(uint8_t cmd)
{
%if defined(SPILDD)
  uint8_t dummy;

%endif
  CLR_CS();                                                      %>40/* CS1 low: select device */
  CLR_A0();                                                      %>40/* A0 low */
%if defined(SPILDD)
  %'ModuleName'%.DataReceivedFlag = FALSE;
  %@SPILDD@'ModuleName'%.ReceiveBlock(%@SPILDD@'ModuleName'%.DeviceData, &dummy, 1);
  %@SPILDD@'ModuleName'%.SendBlock(%@SPILDD@'ModuleName'%.DeviceData, &cmd, 1);
  while (!%'ModuleName'%.DataReceivedFlag) {};                            /* Wait until data block is transmitted/received */
%else
%if defined(SPI)
  (void)%@SPI@'ModuleName'%.SendChar(cmd);                       %>40/* send command byte */
%endif
%endif
  SET_A0();                                                      %>40/* \todo: A0 should be set at last bit?!! */
  SET_CS();                                                      %>40/* CS high: deselect device */
}

%-INTERNAL_METHOD_END WriteCmd
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG WriteData
%define! Pardata
%include Common\GeneralInternalGlobal.inc (WriteData)
static void WriteData(uint8_t data)
{
%if defined(SPILDD)
  uint8_t dummy;

%endif
  CLR_CS();                                                      %>40/* CS1 low: select device */
  CLR_A0();                                                      %>40/* A0 low */
%if defined(SPILDD)
  %'ModuleName'%.DataReceivedFlag = FALSE;
  %@SPILDD@'ModuleName'%.ReceiveBlock(%@SPILDD@'ModuleName'%.DeviceData, &dummy, 1);
  %@SPILDD@'ModuleName'%.SendBlock(%@SPILDD@'ModuleName'%.DeviceData, &data, 1);
  while (!%'ModuleName'%.DataReceivedFlag) {};                            /* Wait until data block is transmitted/received */
%else
%if defined(SPI)
  (void)%@SPI@'ModuleName'%.SendChar(data);                      %>40/* send data byte */
%endif
%endif
  SET_A0();                                                      %>40/* \todo: A0 should be set at last bit?!! */
  SET_CS();                                                      %>40/* CS high: deselect device */
}

%-INTERNAL_METHOD_END WriteData
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
%include Common\ST7565PClear.Inc
void %'ModuleName'%.%Clear(void)
{
  short ddram;

  for (ddram=%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS*(%'ModuleName'%.DISPLAY_HW_NOF_ROWS/8); ddram>0; ddram--) {
    WriteData(0);                                                %>40 /* clear actual line */
  }
}

%endif %- Clear
%-BW_METHOD_END Clear
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\ST7565PInit.Inc
void %'ModuleName'%.%Init(void)
{
%if defined(CSLDD)
  CS_DeviceData = %@CSLDD@'ModuleName'%.Init(NULL); /* device handle for CS1 pin */
%endif
%if defined(A0LDD)
  A0_DeviceData = %@A0LDD@'ModuleName'%.Init(NULL); /* device handle for A0 pin */
%endif
  /* boot display */
  /*! \todo */
  SET_CS();                                                      %>40 /* CS high: Disable device */
  %@Wait@'ModuleName'%.Waitms(10);                               %>40 /* wait at least 10ms */
  CLR_A0();                                                      %>40 /* Reset line low */

  /* initialize display */
  WriteCmd(0x21);                                                %>40 /* Activate Chip and H=1 */
  %'ModuleName'%.%Clear();                                       %>40 /* Erase all pixel on the DDRAM */
  WriteCmd(0x08);                                                %>40 /* Blank the Display */
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\ST7565PUpdateRegion.Inc
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h)
{
  (void)x; (void)y; (void)w; (void)h;
  %'ModuleName'%.%UpdateFull();                                  %>40 /* NYI, we simply refresh everything :-( */
}

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
%include Common\ST7565PUpdateFull.Inc
void %'ModuleName'%.%UpdateFull(void)
{
  uint16_t numBytes = sizeof(%'ModuleName'_DisplayBuf);
  uint8_t *data = (uint8_t*)%'ModuleName'_DisplayBuf;

  while(numBytes>0) {
    WriteData(*data++);                                          %>40 /* write data */
    numBytes--;
  }SET
}

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetMode
%ifdef SetMode
%define! Parinverted
%include Common\ST7565PSetMode.Inc
void %'ModuleName'%.%SetMode(bool inverted)
{
  if (inverted) {
    WriteCmd(0x0C|1);                                            %>40 /* Inverted display mode */
  } else {
    WriteCmd(0x0C);                                              %>40 /* Normal display mode */
  }
}

%endif %- SetMode
%-BW_METHOD_END SetMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetWindow
%ifdef SetWindow
%define! Parx0
%define! Parx1
%define! Pary0
%define! Pary1
%include Common\ST7565PSetWindow.Inc
void %'ModuleName'%.%SetWindow(%'ModuleName'_PixelDim x0, %'ModuleName'_PixelDim x1, %'ModuleName'_PixelDim y0, %'ModuleName'_PixelDim y1)
{
  /* our display does not implement the window method, so this function shall never be called */
  (void)x0; (void)x1; (void)y0; (void)y1; /* to avoid compiler warnings */
}

%endif %- SetWindow
%-BW_METHOD_END SetWindow
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%define! RetVal
%include Common\ST7565PGetDisplayOrientation.Inc
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void)
{
  return %'ModuleName'%.ORIENTATION_LANDSCAPE;                   %>40/* Landscape mode */
}

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
%define! RetVal
%include Common\ST7565PGetWidth.Inc
/*
%'ModuleName'_PixelDim %'ModuleName'%.%GetWidth(void)
{
  *** Method is implemented as macro in %'ModuleName'.h
}
*/

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
%define! RetVal
%include Common\ST7565PGetHeight.Inc
/*
%'ModuleName'_PixelDim %'ModuleName'%.%GetHeight(void)
{
  *** Method is implemented as macro in %'ModuleName'.h
}
*/

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
%define! RetVal
%include Common\ST7565PGetLongerSide.Inc
/*
%'ModuleName'_PixelDim %'ModuleName'%.%GetLongerSide(void)
{
  *** Method is implemented as macro in %'ModuleName'.h
}
*/

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
%define! RetVal
%include Common\ST7565PGetShorterSide.Inc
/*
%'ModuleName'_PixelDim %'ModuleName'%.%GetShorterSide(void)
{
  *** Method is implemented as macro in %'ModuleName'.h
}
*/

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
%define! ParnewOrientation
%include Common\ST7565PSetDisplayOrientation.Inc
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation)
{
  (void)newOrientation; /* setting the display orientation is not implemented yet */
}

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLCD
%ifdef GetLCD
%include Common\ST7565PGetLCD.Inc
void %'ModuleName'%.%GetLCD(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- GetLCD
%-BW_METHOD_END GetLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN GiveLCD
%ifdef GiveLCD
%include Common\ST7565PGiveLCD.Inc
void %'ModuleName'%.%GiveLCD(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- GiveLCD
%-BW_METHOD_END GiveLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\ST7565PDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
%if defined(CSLDD)
  %@CSLDD@'ModuleName'%.Deinit(CS_DeviceData); /* device handle for CS1 pin */
%endif
%if defined(A0LDD)
  %@A0LDD@'ModuleName'%.Deinit(A0_DeviceData); /* device handle for A0 pin */
%endif
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%if %InitializeOnInit='yes'
  %'ModuleName'%.Init();
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

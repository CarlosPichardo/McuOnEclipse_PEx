%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Paint Paints a button
%define! Description_PressButton Changes a button into the pressed/released state
%define! Description_ReleaseButton Changes a button into the pressed/released state
%define! Description_MsgHandler Callback used for widget events
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UIButtonSettings.Inc
%define! Abstract Common\UIButtonAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

typedef %@UI@'ModuleName'%.PixelColor %'ModuleName'%.PixelColor; %>40/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim %'ModuleName'%.PixelDim;     %>40/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Element %'ModuleName'%.Element;       %>40/* Alias to UserInterface type */
typedef %@TextWidget@'ModuleName'%.TextWidget %'ModuleName'%.TextWidget;%>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.MsgKind %'ModuleName'%.MsgKind;       %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Pvoid %'ModuleName'%.Pvoid;           %>40/* Alias to Pvoid data type */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
typedef struct {
  %'ModuleName'_Element element;                                 %>40/* the base element, always first in structure */
%ifdef SetUserMsgHandler
  %@UI@'ModuleName'%.MsgHandler userMsgHandler;                  %>40/* optional user callback */
%endif %- SetUserMsgHandler
  %'ModuleName'_TextWidget textWidget;                           %>40/* label */
  bool isPressed;                                                %>40/* if button is pressed */
} %'ModuleName'_ButtonWidget;

typedef enum {                                                   %>40/* this lists widget specific event kinds */
  %'ModuleName'_MSG_BUTTON_PRESS = %@UI@'ModuleName'%.MSG_LAST_PREFINED%>40/* Button Press event, generated at release time */
} %'ModuleName'_ButtonMsgKind; /* extension of %@UI@'ModuleName'%.MsgKind */

%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
byte %'ModuleName'%.%Create(%'ModuleName'_Element *parent, %'ModuleName'_ButtonWidget *button, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height);
%define! Parbutton
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parparent
%define! RetVal
%include Common\UIButtonCreate.Inc

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG PressButton
void %'ModuleName'%.PressButton(%'ModuleName'_ButtonWidget *button);
%define! Parbutton
%include Common\GeneralInternal.inc (PressButton)

%-INTERNAL_METHOD_END PressButton
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG ReleaseButton
void %'ModuleName'%.ReleaseButton(%'ModuleName'_ButtonWidget *button);
%define! Parbutton
%include Common\GeneralInternal.inc (ReleaseButton)

%-INTERNAL_METHOD_END ReleaseButton
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
#define %'ModuleName'%.%SetUserMsgHandler(button, handler) \
  (button)->userMsgHandler = handler

%define! Parbutton
%define! Parhandler
%include Common\UIButtonSetUserMsgHandler.Inc

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetText
%ifdef SetText
byte %'ModuleName'%.%SetText(%'ModuleName'_ButtonWidget *widget, unsigned char *txt);
%define! Parwidget
%define! Partxt
%define! RetVal
%include Common\UIButtonSetText.Inc

%endif %- SetText
%-BW_METHOD_END SetText
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
byte %'ModuleName'%.%Resize(%'ModuleName'_ButtonWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UIButtonResize.Inc

%endif %- Resize
%-BW_METHOD_END Resize
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Paint
byte %'ModuleName'%.Paint(%'ModuleName'_Element *element);
%define! Parelement
%define! RetVal
%include Common\GeneralInternal.inc (Paint)

%-INTERNAL_METHOD_END Paint
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateButton
%ifdef CreateButton
byte %'ModuleName'%.%CreateButton(%'ModuleName'_Element *parent, %'ModuleName'_ButtonWidget *widget, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, unsigned char *txt, %@UI@'ModuleName'%.MsgHandler handler);
%define! Parparent
%define! Parx
%define! Pary
%define! Partxt
%define! Parhandler
%define! Parwidget
%define! RetVal
%include Common\UIButtonCreateButton.Inc

%endif %- CreateButton
%-BW_METHOD_END CreateButton
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UIButtonSettings.Inc
%define! Abstract Common\UIButtonAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
/* Constants for Button properties */
#define %'ModuleName'%.BUTTON_LINE_WIDTH          %ButtonLineWidth%>40/* width of lines around button */
#define %'ModuleName'%.BUTTON_TEXT_BORDER_WIDTH   %ButtonTextBorderWidth%>40/* width of space around button text (between border and text) */
#define %'ModuleName'%.BUTTON_PRESS_Y_DELTA       %'ModuleName'%.BUTTON_LINE_WIDTH%>40/* the button text will be moved by this delta in pressed state */
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG MsgHandler
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData);
%-INTERNAL_LOC_METHOD_END MsgHandler
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG MsgHandler
%define! Parkind
%define! ParpData
%define! Parelement
%include Common\GeneralInternalGlobal.inc (MsgHandler)
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData)
{
  %'ModuleName'_ButtonWidget *widget = (%'ModuleName'_ButtonWidget*)element;

  if (kind==%@UI@'ModuleName'%.MSG_WIDGET_PAINT) {
    (void)%'ModuleName'%.Paint(element);
  } else if (kind==%@UI@'ModuleName'%.MSG_WIDGET_RESIZE) {
    (void)%@TextWidget@'ModuleName'%.Resize(&widget->textWidget);
    (void)%'ModuleName'%.%Resize(widget);
  } else if (kind==%@UI@'ModuleName'%.MSG_CLICK) {               %>40/* click down */
    if (%@UI@'ModuleName'%.CoordinateInsideElement((%@UI@'ModuleName'%.Coordinate*)pData, element)) {
      %'ModuleName'%.PressButton(widget);
    } else if (widget->isPressed) { /* something else is clicked */
      %'ModuleName'%.ReleaseButton(widget);
    }
  } else if (kind==%@UI@'ModuleName'%.MSG_CLICK_RELEASE && widget->isPressed) {
    %'ModuleName'%.ReleaseButton(widget);
%ifdef SetUserMsgHandler
    if (widget->userMsgHandler != NULL){
      widget->userMsgHandler((%@UI@'ModuleName'%.MsgKind)%'ModuleName'_MSG_BUTTON_PRESS, element, pData);%>40/* call user event  */
    }
%endif %- SetUserMsgHandler
  } else if (kind==%@UI@'ModuleName'%.MSG_CLICK_MOVE && widget->isPressed && !%@UI@'ModuleName'%.CoordinateInsideElement((%@UI@'ModuleName'%.Coordinate*)pData, element)) {
    %'ModuleName'%.ReleaseButton(widget);
  }
%ifdef SetUserMsgHandler
  if (widget->userMsgHandler != NULL){
    widget->userMsgHandler(kind, element, pData);                %>40/* call user event  */
  }
%endif %- SetUserMsgHandler
}
%-INTERNAL_METHOD_END MsgHandler
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Paint
%define! Parelement
%define! RetVal
%include Common\GeneralInternal.inc (Paint)
byte %'ModuleName'%.Paint(%'ModuleName'_Element *element)
{
  %'ModuleName'_ButtonWidget *button = (%'ModuleName'_ButtonWidget*)element;
  %@UI@'ModuleName'%.PixelDim w, h;
  %@UI@'ModuleName'%.PixelColor topLineColor, bottomLineColor;

  if (button == NULL) {
    return ERR_FAILED;
  }
  if (element->prop.type != %@UI@'ModuleName'%.WIDGET_BUTTON) {
    return ERR_FAILED;
  }
  w = element->prop.width;
  h = element->prop.height;
  /* draw background */
  %@UI@'ModuleName'%.DrawFilledBox(element,
    (%@UI@'ModuleName'%.PixelDim)(%'ModuleName'%.BUTTON_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(%'ModuleName'%.BUTTON_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(w-(2*%'ModuleName'%.BUTTON_LINE_WIDTH)),
    (%@UI@'ModuleName'%.PixelDim)(h-(2*%'ModuleName'%.BUTTON_LINE_WIDTH)),
    element->prop.color);
  /* draw text */
  if (button->isPressed) {
    button->textWidget.element.prop.y += %'ModuleName'%.BUTTON_PRESS_Y_DELTA; /* in pressed state, text is moved a little bit */
    %@UI@'ModuleName'%.SendMessage(%@UI@'ModuleName'%.MSG_WIDGET_PAINT, &button->textWidget.element, NULL);
    button->textWidget.element.prop.y -= %'ModuleName'%.BUTTON_PRESS_Y_DELTA; /* restore normal state */
  } else {
    %@UI@'ModuleName'%.SendMessage(%@UI@'ModuleName'%.MSG_WIDGET_PAINT, &button->textWidget.element, NULL);
  }
  /* draw shape */
%if ButtonTopColor != ButtonBottomColor
  if (button->isPressed) {
    topLineColor = %@UI@'ModuleName'%.COLOR_%ButtonTopColor;
    bottomLineColor = %@UI@'ModuleName'%.COLOR_%ButtonBottomColor;
  } else {
    topLineColor = %@UI@'ModuleName'%.COLOR_%ButtonBottomColor;
    bottomLineColor = %@UI@'ModuleName'%.COLOR_%ButtonTopColor;
  }
%else
  topLineColor = %@UI@'ModuleName'%.COLOR_%ButtonTopColor;
  bottomLineColor = %@UI@'ModuleName'%.COLOR_%ButtonBottomColor;
%endif
  %@UI@'ModuleName'%.DrawFilledBox(element, 0, 0, w, %'ModuleName'%.BUTTON_LINE_WIDTH, topLineColor);
  %@UI@'ModuleName'%.DrawFilledBox(element,
    0,
    (%@UI@'ModuleName'%.PixelDim)(%'ModuleName'%.BUTTON_LINE_WIDTH),
    %'ModuleName'%.BUTTON_LINE_WIDTH,
    (%@UI@'ModuleName'%.PixelDim)(h-%'ModuleName'%.BUTTON_LINE_WIDTH),
    topLineColor);
  %@UI@'ModuleName'%.DrawFilledBox(element,
    (%@UI@'ModuleName'%.PixelDim)(%'ModuleName'%.BUTTON_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(h-%'ModuleName'%.BUTTON_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(w-%'ModuleName'%.BUTTON_LINE_WIDTH),
    %'ModuleName'%.BUTTON_LINE_WIDTH,
    bottomLineColor);
  %@UI@'ModuleName'%.DrawFilledBox(element,
    (%@UI@'ModuleName'%.PixelDim)(w-%'ModuleName'%.BUTTON_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(%'ModuleName'%.BUTTON_LINE_WIDTH),
    %'ModuleName'%.BUTTON_LINE_WIDTH,
    (%@UI@'ModuleName'%.PixelDim)(h-(2*%'ModuleName'%.BUTTON_LINE_WIDTH)),
    bottomLineColor);
  return ERR_OK;
}

%-INTERNAL_METHOD_END Paint
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
%define! Parbutton
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parparent
%define! RetVal
%include Common\UIButtonCreate.Inc
byte %'ModuleName'%.%Create(%'ModuleName'_Element *parent, %'ModuleName'_ButtonWidget *button, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height)
{
   if (parent == NULL || button == NULL) {
    return ERR_FAILED;
  }
  /* initialize element */
  %@UI@'ModuleName'%.ElementInitCommon(&button->element, %@UI@'ModuleName'%.WIDGET_BUTTON,
    x, y, width, height, %@UI@'ModuleName'%.COLOR_%ButtonBackgroundColor, MsgHandler);
  button->isPressed = FALSE;
%ifdef SetUserMsgHandler
  button->userMsgHandler = NULL;                                 %>40/* can be set by user */
%endif %- SetUserMsgHandler

  /* create textWidget for button text */
  if (%@TextWidget@'ModuleName'%.Create(&button->element, &button->textWidget,
    (%'ModuleName'_PixelDim)(%'ModuleName'%.BUTTON_LINE_WIDTH+%'ModuleName'%.BUTTON_TEXT_BORDER_WIDTH),
    (%'ModuleName'_PixelDim)(%'ModuleName'%.BUTTON_LINE_WIDTH+%'ModuleName'%.BUTTON_TEXT_BORDER_WIDTH),
    0, 0)!=ERR_OK)
  {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.SetFgColor(&button->textWidget, %@UI@'ModuleName'%.COLOR_%DefaultButtonTextForegroundColor)){%>40/* text widget background = button color */
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.SetBgColor(&button->textWidget, %@UI@'ModuleName'%.COLOR_%ButtonBackgroundColor)){%>40/* text widget background = button color */
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.SetText(&button->textWidget, (unsigned char*)"%ButtonText")) {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.Resize(&button->textWidget)) {
    return ERR_FAILED;
  }
  if (width==0 && height==0) {                                   %>40/* auto size */
    if (%'ModuleName'%.%Resize(button)) {
      return ERR_FAILED;
    }
  }

  /* add the widget to the list in the parent */
  if (%@UI@'ModuleName'%.AddSubElement(parent, &button->element) != ERR_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateButton
%ifdef CreateButton
%define! Parparent
%define! Parx
%define! Pary
%define! Partxt
%define! Parhandler
%define! Parwidget
%define! RetVal
%include Common\UIButtonCreateButton.Inc
byte %'ModuleName'%.%CreateButton(%'ModuleName'_Element *parent, %'ModuleName'_ButtonWidget *widget, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, unsigned char *txt, %@UI@'ModuleName'%.MsgHandler handler)
{
  if (%'ModuleName'%.Create(parent, widget, x, y, 0, 0)!=ERR_OK) {
    return ERR_FAILED;
  }
  %'ModuleName'%.SetUserMsgHandler(widget, handler);
  if (%'ModuleName'%.SetText(widget, txt)) {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.SendMessage(%@UI@'ModuleName'%.MSG_WIDGET_RESIZE, &widget->element, NULL);
}

%endif %- CreateButton
%-BW_METHOD_END CreateButton
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG PressButton
%define! Parbutton
%include Common\GeneralInternal.inc (PressButton)
void %'ModuleName'%.PressButton(%'ModuleName'_ButtonWidget *button)
{
  if (!button->isPressed) {
    button->isPressed = TRUE;                                    %>40 /* change button state */
%if %AnimatedButtons='yes'
    button->element.prop.flags |= %@UI@'ModuleName'%.FLAGS_NEEDS_REPAINT;%>40 /* mark element as due for update */
    %@UI@'ModuleName'%.SendMessage(%@UI@'ModuleName'%.MSG_WIDGET_PAINT, &button->element, NULL);%>40/* element needs update */
%endif
  }
}

%-INTERNAL_METHOD_END PressButton
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG ReleaseButton
%define! Parbutton
%include Common\GeneralInternal.inc (ReleaseButton)
void %'ModuleName'%.ReleaseButton(%'ModuleName'_ButtonWidget *button)
{
  if (button->isPressed) {
    button->isPressed = FALSE;                                   %>40 /* change button state */
%if %AnimatedButtons='yes'
    button->element.prop.flags |= %@UI@'ModuleName'%.FLAGS_NEEDS_REPAINT;%>40 /* mark element as due for update */
    %@UI@'ModuleName'%.SendMessage(%@UI@'ModuleName'%.MSG_WIDGET_PAINT, &button->element, NULL);%>40/* element needs update */
%endif
  }
}

%-INTERNAL_METHOD_END ReleaseButton
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
%define! Parbutton
%define! Parhandler
%include Common\UIButtonSetUserMsgHandler.Inc
/*
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_ButtonWidget *button, %@UI@'ModuleName'%.MsgHandler handler)
 ** This method is implemented as macro
*/

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetText
%ifdef SetText
%define! Parwidget
%define! Partxt
%define! RetVal
%include Common\UIButtonSetText.Inc
byte %'ModuleName'%.%SetText(%'ModuleName'_ButtonWidget *widget, unsigned char *txt)
{
  if (widget==NULL || txt==NULL) {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.SetText(&widget->textWidget, txt)!=ERR_OK) {
    return ERR_FAILED;
  }
}

%endif %- SetText
%-BW_METHOD_END SetText
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
%define! Parwidget
%define! RetVal
%include Common\UIButtonResize.Inc
byte %'ModuleName'%.%Resize(%'ModuleName'_ButtonWidget *widget)
{
  if (widget==NULL) {
    return ERR_FAILED;
  }
  widget->element.prop.width = %@UI@'ModuleName'%.GetElementWidth(&widget->textWidget.element)%>40/* width of text */
         + 2*%'ModuleName'%.BUTTON_LINE_WIDTH                    %>40/* left and right button border */
         + 2*%'ModuleName'%.BUTTON_TEXT_BORDER_WIDTH;            %>40/* space border around button text */
  widget->element.prop.height = %@UI@'ModuleName'%.GetElementHeight(&widget->textWidget.element)%>40/* height of text */
          + 2*%'ModuleName'%.BUTTON_LINE_WIDTH                   %>40/* top and lower button border */
          + 2*%'ModuleName'%.BUTTON_TEXT_BORDER_WIDTH            %>40/* space border around button text */
          + %'ModuleName'%.BUTTON_PRESS_Y_DELTA;                 %>40/* needed additional space for the button text in pressed state */
  return ERR_OK;
}

%endif %- Resize
%-BW_METHOD_END Resize
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    03.12.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_WriteCmd Writes a command byte to the display
%define! Description_ReadData 
%define! Description_ReadStatus 
%define! Description_WriteData Writes a data byte to the display
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\OLEDSettings.Inc
%define! Abstract Common\OLEDAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%if %BitsPerPixel='1'
extern byte %'ModuleName'%.DisplayBuf[%Height][((%Width-1)/8)+1]; /* buffer for the display */
%elif %BitsPerPixel='8'
extern byte %'ModuleName'%.DisplayBuf[%Height][%Width]; /* buffer for the display */
%else
extern byte %'ModuleName'%.DisplayBuf[%Height][%Width*((%BitsPerPixel+1)/8)]; /* buffer for the display */
%endif
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
/* definition of the color type which is depending on color depth */

typedef byte %'ModuleName'%.PixelDim; /* one byte is enough to describe an x/y position */
%if %BitsPerPixel='1'
typedef bool %'ModuleName'%.Color;    /* one bit is enough to describe the color as we have a monochrome display */

#define %'ModuleName'%.PIXEL_ON  1 /* value of a pixel if it is 'on' */
#define %'ModuleName'%.PIXEL_OFF 0 /* value of a pixel if it is 'off' */
%elif %BitsPerPixel='8'
typedef byte %'ModuleName'%.Color;    /* one byte is enough to describe the color in 8bit color mode */

#define %'ModuleName'%.PIXEL_ON  0xFF /* value of a pixel if it is 'on' */
#define %'ModuleName'%.PIXEL_OFF 0x00 /* value of a pixel if it is 'off' */
%elif %BitsPerPixel='16'
typedef word %'ModuleName'%.Color;      /* need a word to describe the color information in 65k/16bit color mode */

#define %'ModuleName'%.PIXEL_ON  0xFFFF /* value of a pixel if it is 'on' */
#define %'ModuleName'%.PIXEL_OFF 0x0000 /* value of a pixel if it is 'off' */
%endif
#define %'ModuleName'%.COLOR_BLACK %'ModuleName'%.PIXEL_ON
#define %'ModuleName'%.COLOR_WHITE %'ModuleName'%.PIXEL_OFF
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\OLEDInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-************************************************************************************************************
%-BW_METHOD_BEGIN LoadData
%ifdef LoadData
void %'ModuleName'%.%LoadData(word index, word numBytes, byte *data);
%define! Parindex
%define! ParnumBytes
%define! Pardata
%include Common\OLEDLoadData.Inc

%endif %- LoadData
%-BW_METHOD_END LoadData
%-************************************************************************************************************
%-BW_METHOD_BEGIN Refresh
%ifdef Refresh
void %'ModuleName'%.%Refresh(void);
%include Common\OLEDRefresh.Inc

%endif %- Refresh
%-BW_METHOD_END Refresh
%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\OLEDSettings.Inc
%define! Abstract Common\OLEDAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%if %BitsPerPixel='1'
byte %'ModuleName'%.DisplayBuf[%Height][((%Width-1)/8)+1]; /* buffer for the display */
%elif %BitsPerPixel='8'
byte %'ModuleName'%.DisplayBuf[%Height][%Width]; /* buffer for the display */
%else
byte %'ModuleName'%.DisplayBuf[%Height][%Width*((%BitsPerPixel+1)/8)]; /* buffer for the display */
%endif

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG WriteCmd
static void WriteCmd(byte cmd);
%-INTERNAL_LOC_METHOD_END WriteCmd
%-INTERNAL_LOC_METHOD_BEG ReadData
static byte ReadData(void);
%-INTERNAL_LOC_METHOD_END ReadData
%-INTERNAL_LOC_METHOD_BEG ReadStatus
static byte ReadStatus(byte addr);
%-INTERNAL_LOC_METHOD_END ReadStatus
%-INTERNAL_LOC_METHOD_BEG WriteData
static void WriteData(byte data);
%-INTERNAL_LOC_METHOD_END WriteData
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG WriteCmd
%define! Parcmd
%include Common\GeneralInternalGlobal.inc (WriteCmd)
static void WriteCmd(byte cmd)
{
%if %6800mode='yes'
  %@DCpin@'ModuleName'%.ClrVal(); /* DC low for command mode */
  %@DataPins@'ModuleName'%.SetOutput();
  %@RWpin@'ModuleName'%.ClrVal(); /* RW low for writing */
  %@CSpin@'ModuleName'%.ClrVal(); /* CS low to select device */

  %@DataPins@'ModuleName'%.PutVal(cmd); /* put command on bus */
  %@Epin@'ModuleName'%.SetVal(); /* E high */
  %@Wait@'ModuleName'%.Waitns(40); /* tDSW=40ns: keep data at least for 40 ns */
  %@Epin@'ModuleName'%.ClrVal(); /* E low to transfer data */
  %@Wait@'ModuleName'%.Waitus(5);

  %@CSpin@'ModuleName'%.SetVal(); /* CS high to end cycle */
  %@RWpin@'ModuleName'%.SetVal();
  %@DCpin@'ModuleName'%.SetVal();
%else
  %@DCpin@'ModuleName'%.ClrVal(); /* DC low for command mode */
  %@Wait@'ModuleName'%.Waitus(1);
  %@CSpin@'ModuleName'%.ClrVal(); /* CS low to select device */
  %@Wait@'ModuleName'%.Waitus(1);
  %@RWpin@'ModuleName'%.ClrVal(); /* RW low for writing */
  %@Wait@'ModuleName'%.Waitus(1);
  %@DataPins@'ModuleName'%.PutVal(cmd); /* put command on bus */
  %@Wait@'ModuleName'%.Waitus(1);
  %@Wait@'ModuleName'%.Waitns(40); /* tDSW=40ns: keep data at least for 40 ns */
  %@Wait@'ModuleName'%.Waitus(1);
  %@RWpin@'ModuleName'%.SetVal(); /* RW high */
  %@Wait@'ModuleName'%.Waitus(1);
  %@CSpin@'ModuleName'%.SetVal(); /* CS high to end cycle */
  %@Wait@'ModuleName'%.Waitus(1);
  %@DCpin@'ModuleName'%.SetVal();
%endif
}

%-INTERNAL_METHOD_END WriteCmd
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG ReadData
%define! RetVal
%include Common\GeneralInternalGlobal.inc (ReadData)
static byte ReadData(void)
{
  byte data;
%if %6800mode='yes'
  %@DCpin@'ModuleName'%.SetVal(); /* DC high for data mode */
  %@Wait@'ModuleName'%.Waitus(5);
  %@DataPins@'ModuleName'%.SetInput();
  %@RWpin@'ModuleName'%.SetVal(); /* RW high for reading */
  %@Wait@'ModuleName'%.Waitus(5);
  %@CSpin@'ModuleName'%.ClrVal(); /* CS low to select device */
  %@Wait@'ModuleName'%.Waitus(5);
  %@Epin@'ModuleName'%.SetVal(); /* E high to start data transfer */
  %@Wait@'ModuleName'%.Waitus(5);
  %@Epin@'ModuleName'%.ClrVal(); /* E low to latch in data */
  data = %@DataPins@'ModuleName'%.GetVal(); /* read bus data */
  %@Wait@'ModuleName'%.Waitus(5);
  %@Epin@'ModuleName'%.SetVal(); /* E back to high to finish read cycle */
  %@CSpin@'ModuleName'%.SetVal(); /* CS high to deselect device */
  %@Wait@'ModuleName'%.Waitus(5);
%else
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
%endif
  return data;
}

%-INTERNAL_METHOD_END ReadData
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG ReadStatus
%define! Paraddr
%define! RetVal
%include Common\GeneralInternalGlobal.inc (ReadStatus)
static byte ReadStatus(byte addr)
{
  byte data;
%if %6800mode='yes'
  %@DataPins@'ModuleName'%.SetOutput();
  %@DCpin@'ModuleName'%.ClrVal(); /* DC low for cmd mode */
  %@Wait@'ModuleName'%.Waitus(5);
  %@RWpin@'ModuleName'%.SetVal(); /* RW high for reading */
  %@Wait@'ModuleName'%.Waitus(5);
  %@CSpin@'ModuleName'%.ClrVal(); /* CS low to select device */
  %@Wait@'ModuleName'%.Waitus(5);
  %@Epin@'ModuleName'%.SetVal(); /* E high */
  %@Wait@'ModuleName'%.Waitus(5);

  %@Wait@'ModuleName'%.Waitus(5);
  %@DataPins@'ModuleName'%.PutVal(addr); /* put cmd addr on bus */
  %@Wait@'ModuleName'%.Waitus(5);
  %@Epin@'ModuleName'%.ClrVal(); /* E falling edge to transfer/latch address */
  %@Wait@'ModuleName'%.Waitus(5);

  %@Epin@'ModuleName'%.SetVal(); /* E high */
  %@Wait@'ModuleName'%.Waitus(5);
  %@DataPins@'ModuleName'%.SetInput();
  %@Epin@'ModuleName'%.ClrVal(); /* E falling edge to latch read cycle */
  %@Wait@'ModuleName'%.Waitus(5);

  data = %@DataPins@'ModuleName'%.GetVal(); /* get data */
  %@Wait@'ModuleName'%.Waitus(5);

  %@CSpin@'ModuleName'%.SetVal(); /* CS high to deselect device */
  %@Wait@'ModuleName'%.Waitus(5);
%else
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
%endif
  return data;
}

%-INTERNAL_METHOD_END ReadStatus
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG WriteData
%define! Pardata
%include Common\GeneralInternalGlobal.inc (WriteData)
static void WriteData(byte data)
{
  %@DataPins@'ModuleName'%.SetOutput();
  %@DCpin@'ModuleName'%.SetVal(); /* DC high for data mode */
  %@RWpin@'ModuleName'%.ClrVal(); /* RW low for writing */
  %@CSpin@'ModuleName'%.ClrVal(); /* CS low to select device */
  %@Epin@'ModuleName'%.SetVal();  /* starting E pulse */
  %@DataPins@'ModuleName'%.PutVal(data); /* put command on bus */
//  %@Wait@'ModuleName'%.Waitns(40);/* data needs to be valid at least 40 ns (tDSW=40ns) in write mode */
  %@Wait@'ModuleName'%.Waitns(60);/* E needs to be high at least 40 ns (PWcsh=60ns) in write mode */
  %@Epin@'ModuleName'%.ClrVal();  /* finishing E pulse */
  %@CSpin@'ModuleName'%.SetVal(); /* CS high to end cycle */
  %@RWpin@'ModuleName'%.SetVal(); /* RW high back for reading mode */
  %@Wait@'ModuleName'%.Waitns(130-60);/* tcycle=130ns, but we spend at least already tDSW=40ns and PWcsh=60ns */
#if 0
  DCpin1_ClrVal(); /* DC low for command mode */
  CSpin1_ClrVal(); /* CS low to select device */
  RWpin1_ClrVal(); /* RW low for writing */
  DataPins1_PutVal(cmd); /* put command on bus */
  RWpin1_SetVal(); /* RW high */
  CSpin1_SetVal(); /* CS high to end cycle */
#endif
}

%-INTERNAL_METHOD_END WriteData
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\OLEDInit.Inc
void %'ModuleName'%.%Init(void)
{
  %@DataPins@'ModuleName'%.SetOutput();
  /* now configure registers */
  %@DataPins@'ModuleName'%.PutVal(0); /* data=0 */
%if defined(BS1pin)
  %@BS1pin@'ModuleName'%.SetVal(); /* BS1 high */
%endif
%if defined(BS2pin)
  %@BS2pin@'ModuleName'%.SetVal(); /* BS2 high */
%endif
  %@RESpin@'ModuleName'%.SetVal(); /* RES high */
  %@CSpin@'ModuleName'%.SetVal(); /* CS high */
  %@Epin@'ModuleName'%.SetVal(); /* E high */
  %@DCpin@'ModuleName'%.ClrVal(); /* DC low */
  %@RWpin@'ModuleName'%.ClrVal(); /* RW low */
  /* now Reset_SSD1332: */
  %@RESpin@'ModuleName'%.ClrVal(); /* RES low */
  %@Wait@'ModuleName'%.Waitms(100); /* wait 10 ms */
  %@RESpin@'ModuleName'%.SetVal(); /* RES high */

/* BEGIN TEST TEST */

  WriteCmd(0xAF); /* display on */
  WriteCmd(0xA4); /* normal display */
  WriteCmd(0xA5); /* entire display on */
  WriteCmd(0xA6); /* entire display off */
  WriteCmd(0xA7); /* inverse display */
{
  volatile byte data;

  data = ReadData();
  data = ReadStatus(0x81);
}
/* end TEST TEST */

  WriteCmd(0xAE); /* display off */
  WriteCmd(0xA0); /* set Re-Map/Color depth ... */
  WriteCmd(0x70); /* ... 65K, 8bit and B->G->R */
  WriteCmd(0xA1); /* display start line ... */
  WriteCmd(0x00); /* ... 0 */
  WriteCmd(0xA2); /* display offset ... */
  WriteCmd(0x00); /* ... 0 */
  WriteCmd(0xB0); /* power saving mode ... */
  WriteCmd(0x00); /* ... normal mode */
  WriteCmd(0x87); /* set master contrast ... */
  WriteCmd(0x0F); /* ... no change */
  WriteCmd(0xA8); /* set duty ... */
  WriteCmd(0x3F); /* ... 63+1 */
  WriteCmd(0x81); /* set contrast A ... */
  WriteCmd(0x3C);
  WriteCmd(0x82); /* set contrast B ... */
  WriteCmd(0x37);
  WriteCmd(0x83); /* set contrast C ... */
  WriteCmd(0x73);
  WriteCmd(0xBB); /* set Vpa ... */
  WriteCmd(0x12);
  WriteCmd(0xBC); /* set Vpb ... */
  WriteCmd(0x13);
  WriteCmd(0xBD); /* set Vpc ... */
  WriteCmd(0x14);
  WriteCmd(0xBE); /* set VcomH ... */
  WriteCmd(0x46);
  WriteCmd(0xAD); /* set master config ... */
  WriteCmd(0x8C); /* VcomH external */
  WriteCmd(0xB1); /* set precharge... */
  WriteCmd(0x1F);
  WriteCmd(0x81); /* set contrast current for A */
  WriteCmd(0xC3); /* color A */
  WriteCmd(0x82); /* set contrast current for B */
  WriteCmd(0x82); /* color B */
  WriteCmd(0x83); /* set contrast current for C */
  WriteCmd(0xB3); /* color C */
  WriteCmd(0xB3); /* clock and frequency */
  WriteCmd(0xF0); /* clock = divser+1 frequency=fh */
  WriteCmd(0xAF); /* display on */
  /* now clear RAM */

  /* display on */

  /* now start sending data */
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN LoadData
%ifdef LoadData
%define! Parindex
%define! ParnumBytes
%define! Pardata
%include Common\OLEDLoadData.Inc
void %'ModuleName'%.%LoadData(word index, word numBytes, byte *data)
{
%if %BitsPerPixel='1'
    byte i;
    byte val;
    #define BLACK 0
    #define WHITE 0xff
%endif

  (void)index; /* index support NYI */
  while(numBytes>0) {
%if %BitsPerPixel='1'
    val = *data;
    for(i=0;i<7;i++) {
      if(val&0x80) {
        WriteData(BLACK);
      } else {
        WriteData(WHITE);
      }
      val<<=1; /* next bit */
    }
%elif %BitsPerPixel='8'
  %if %NofColors='256' %- write one byte
    WriteData(*data);
  %elif %NofColors='65k' %- write two bytes
    WriteData(*data);
    WriteData(*data);
  %endif
%elif %BitsPerPixel='16'
    WriteData(*data);
%endif
    data--;
  }
}

%endif %- LoadData
%-BW_METHOD_END LoadData
%-************************************************************************************************************
%-BW_METHOD_BEGIN Refresh
%ifdef Refresh
%include Common\OLEDRefresh.Inc
void %'ModuleName'%.%Refresh(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- Refresh
%-BW_METHOD_END Refresh
%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
//  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

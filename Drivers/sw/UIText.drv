%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Paint Paints the text to the screen
%define! Description_MsgHandler Widget default message handler
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UITextSettings.Inc
%define! Abstract Common\UITextAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

typedef %@UI@'ModuleName'%.PixelColor                            %>30 %'ModuleName'%.PixelColor;       %>55/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim                              %>30 %'ModuleName'%.PixelDim;         %>55/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Screen                                %>30 %'ModuleName'%.Screen;           %>55/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Element                               %>30 %'ModuleName'%.Element;          %>55/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.MsgKind                               %>30 %'ModuleName'%.MsgKind;          %>55/* Alias to UserInterface type */
typedef %@FontDisplay@'ModuleName'%.Font                         %>30 %'ModuleName'%.Font;             %>55/* Callback to retrieve font information. */
typedef %@UI@'ModuleName'%.Pvoid                                 %>30 %'ModuleName'%.Pvoid;            %>55/* Alias to Pvoid data type */
typedef %@UI@'ModuleName'%.painterCallback                       %>30 %'ModuleName'%.painterCallback;  %>55/* Alias to UserInterface type */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_Pvoid
#define __BWUserType_%'ModuleName'_Pvoid
                                                                 %>40/* Pointer to void */
#endif
#ifndef __BWUserType_%'ModuleName'_PFont
#define __BWUserType_%'ModuleName'_PFont
  typedef %@UI@'ModuleName'%.FontCallbacks *%'ModuleName'%.PFont;%>40/* Pointer to font */
#endif
#ifndef __BWUserType_%'ModuleName'_PText
#define __BWUserType_%'ModuleName'_PText
  typedef unsigned char *%'ModuleName'%.PText;                   %>40/* Alias for pointer to text string. */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
typedef struct {                                                 %>40/* Structure to describe a simple text helper for drawing text */
  unsigned char *text;                                           %>40/* Pointer to the text itself */
  %@FontDisplay@'ModuleName'%.Font *font;                        %>40/* Font callbacks to be used for the text */
  %@UI@'ModuleName'%.PixelColor txtColor;                        %>40/* foreground color of text */
} %'ModuleName'_TextInfo;

/* --- Element: Text widget --- */
typedef struct {                                                 %>40/* element showing static text */
  %'ModuleName'_Element element;                                 %>40/* the base element, always first in structure */
%ifdef SetUserMsgHandler
  %@UI@'ModuleName'%.MsgHandler userMsgHandler;                  %>40/* optional user handler */
%endif %- SetUserMsgHandler
  %'ModuleName'_TextInfo textInfo;                               %>40/* Information describing the text. Must be right after element */
} %'ModuleName'_TextWidget;

#define %'ModuleName'_DEFAULT_TEXT_TEXT     "%DefaultText" /* default text from properties */
#define %'ModuleName'_DEFAULT_TEXT_FG_COLOR %@UI@'ModuleName'%.COLOR_%DefaultTextTextForegroundColor /* default text foreground color from properties */
#define %'ModuleName'_DEFAULT_TEXT_BG_COLOR %@UI@'ModuleName'%.COLOR_%DefaultTextTextBackgroundColor /* default text foreground color from properties */

%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
byte %'ModuleName'%.%Create(%'ModuleName'_Element *parent, %'ModuleName'_TextWidget *txtw, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height);
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Partxtw
%define! Parparent
%define! RetVal
%include Common\UITextCreate.Inc

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-************************************************************************************************************
%-BW_METHOD_BEGIN ChangeText
%ifdef ChangeText
byte %'ModuleName'%.%ChangeText(%'ModuleName'_TextWidget *txtw, word dstTextSize, unsigned char *txt);
%define! PardstTextSize
%define! Partxt
%define! Partxtw
%define! RetVal
%include Common\UITextChangeText.Inc

%endif %- ChangeText
%-BW_METHOD_END ChangeText
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetText
%ifdef SetText
byte %'ModuleName'%.%SetText(%'ModuleName'_TextWidget *txtw, unsigned char *txt);
%define! Partxt
%define! ParTextElement
%define! Partxtw
%define! RetVal
%include Common\UITextSetText.Inc

%endif %- SetText
%-BW_METHOD_END SetText
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetFgColor
%ifdef SetFgColor
byte %'ModuleName'%.%SetFgColor(%'ModuleName'_TextWidget *txtw, %'ModuleName'_PixelColor fgColor);
%define! ParfgColor
%define! Partxtw
%define! RetVal
%include Common\UITextSetFgColor.Inc

%endif %- SetFgColor
%-BW_METHOD_END SetFgColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetBgColor
%ifdef SetBgColor
byte %'ModuleName'%.%SetBgColor(%'ModuleName'_TextWidget *txtw, %'ModuleName'_PixelColor bgColor);
%define! ParbgColor
%define! Partxtw
%define! RetVal
%include Common\UITextSetBgColor.Inc

%endif %- SetBgColor
%-BW_METHOD_END SetBgColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
#define %'ModuleName'%.%SetUserMsgHandler(textW, handler) \
  (textW)->userMsgHandler = handler

%define! Parbutton
%define! PartextW
%define! Parhandler
%include Common\UIButtonSetUserMsgHandler.Inc

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetFont
%ifdef SetFont
byte %'ModuleName'%.%SetFont(%'ModuleName'_TextWidget *widget, %'ModuleName'_Font *font);
%define! Parwidget
%define! Parfont
%define! RetVal
%include Common\UITextSetFont.Inc

%endif %- SetFont
%-BW_METHOD_END SetFont
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
byte %'ModuleName'%.%Resize(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextResize.Inc

%endif %- Resize
%-BW_METHOD_END Resize
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetText
%ifdef GetText
%'ModuleName'_PText %'ModuleName'%.%GetText(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextGetText.Inc

%endif %- GetText
%-BW_METHOD_END GetText
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetFont
%ifdef GetFont
%'ModuleName'_PFont %'ModuleName'%.%GetFont(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextGetFont.Inc

%endif %- GetFont
%-BW_METHOD_END GetFont
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTextBoxWidth
%ifdef GetTextBoxWidth
%'ModuleName'_PixelDim %'ModuleName'%.%GetTextBoxWidth(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextGetTextBoxWidth.Inc

%endif %- GetTextBoxWidth
%-BW_METHOD_END GetTextBoxWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTextBoxHeight
%ifdef GetTextBoxHeight
%'ModuleName'_PixelDim %'ModuleName'%.%GetTextBoxHeight(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextGetTextBoxHeight.Inc

%endif %- GetTextBoxHeight
%-BW_METHOD_END GetTextBoxHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetFontHeight
%ifdef GetFontHeight
%'ModuleName'_PixelDim %'ModuleName'%.%GetFontHeight(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextGetFontHeight.Inc

%endif %- GetFontHeight
%-BW_METHOD_END GetFontHeight
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UITextSettings.Inc
%define! Abstract Common\UITextAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG Paint
static byte Paint(%'ModuleName'_Element *element);
%-INTERNAL_LOC_METHOD_END Paint
%-INTERNAL_LOC_METHOD_BEG MsgHandler
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData);
%-INTERNAL_LOC_METHOD_END MsgHandler
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Paint
%define! Parelement
%define! RetVal
%include Common\GeneralInternalGlobal.inc (Paint)
static byte Paint(%'ModuleName'_Element *element)
{
  %'ModuleName'_TextInfo *textInfo = &((%'ModuleName'_TextWidget*)element)->textInfo;
  %'ModuleName'_PixelDim x, y;
  %'ModuleName'_PixelColor fgColor, bgColor;

  fgColor = textInfo->txtColor;
  bgColor = element->prop.color;
  if (element->prop.flags&%@UI@'ModuleName'%.FLAGS_IS_SELECTED) {%>40/* invert colors */
    %'ModuleName'_PixelColor tmp;

    tmp = fgColor; fgColor = bgColor; bgColor = tmp;
  }
  /* draw background */
  %@UI@'ModuleName'%.DrawFilledBox(element, 0, 0,
       element->prop.width, element->prop.height, bgColor);
  /* now write text */
  x = (%'ModuleName'_PixelDim)(%@UI@'ModuleName'%.GetScreenPosX(element));
  y = (%'ModuleName'_PixelDim)(%@UI@'ModuleName'%.GetScreenPosY(element));
  %@FontDisplay@'ModuleName'%.WriteString(textInfo->text,
    fgColor,
    &x, &y,
    textInfo->font
  );
  return ERR_OK;
}

%-INTERNAL_METHOD_END Paint
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG MsgHandler
%define! Parkind
%define! ParpData
%define! Parelement
%include Common\GeneralInternalGlobal.inc (MsgHandler)
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData)
{
  %'ModuleName'_TextWidget *widget = (%'ModuleName'_TextWidget*)element;

  if (kind==%@UI@'ModuleName'%.MSG_WIDGET_PAINT) {
    (void)Paint(element);
  } else if (kind==%@UI@'ModuleName'%.MSG_WIDGET_RESIZE) {
    (void)%'ModuleName'%.%Resize(widget);
  }
%ifdef SetUserMsgHandler
  if (widget->userMsgHandler != NULL){
    widget->userMsgHandler(kind, element, pData);                %>40/* call user event  */
  }
%else
  (void)pData; /* avoid warning about unused argument */
%endif
}

%-INTERNAL_METHOD_END MsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Partxtw
%define! Parparent
%define! RetVal
%include Common\UITextCreate.Inc
byte %'ModuleName'%.%Create(%'ModuleName'_Element *parent, %'ModuleName'_TextWidget *txtw, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height)
{
  %@FontDisplay@'ModuleName'%.Font *font;

  if (txtw == NULL) {
    return ERR_FAILED;
  }
  font = %@Font@'ModuleName'%.GetFont(); /* font defined in user properties */
  if (width == 0) {                                              %>40/* auto size */
    width = %@FontDisplay@'ModuleName'%.GetStringWidth((unsigned char*)%'ModuleName'_DEFAULT_TEXT_TEXT, font, NULL);
  }
  if (height == 0) {                                             %>40/* auto size */
    height = %@FontDisplay@'ModuleName'%.GetStringHeight((unsigned char*)%'ModuleName'_DEFAULT_TEXT_TEXT, font, NULL);
  }
  %@UI@'ModuleName'%.ElementInitCommon(&txtw->element, %@UI@'ModuleName'%.WIDGET_TEXT,
    x, y, width, height, %'ModuleName'_DEFAULT_TEXT_BG_COLOR, MsgHandler);
%ifdef SetUserMsgHandler
  txtw->userMsgHandler = NULL;                                   %>40/* needs to be set by user */
%endif %- SetUserMsgHandler
  txtw->textInfo.text = (unsigned char*)%'ModuleName'_DEFAULT_TEXT_TEXT;
  txtw->textInfo.font = font;
  txtw->textInfo.txtColor = %'ModuleName'_DEFAULT_TEXT_FG_COLOR;
  if (parent!=NULL && %@UI@'ModuleName'%.AddSubElement(parent, &txtw->element)!=ERR_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}
%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN ChangeText
%ifdef ChangeText
%define! PardstTextSize
%define! Partxt
%define! Partxtw
%define! RetVal
%include Common\UITextChangeText.Inc
byte %'ModuleName'%.%ChangeText(%'ModuleName'_TextWidget *txtw, word dstTextSize, unsigned char *txt)
{
  %'ModuleName'_PixelDim x, y, leftPos, xCursor, yCursor;
  %'ModuleName'_TextInfo *textInfo;
  unsigned char *p, *q;
  %'ModuleName'_PixelDim width, totalWidth;
  %'ModuleName'_PixelDim height, totalHeight;
  %'ModuleName'_PixelColor drawColor, clrColor;
  %@FontDisplay@'ModuleName'%.Font *font;

  if (txtw == NULL || txtw->element.prop.type != %@UI@'ModuleName'%.WIDGET_TEXT) {
    return ERR_FAILED; /* error! */
  }
  textInfo = &txtw->textInfo;                                    %>40/* the textInfo is just after the element */
  font = textInfo->font;
  if (%@UI@'ModuleName'%.GetElementAbsolutePos(&txtw->element, &x, &y)!=ERR_OK) {
    return ERR_FAILED;
  }
  leftPos = x; /* position on the left side of the text box */
  xCursor = x; yCursor = y;
  %@FontDisplay@'ModuleName'%.GetFontHeight(font, &height, &totalHeight);
  /* determine color to clear text and color to draw text */
%if SelectionEnabled='yes'
  if (txtw->element.prop.flags&%@UI@'ModuleName'%.FLAGS_IS_SELECTED) {
    drawColor = txtw->element.prop.color;
    clrColor = textInfo->txtColor;
  } else {
    drawColor = textInfo->txtColor;
    clrColor = txtw->element.prop.color;
  }
%else
  drawColor = %@UI@'ModuleName'%.COLOR_%DefaultTextTextForegroundColor;
  clrColor = txtw->element.prop.color;
%endif
  /* iterate through the two strings and compare them. Need to care about '\n' too. Note that we do not handle '\r' 100%% correctly :-(. */
  p = textInfo->text;
  q = txt;
  for (;;) {                                                     %>40/* skip text which is the same, will break */
    if (*p=='\n' && *q=='\n') {                                  %>40/* new line */
      x = leftPos;
      y += totalHeight;
      p++; q++;                                                  %>40/* move on */
    } else if (*p=='\0' && *q=='\0') {
      break; /* done */
    } else if (*p==*q) {                                         %>40/* same character: do not change, only update position */
      %@FontDisplay@'ModuleName'%.GetCharWidth(*p, &width, &totalWidth, font);
      x += totalWidth;
      p++; q++;                                                  %>40/* move on */
    } else if (*q=='\0') { /* new text is at its end */
      /* clear existing remaining text */
      xCursor = x; yCursor = y;
      if (*p=='\n') {
        xCursor = leftPos;
      }
      %@FontDisplay@'ModuleName'%.WriteString(p, clrColor, &xCursor, &yCursor, font);
      break; /* done */
    } else if (*p=='\0') { /* existing text is at its end */
      /* write new text */
      xCursor = x; yCursor = y;
      if (*q=='\n') {
        xCursor = leftPos;
      }
      %@FontDisplay@'ModuleName'%.WriteString(q, drawColor, &xCursor, &yCursor, font);
      break; /* done */
    } else {                                                     %>40/* mismatch, new character is different: update until new line */
      /* first re-draw text using the background color to make it disappear */
      xCursor = x; yCursor = y;
      while(*p!='\0' && *p!='\n') {
        %@FontDisplay@'ModuleName'%.WriteChar(*p, clrColor, &xCursor, &yCursor, font);
        p++;
      }
      xCursor = x; yCursor = y;
      while(*q!='\0' && *q!='\n') {
        %@FontDisplay@'ModuleName'%.WriteChar(*q, drawColor, &xCursor, &yCursor, font);
        q++;
      }
    }
  } /* for */
  /* now update element with the new text */
  %@Utility@'ModuleName'%.strcpy(textInfo->text, dstTextSize, txt);%>40 /* set new text */
  return ERR_OK;
}

%endif %- ChangeText
%-BW_METHOD_END ChangeText
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetText
%ifdef SetText
%define! Partxt
%define! ParTextElement
%define! Partxtw
%define! RetVal
%include Common\UITextSetText.Inc
byte %'ModuleName'%.%SetText(%'ModuleName'_TextWidget *txtw, unsigned char *txt)
{
  if (txtw == NULL || (txtw->element.prop.type != %@UI@'ModuleName'%.WIDGET_TEXT)) {
    return ERR_FAILED; /* error! */
  }
  txtw->textInfo.text = txt;
  return ERR_OK;
}
%endif %- SetText
%-BW_METHOD_END SetText
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetFgColor
%ifdef SetFgColor
%define! ParfgColor
%define! Partxtw
%define! RetVal
%include Common\UITextSetFgColor.Inc
byte %'ModuleName'%.%SetFgColor(%'ModuleName'_TextWidget *txtw, %'ModuleName'_PixelColor fgColor)
{
  if (txtw == NULL) {
    return ERR_FAILED;
  }
  txtw->textInfo.txtColor = fgColor;
  return ERR_OK;
}

%endif %- SetFgColor
%-BW_METHOD_END SetFgColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetBgColor
%ifdef SetBgColor
%define! ParbgColor
%define! Partxtw
%define! RetVal
%include Common\UITextSetBgColor.Inc
byte %'ModuleName'%.%SetBgColor(%'ModuleName'_TextWidget *txtw, %'ModuleName'_PixelColor bgColor)
{
  if (txtw == NULL) {
    return ERR_FAILED;
  }
  txtw->element.prop.color = bgColor;
  return ERR_OK;
}

%endif %- SetBgColor
%-BW_METHOD_END SetBgColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
%define! PartextW
%define! Parhandler
%include Common\UITextSetUserMsgHandler.Inc
/*
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_TextWidget *textW, %@UI@'ModuleName'%.MsgHandler handler)
 ** This method is implemented as macro
*/

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetFont
%ifdef SetFont
%define! Parwidget
%define! Parfont
%define! RetVal
%include Common\UITextSetFont.Inc
byte %'ModuleName'%.%SetFont(%'ModuleName'_TextWidget *widget, %'ModuleName'_Font *font)
{
  if (widget==NULL) {
    return ERR_FAILED;
  }
  widget->textInfo.font = font;
  widget->element.prop.width = %@FontDisplay@'ModuleName'%.GetStringWidth(widget->textInfo.text, font, NULL);
  widget->element.prop.height = %@FontDisplay@'ModuleName'%.GetStringHeight(widget->textInfo.text, font, NULL);
  return ERR_OK;
}

%endif %- SetFont
%-BW_METHOD_END SetFont
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
%define! Parwidget
%define! RetVal
%include Common\UITextResize.Inc
byte %'ModuleName'%.%Resize(%'ModuleName'_TextWidget *widget)
{
  if (widget==NULL) {
    return ERR_FAILED;
  }
  widget->element.prop.width = %@FontDisplay@'ModuleName'%.GetStringWidth(widget->textInfo.text, widget->textInfo.font, NULL);
  widget->element.prop.height = %@FontDisplay@'ModuleName'%.GetStringHeight(widget->textInfo.text, widget->textInfo.font, NULL);
  return ERR_OK;
}

%endif %- Resize
%-BW_METHOD_END Resize
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetText
%ifdef GetText
%define! Parwidget
%define! RetVal
%include Common\UITextGetText.Inc
%'ModuleName'_PText %'ModuleName'%.%GetText(%'ModuleName'_TextWidget *widget)
{
  if (widget==NULL) {
    return NULL;
  }
  return widget->textInfo.text;
}

%endif %- GetText
%-BW_METHOD_END GetText
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetFont
%ifdef GetFont
%define! Parwidget
%define! RetVal
%include Common\UITextGetFont.Inc
%'ModuleName'_PFont %'ModuleName'%.%GetFont(%'ModuleName'_TextWidget *widget)
{
  if (widget==NULL) {
    return NULL;
  }
  return widget->textInfo.font;
}

%endif %- GetFont
%-BW_METHOD_END GetFont
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTextBoxWidth
%ifdef GetTextBoxWidth
%define! Parwidget
%define! RetVal
%include Common\UITextGetTextBoxWidth.Inc
%'ModuleName'_PixelDim %'ModuleName'%.%GetTextBoxWidth(%'ModuleName'_TextWidget *widget)
{
  return %@FontDisplay@'ModuleName'%.GetStringWidth(%'ModuleName'%.%GetText(widget), %'ModuleName'%.%GetFont(widget), NULL);
}

%endif %- GetTextBoxWidth
%-BW_METHOD_END GetTextBoxWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTextBoxHeight
%ifdef GetTextBoxHeight
%define! Parwidget
%define! RetVal
%include Common\UITextGetTextBoxHeight.Inc
%'ModuleName'_PixelDim %'ModuleName'%.%GetTextBoxHeight(%'ModuleName'_TextWidget *widget)
{
  return %@FontDisplay@'ModuleName'%.GetStringHeight(%'ModuleName'%.%GetText(widget), %'ModuleName'%.%GetFont(widget), NULL);
}

%endif %- GetTextBoxHeight
%-BW_METHOD_END GetTextBoxHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetFontHeight
%ifdef GetFontHeight
%define! Parwidget
%define! RetVal
%include Common\UITextGetFontHeight.Inc
%'ModuleName'_PixelDim %'ModuleName'%.%GetFontHeight(%'ModuleName'_TextWidget *widget)
{
  %@UI@'ModuleName'%.PixelDim charHeight, totalHeight;

  %@FontDisplay@'ModuleName'%.GetFontHeight(%'ModuleName'%.%GetFont(widget), &charHeight, &totalHeight);
  return charHeight;
}

%endif %- GetFontHeight
%-BW_METHOD_END GetFontHeight
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

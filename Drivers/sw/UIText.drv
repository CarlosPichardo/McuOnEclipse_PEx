%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UITextSettings.Inc
%define! Abstract Common\UITextAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited components */
#include "%@UI@ModuleName.h"
#include "%@FontDisplay@ModuleName.h"
#include "%@Utility@ModuleName.h"

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
typedef %@UI@'ModuleName'%.PixelDim                              %>30 %'ModuleName'%.PixelDim;         %>55/* wrapper type */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_Pvoid
#define __BWUserType_%'ModuleName'_Pvoid
                                                                 %>40/* Pointer to void */
#endif
#ifndef __BWUserType_%'ModuleName'_PFont
#define __BWUserType_%'ModuleName'_PFont
  typedef %@UI@'ModuleName'%.FontCallbacks *%'ModuleName'%.PFont;%>40/* Pointer to font */
#endif
#ifndef __BWUserType_%'ModuleName'_PText
#define __BWUserType_%'ModuleName'_PText
  typedef unsigned char *%'ModuleName'%.PText;                   %>40/* Alias for pointer to text string. */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
typedef struct {                                                 %>40/* Structure to describe a simple text helper for drawing text */
  unsigned char *text;                                           %>40/* Pointer to the text itself */
  %@FontDisplay@'ModuleName'%.Font *font;                        %>40/* Font callbacks to be used for the text */
  %@UI@'ModuleName'%.PixelColor fgColor;                         %>40/* foreground color of text */
  %@UI@'ModuleName'%.PixelColor bgColor;                         %>40/* background color of text */
} %'ModuleName'_TextInfo;

/* --- Element: Text widget --- */
typedef struct {                                                 %>40/* element showing static text */
  %@UI@'ModuleName'%.Element element;                            %>40/* the base element, always first in structure */
  %'ModuleName'_TextInfo textInfo;                               %>40/* Information describing the text */
#if %'ModuleName'%.CONFIG_TEXT_HAS_USER_MSG_HANDLER
  %@UI@'ModuleName'%.MsgHandler userMsgHandler;                  %>40/* optional user handler */
#endif
} %'ModuleName'_TextWidget;

%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
uint8_t %'ModuleName'%.%Create(%@UI@'ModuleName'%.Element *parent, %'ModuleName'_TextWidget *txtw, %@UI@'ModuleName'%.PixelDim x, %@UI@'ModuleName'%.PixelDim y, %@UI@'ModuleName'%.PixelDim width, %@UI@'ModuleName'%.PixelDim height);
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Partxtw
%define! Parparent
%define! RetVal
%include Common\UITextCreate.Inc

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN ChangeText
%ifdef ChangeText
uint8_t %'ModuleName'%.%ChangeText(%'ModuleName'_TextWidget *txtw, uint16_t dstTextSize, unsigned char *txt);
%define! PardstTextSize
%define! Partxt
%define! Partxtw
%define! RetVal
%include Common\UITextChangeText.Inc

%endif %- ChangeText
%-BW_METHOD_END ChangeText
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetText
%ifdef SetText
uint8_t %'ModuleName'%.%SetText(%'ModuleName'_TextWidget *txtw, unsigned char *txt);
%define! Partxt
%define! ParTextElement
%define! Partxtw
%define! RetVal
%include Common\UITextSetText.Inc

%endif %- SetText
%-BW_METHOD_END SetText
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetForegroundColor
%ifdef SetForegroundColor
void %'ModuleName'%.%SetForegroundColor(%'ModuleName'_TextWidget *txtw, %@UI@'ModuleName'%.PixelColor color);
%define! ParfgColor
%define! Partxtw
%include Common\UITextSetForegroundColor.Inc

%endif %- SetForegroundColor
%-BW_METHOD_END SetForegroundColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetBackgroundColor
%ifdef SetBackgroundColor
void %'ModuleName'%.%SetBackgroundColor(%'ModuleName'_TextWidget *txtw, %@UI@'ModuleName'%.PixelColor color);
%define! ParbgColor
%define! Partxtw
%include Common\UITextSetBackgroundColor.Inc

%endif %- SetBackgroundColor
%-BW_METHOD_END SetBackgroundColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_TextWidget *textW, %@UI@'ModuleName'%.MsgHandler handler);

%define! Parbutton
%define! PartextW
%define! Parhandler
%include Common\UIButtonSetUserMsgHandler.Inc

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetFont
%ifdef SetFont
uint8_t %'ModuleName'%.%SetFont(%'ModuleName'_TextWidget *widget, %@FontDisplay@'ModuleName'%.Font *font);
%define! Parwidget
%define! Parfont
%define! RetVal
%include Common\UITextSetFont.Inc

%endif %- SetFont
%-BW_METHOD_END SetFont
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
uint8_t %'ModuleName'%.%Resize(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextResize.Inc

%endif %- Resize
%-BW_METHOD_END Resize
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetText
%ifdef GetText
%'ModuleName'_PText %'ModuleName'%.%GetText(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextGetText.Inc

%endif %- GetText
%-BW_METHOD_END GetText
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetFont
%ifdef GetFont
%'ModuleName'_PFont %'ModuleName'%.%GetFont(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextGetFont.Inc

%endif %- GetFont
%-BW_METHOD_END GetFont
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTextBoxWidth
%ifdef GetTextBoxWidth
%'ModuleName'_PixelDim %'ModuleName'%.%GetTextBoxWidth(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextGetTextBoxWidth.Inc

%endif %- GetTextBoxWidth
%-BW_METHOD_END GetTextBoxWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTextBoxHeight
%ifdef GetTextBoxHeight
%'ModuleName'_PixelDim %'ModuleName'%.%GetTextBoxHeight(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextGetTextBoxHeight.Inc

%endif %- GetTextBoxHeight
%-BW_METHOD_END GetTextBoxHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetFontHeight
%ifdef GetFontHeight
%'ModuleName'_PixelDim %'ModuleName'%.%GetFontHeight(%'ModuleName'_TextWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UITextGetFontHeight.Inc

%endif %- GetFontHeight
%-BW_METHOD_END GetFontHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN Paint
%ifdef Paint
void %'ModuleName'%.%Paint(%'ModuleName'_TextWidget *text);
%define! Partext
%include Common\UITextPaint.Inc

%endif %- Paint
%-BW_METHOD_END Paint
%-************************************************************************************************************
%-BW_METHOD_BEGIN MessageHandler
%ifdef MessageHandler
void %'ModuleName'%.%MessageHandler(%@UI@'ModuleName'%.Element *element, %@UI@'ModuleName'%.MsgKind kind, void *pData);
%define! Parelement
%define! Parkind
%define! ParpData
%include Common\UITextMessageHandler.Inc

%endif %- MessageHandler
%-BW_METHOD_END MessageHandler
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UITextSettings.Inc
%define! Abstract Common\UITextAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Paint
%ifdef Paint
%define! Partext
%include Common\UITextPaint.Inc
void %'ModuleName'%.%Paint(%'ModuleName'_TextWidget *text)
{
  %@UI@'ModuleName'%.PixelDim x, y, xp, yp;
  %@UI@'ModuleName'%.PixelColor fgColor, bgColor;

  fgColor = text->textInfo.fgColor;
  bgColor = text->textInfo.bgColor;
#if %@UI@'ModuleName'%.CONFIG_SELECTION_ENABLED
  if (text->element.prop.flags&%@UI@'ModuleName'%.FLAGS_IS_SELECTED) {%>40/* invert colors */
    %@UI@'ModuleName'%.PixelColor tmp;

    tmp = fgColor; fgColor = bgColor; bgColor = tmp;
  }
#endif
  /* draw background */
  %@UI@'ModuleName'%.DrawFilledBox(text->element.parent,
    text->element.prop.x, text->element.prop.y,
    text->element.prop.width, text->element.prop.height,
    bgColor);
  /* write text */
  x = text->element.prop.x;
  y = text->element.prop.y;
  if (%@UI@'ModuleName'%.GetElementAbsolutePos(text->element.parent, &xp, &yp)==ERR_OK) {
    x += xp;
    y += yp;
  }
  %@FontDisplay@'ModuleName'%.WriteString(text->textInfo.text,
    fgColor,
    &x, &y,
    text->textInfo.font
  );
}

%endif %- Paint
%-BW_METHOD_END Paint
%-************************************************************************************************************
%-BW_METHOD_BEGIN MessageHandler
%ifdef MessageHandler
%define! Parkind
%define! ParpData
%define! Parelement
%include Common\UITextMessageHandler.Inc
void %'ModuleName'%.%MessageHandler(%@UI@'ModuleName'%.Element *element, %@UI@'ModuleName'%.MsgKind kind, void *pData)
{
  %'ModuleName'_TextWidget *widget = (%'ModuleName'_TextWidget*)element;

  if (widget==NULL || widget->element.prop.type!=%@UI@'ModuleName'%.WIDGET_TEXT) {
    return; /* not a text widget */
  }
  switch(kind) {
    case %@UI@'ModuleName'%.MSG_WIDGET_PAINT:
      %'ModuleName'%.%Paint(widget);
      break;
    case %@UI@'ModuleName'%.MSG_WIDGET_RESIZE:
      (void)%'ModuleName'%.%Resize(widget);
      break;
    default:
      break;
  } /* switch */
#if %'ModuleName'%.CONFIG_WINDOW_HAS_USER_MSG_HANDLER
  if (widget->userMsgHandler != NULL){
    widget->userMsgHandler(element, kind, pData);                %>40/* call user event  */
  }
#else
  (void)pData; /* avoid warning about unused argument */
#endif
}

%endif %- MessageHandler
%-BW_METHOD_END MessageHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Partxtw
%define! Parparent
%define! RetVal
%include Common\UITextCreate.Inc
uint8_t %'ModuleName'%.%Create(%@UI@'ModuleName'%.Element *parent, %'ModuleName'_TextWidget *txtw, %@UI@'ModuleName'%.PixelDim x, %@UI@'ModuleName'%.PixelDim y, %@UI@'ModuleName'%.PixelDim width, %@UI@'ModuleName'%.PixelDim height)
{
  %@FontDisplay@'ModuleName'%.Font *font;

  if (txtw == NULL) {
    return ERR_FAILED;
  }
  font = %@Font@'ModuleName'%.GetFont(); /* font defined in user properties */
  if (width==0) {                                                %>40/* auto size */
    width = %@FontDisplay@'ModuleName'%.GetStringWidth((unsigned char*)%'ModuleName'_CONFIG_DEFAULT_TEXT_TEXT, font, NULL);
  }
  if (height==0) {                                               %>40/* auto size */
    height = %@FontDisplay@'ModuleName'%.GetStringHeight((unsigned char*)%'ModuleName'_CONFIG_DEFAULT_TEXT_TEXT, font, NULL);
  }
  %@UI@'ModuleName'%.ElementInitCommon(&txtw->element, %@UI@'ModuleName'%.WIDGET_TEXT,
    x, y, width, height, %'ModuleName'%.MessageHandler);
  txtw->textInfo.fgColor = %'ModuleName'%.CONFIG_DEFAULT_TEXT_FOREGROUND_COLOR;
  txtw->textInfo.bgColor = %'ModuleName'%.CONFIG_DEFAULT_TEXT_BACKGROUND_COLOR;
#if %'ModuleName'%.CONFIG_TEXT_HAS_USER_MSG_HANDLER
  txtw->userMsgHandler = NULL;                                   %>40/* needs to be set by user */
#endif
  txtw->textInfo.text = (unsigned char*)%'ModuleName'_CONFIG_DEFAULT_TEXT_TEXT;
  txtw->textInfo.font = font;
  if (parent!=NULL) {
    return %@UI@'ModuleName'%.AddSubElement(parent, &txtw->element);
  }
  return ERR_OK;
}
%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN ChangeText
%ifdef ChangeText
%define! PardstTextSize
%define! Partxt
%define! Partxtw
%define! RetVal
%include Common\UITextChangeText.Inc
uint8_t %'ModuleName'%.%ChangeText(%'ModuleName'_TextWidget *txtw, uint16_t dstTextSize, unsigned char *txt)
{
  %@UI@'ModuleName'%.PixelDim x, y, leftPos, xCursor, yCursor;
  %'ModuleName'_TextInfo *textInfo;
  unsigned char *p, *q;
  %@UI@'ModuleName'%.PixelDim width, totalWidth;
  %@UI@'ModuleName'%.PixelDim height, totalHeight;
  %@UI@'ModuleName'%.PixelColor drawColor, clrColor;
  %@FontDisplay@'ModuleName'%.Font *font;

  if (txtw == NULL || txtw->element.prop.type != %@UI@'ModuleName'%.WIDGET_TEXT) {
    return ERR_FAILED; /* error! */
  }
  textInfo = &txtw->textInfo;                                    %>40/* the textInfo is just after the element */
  font = textInfo->font;
  if (%@UI@'ModuleName'%.GetElementAbsolutePos(&txtw->element, &x, &y)!=ERR_OK) {
    return ERR_FAILED;
  }
  leftPos = x; /* position on the left side of the text box */
  xCursor = x; yCursor = y;
  %@FontDisplay@'ModuleName'%.GetFontHeight(font, &height, &totalHeight);
  /* determine color to clear text and color to draw text */
  drawColor = textInfo->fgColor;
  clrColor = textInfo->bgColor;
#if %@UI@'ModuleName'%.CONFIG_SELECTION_ENABLED
  if (txtw->element.prop.flags&%@UI@'ModuleName'%.FLAGS_IS_SELECTED) {
    %@UI@'ModuleName'%.PixelColor tmp;

    tmp = drawColor; drawColor = clrColor; clrColor = tmp; /* swap colors */
  }
#endif
  /* iterate through the two strings and compare them. Need to care about '\n' too. Note that we do not handle '\r' 100%% correctly :-(. */
  p = textInfo->text;
  q = txt;
  for (;;) {                                                     %>40/* skip text which is the same, will break */
    if (*p=='\n' && *q=='\n') {                                  %>40/* new line */
      x = leftPos;
      y += totalHeight;
      p++; q++;                                                  %>40/* move on */
    } else if (*p=='\0' && *q=='\0') {
      break; /* done */
    } else if (*p==*q) {                                         %>40/* same character: do not change, only update position */
      %@FontDisplay@'ModuleName'%.GetCharWidth(*p, &width, &totalWidth, font);
      x += totalWidth;
      p++; q++;                                                  %>40/* move on */
    } else if (*q=='\0') { /* new text is at its end */
      /* clear existing remaining text */
      xCursor = x; yCursor = y;
      if (*p=='\n') {
        xCursor = leftPos;
      }
      %@FontDisplay@'ModuleName'%.WriteString(p, clrColor, &xCursor, &yCursor, font);
      break; /* done */
    } else if (*p=='\0') { /* existing text is at its end */
      /* write new text */
      xCursor = x; yCursor = y;
      if (*q=='\n') {
        xCursor = leftPos;
      }
      %@FontDisplay@'ModuleName'%.WriteString(q, drawColor, &xCursor, &yCursor, font);
      break; /* done */
    } else {                                                     %>40/* mismatch, new character is different: update until new line */
      /* first re-draw text using the background color to make it disappear */
      xCursor = x; yCursor = y;
      while(*p!='\0' && *p!='\n') {
        %@FontDisplay@'ModuleName'%.WriteChar(*p, clrColor, &xCursor, &yCursor, font);
        p++;
      }
      xCursor = x; yCursor = y;
      while(*q!='\0' && *q!='\n') {
        %@FontDisplay@'ModuleName'%.WriteChar(*q, drawColor, &xCursor, &yCursor, font);
        q++;
      }
    }
  } /* for */
  /* now update element with the new text */
  %@Utility@'ModuleName'%.strcpy(textInfo->text, dstTextSize, txt);%>40 /* set new text */
  return ERR_OK;
}

%endif %- ChangeText
%-BW_METHOD_END ChangeText
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetText
%ifdef SetText
%define! Partxt
%define! ParTextElement
%define! Partxtw
%define! RetVal
%include Common\UITextSetText.Inc
uint8_t %'ModuleName'%.%SetText(%'ModuleName'_TextWidget *txtw, unsigned char *txt)
{
  if (txtw == NULL || (txtw->element.prop.type != %@UI@'ModuleName'%.WIDGET_TEXT)) {
    return ERR_FAILED; /* error! */
  }
  txtw->textInfo.text = txt;
  return %'ModuleName'%.%Resize(txtw); /* adjust widget size */
}
%endif %- SetText
%-BW_METHOD_END SetText
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetForegroundColor
%ifdef SetForegroundColor
%define! ParfgColor
%define! Partxtw
%include Common\UITextSetForegroundColor.Inc
void %'ModuleName'%.%SetForegroundColor(%'ModuleName'_TextWidget *txtw, %@UI@'ModuleName'%.PixelColor color)
{
  txtw->textInfo.fgColor = color;
}

%endif %- SetForegroundColor
%-BW_METHOD_END SetForegroundColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetBackgroundColor
%ifdef SetBackgroundColor
%define! ParbgColor
%define! Partxtw
%include Common\UITextSetBackgroundColor.Inc
void %'ModuleName'%.%SetBackgroundColor(%'ModuleName'_TextWidget *txtw, %@UI@'ModuleName'%.PixelColor color)
{
  txtw->textInfo.bgColor = color;
}

%endif %- SetBackgroundColor
%-BW_METHOD_END SetBackgroundColor
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
%define! PartextW
%define! Parhandler
%include Common\UITextSetUserMsgHandler.Inc
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_TextWidget *textW, %@UI@'ModuleName'%.MsgHandler handler)
{
#if %'ModuleName'%.CONFIG_TEXT_HAS_USER_MSG_HANDLER
  textW->userMsgHandler = handler;
#else
  (void)textW;
  (void)handler;
#endif
}

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetFont
%ifdef SetFont
%define! Parwidget
%define! Parfont
%define! RetVal
%include Common\UITextSetFont.Inc
uint8_t %'ModuleName'%.%SetFont(%'ModuleName'_TextWidget *widget, %@FontDisplay@'ModuleName'%.Font *font)
{
  if (widget==NULL) {
    return ERR_FAILED;
  }
  widget->textInfo.font = font;
  widget->element.prop.width = %@FontDisplay@'ModuleName'%.GetStringWidth(widget->textInfo.text, font, NULL);
  widget->element.prop.height = %@FontDisplay@'ModuleName'%.GetStringHeight(widget->textInfo.text, font, NULL);
  return ERR_OK;
}

%endif %- SetFont
%-BW_METHOD_END SetFont
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
%define! Parwidget
%define! RetVal
%include Common\UITextResize.Inc
uint8_t %'ModuleName'%.%Resize(%'ModuleName'_TextWidget *widget)
{
  if (widget==NULL) {
    return ERR_FAILED;
  }
  widget->element.prop.width = %@FontDisplay@'ModuleName'%.GetStringWidth(widget->textInfo.text, widget->textInfo.font, NULL);
  widget->element.prop.height = %@FontDisplay@'ModuleName'%.GetStringHeight(widget->textInfo.text, widget->textInfo.font, NULL);
  return ERR_OK;
}

%endif %- Resize
%-BW_METHOD_END Resize
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetText
%ifdef GetText
%define! Parwidget
%define! RetVal
%include Common\UITextGetText.Inc
%'ModuleName'_PText %'ModuleName'%.%GetText(%'ModuleName'_TextWidget *widget)
{
  if (widget==NULL) {
    return NULL;
  }
  return widget->textInfo.text;
}

%endif %- GetText
%-BW_METHOD_END GetText
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetFont
%ifdef GetFont
%define! Parwidget
%define! RetVal
%include Common\UITextGetFont.Inc
%'ModuleName'_PFont %'ModuleName'%.%GetFont(%'ModuleName'_TextWidget *widget)
{
  if (widget==NULL) {
    return NULL;
  }
  return widget->textInfo.font;
}

%endif %- GetFont
%-BW_METHOD_END GetFont
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTextBoxWidth
%ifdef GetTextBoxWidth
%define! Parwidget
%define! RetVal
%include Common\UITextGetTextBoxWidth.Inc
%'ModuleName'_PixelDim %'ModuleName'%.%GetTextBoxWidth(%'ModuleName'_TextWidget *widget)
{
  return %@FontDisplay@'ModuleName'%.GetStringWidth(%'ModuleName'%.%GetText(widget), %'ModuleName'%.%GetFont(widget), NULL);
}

%endif %- GetTextBoxWidth
%-BW_METHOD_END GetTextBoxWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTextBoxHeight
%ifdef GetTextBoxHeight
%define! Parwidget
%define! RetVal
%include Common\UITextGetTextBoxHeight.Inc
%'ModuleName'_PixelDim %'ModuleName'%.%GetTextBoxHeight(%'ModuleName'_TextWidget *widget)
{
  return %@FontDisplay@'ModuleName'%.GetStringHeight(%'ModuleName'%.%GetText(widget), %'ModuleName'%.%GetFont(widget), NULL);
}

%endif %- GetTextBoxHeight
%-BW_METHOD_END GetTextBoxHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetFontHeight
%ifdef GetFontHeight
%define! Parwidget
%define! RetVal
%include Common\UITextGetFontHeight.Inc
%'ModuleName'_PixelDim %'ModuleName'%.%GetFontHeight(%'ModuleName'_TextWidget *widget)
{
  %@UI@'ModuleName'%.PixelDim charHeight, totalHeight;

  %@FontDisplay@'ModuleName'%.GetFontHeight(%'ModuleName'%.%GetFont(widget), &charHeight, &totalHeight);
  return charHeight;
}

%endif %- GetFontHeight
%-BW_METHOD_END GetFontHeight
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Application configuration file for UIText module
 *
 * This header file is a configuration header file to configure the module %'ModuleName' (UIText).
 * You can configure the defines directly in this file or with the compiler -D option.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#ifndef %'ModuleName'%.CONFIG_DEFAULT_TEXT_BACKGROUND_COLOR
  #define %'ModuleName'%.CONFIG_DEFAULT_TEXT_BACKGROUND_COLOR  %@UI@'ModuleName'%.COLOR_%DefaultTextTextBackgroundColor
    /*!< Default text background color */
#endif

#ifndef %'ModuleName'%.CONFIG_DEFAULT_TEXT_FOREGROUND_COLOR
  #define %'ModuleName'%.CONFIG_DEFAULT_TEXT_FOREGROUND_COLOR  %@UI@'ModuleName'%.COLOR_%DefaultTextTextForegroundColor
    /*!< Default text foreground color */
#endif

#ifndef %'ModuleName'%.CONFIG_TEXT_HAS_USER_MSG_HANDLER
%ifdef SetUserMsgHandler
  #define %'ModuleName'%.CONFIG_TEXT_HAS_USER_MSG_HANDLER  (1)
    /*!< 1: text widget have extra user message handler; 0: no extra message handler*/
%else
  #define %'ModuleName'%.CONFIG_TEXT_HAS_USER_MSG_HANDLER  (0)
    /*!< 1: text widget have extra user message handler; 0: no extra message handler*/
%endif
#endif

#ifndef %'ModuleName'%.CONFIG_DEFAULT_TEXT_TEXT
  #define %'ModuleName'_CONFIG_DEFAULT_TEXT_TEXT     "%DefaultText"
    /*!< default text for widget */
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

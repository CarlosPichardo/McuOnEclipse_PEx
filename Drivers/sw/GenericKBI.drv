%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    28.01.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%ifdef KBI
  %ifdef @KBI@OnInterrupt
    %define! Description_%@KBI@OnInterrupt This event is called when an active signal edge/level has occurred. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @KBI@OnInterrupt
%endif %- KBI
%ifdef MultiKBI
  %ifdef @MultiKBI@OnInterrupt
    %define! Description_%@MultiKBI@OnInterrupt This event is called when the active signal edge/level occurs. This event is enabled only if Interrupt service/events are enabled. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @MultiKBI@OnInterrupt
%endif %- MultiKBI
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\GenericKBISettings.Inc
%define! Abstract Common\GenericKBIAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
void %'ModuleName'%.%Enable(void);
%include Common\GenericKBIEnable.Inc

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
void %'ModuleName'%.%Disable(void);
%include Common\GenericKBIDisable.Inc

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
byte %'ModuleName'%.%GetVal(void);
%define! RetVal
%include Common\GenericKBIGetVal.Inc

%endif %- GetVal
%-BW_METHOD_END GetVal
%-INHERITED_EVENT_BEGIN MultiKBI OnInterrupt
%if %MultipleKeysGroup='yes'
%ifdef @MultiKBI@OnInterrupt
void %@MultiKBI@OnInterrupt(void);

%endif %- @MultiKBI@OnInterrupt
%endif %-%MultipleKeysGroup='yes'
%-INHERITED_EVENT_END MultiKBI OnInterrupt
%-INHERITED_EVENT_BEGIN KBI OnInterrupt
%ifdef @KBI@OnInterrupt
void %@KBI@OnInterrupt(void);

%endif %- @KBI@OnInterrupt
%-INHERITED_EVENT_END KBI OnInterrupt
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnInterrupt
%ifdef OnInterrupt
%INTERFACE OnInterrupt
void %OnInterrupt(void);
%include Common\GenericKBIOnInterrupt.Inc

%endif %- OnInterrupt
%-BW_METHOD_END OnInterrupt
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\GenericKBISettings.Inc
%define! Abstract Common\GenericKBIAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
%include Common\GenericKBIEnable.Inc
void %'ModuleName'%.%Enable(void)
{
%if %MultipleKeysGroup='yes'
  %@MultiKBI@'ModuleName'%.Enable();
%else
  %@KBI@'ModuleName'%.Enable();
%endif
}

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
%include Common\GenericKBIDisable.Inc
void %'ModuleName'%.%Disable(void)
{
%if %MultipleKeysGroup='yes'
  %@MultiKBI@'ModuleName'%.Disable();
%else
  %@KBI@'ModuleName'%.Disable();
%endif
}

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%define! RetVal
%include Common\GenericKBIGetVal.Inc
byte %'ModuleName'%.%GetVal(void)
{
%if %MultipleKeysGroup='yes'
  return %@MultiKBI@'ModuleName'%.GetVal();
%else
  return (byte)((%@KBI@'ModuleName'%.GetVal()!=0));
%endif
}

%endif %- GetVal
%-BW_METHOD_END GetVal
%-INHERITED_EVENT_BEGIN MultiKBI OnInterrupt
%if %MultipleKeysGroup='yes'
%ifdef @MultiKBI@OnInterrupt
%include Common\GeneralInternal.inc (OnInterrupt)
void %@MultiKBI@OnInterrupt(void)
{
  %OnInterrupt();
}

%endif %- @MultiKBI@OnInterrupt
%endif %- %MultipleKeysGroup='yes'
%-INHERITED_EVENT_END MultiKBI OnInterrupt
%-INHERITED_EVENT_BEGIN KBI OnInterrupt
%ifdef @KBI@OnInterrupt
%include Common\GeneralInternal.inc (OnInterrupt)
void %@KBI@OnInterrupt(void)
{
  %OnInterrupt();
}

%endif %- @KBI@OnInterrupt
%-INHERITED_EVENT_END KBI OnInterrupt
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnInterrupt
%ifdef OnInterrupt
%IMPLEMENTATION OnInterrupt
%include Common\GenericKBIOnInterrupt.Inc
void %OnInterrupt(void)
{
  /* Write your code here ... */
}

%endif %- OnInterrupt
%-BW_METHOD_END OnInterrupt
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

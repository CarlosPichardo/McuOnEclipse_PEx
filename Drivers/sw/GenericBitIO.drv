%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.11.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\GenericBitIOSettings.Inc
%define! Abstract Common\GenericBitIOAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDir
%ifdef GetDir
#define %'ModuleName'%.%GetDir() \
%if %1meansOutput='yes'
 %if %UseDirectionBit='yes'
  (%DirectionBitName)
 %elif %UseDirectionPort='yes'
  ((%DirectionPortName&(1<<%DirectionPortBitNumber))!=0)
 %elif %UseDirectionAddress='yes'
  (((*(byte*)%DirectionPortAddress)&(1<<%DirectionPortAddressBitNumber))!=0)
 %endif
%else
 %if %UseDirectionBit='yes'
  (!(%DirectionBitName))
 %elif %UseDirectionPort='yes'
  (!((%DirectionPortName&(1<<%DirectionPortBitNumber))!=0))
 %elif %UseDirectionAddress='yes'
  (!(((*(byte*)%DirectionPortAddress)&(1<<%DirectionPortAddressBitNumber))!=0))
 %endif
%endif

%define! RetVal
%include Common\GenericBitIOGetDir.Inc

%endif %- GetDir
%-BW_METHOD_END GetDir
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDir
%ifdef SetDir
#define %'ModuleName'%.%SetDir(Dir) \
  ((Dir)==0?%'ModuleName'%.%SetInput():%'ModuleName'%.%SetOutput())
%define! ParDir
%include Common\GenericBitIOSetDir.Inc

%endif %- SetDir
%-BW_METHOD_END SetDir
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInput
%ifdef SetInput
#define %'ModuleName'%.%SetInput() \
%if %1meansOutput='yes'
 %if %UseDirectionBit='yes'
  (%DirectionBitName = 0)
 %elif %UseDirectionPort='yes'
  (%DirectionPortName &= ~(1<<%DirectionPortBitNumber))
 %elif %UseDirectionAddress='yes'
  ((*(byte*)%DirectionPortAddress) &= ~(1<<%DirectionPortAddressBitNumber))
 %endif
%else
 %if %UseDirectionBit='yes'
  (%DirectionBitName = 1)
 %elif %UseDirectionPort='yes'
  (%DirectionPortName |= (1<<%DirectionPortBitNumber))
 %elif %UseDirectionAddress='yes'
  ((*(byte*)%DirectionPortAddress) |= (1<<%DirectionPortAddressBitNumber))
 %endif
%endif

%include Common\GenericBitIOSetInput.Inc

%endif %- SetInput
%-BW_METHOD_END SetInput
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetOutput
%ifdef SetOutput
#define %'ModuleName'%.%SetOutput() \
%if %1meansOutput='yes'
 %if %UseDirectionBit='yes'
  (%DirectionBitName = 1)
 %elif %UseDirectionPort='yes'
  (%DirectionPortName |= (1<<%DirectionPortBitNumber))
 %elif %UseDirectionAddress='yes'
  ((*(byte*)%DirectionPortAddress) |= (1<<%DirectionPortAddressBitNumber))
 %endif
%else
 %if %UseDirectionBit='yes'
  (%DirectionBitName = 0)
 %elif %UseDirectionPort='yes'
  (%DirectionPortName &= ~(1<<%DirectionPortBitNumber))
 %elif %UseDirectionAddress='yes'
  ((*(byte*)%DirectionPortAddress) &= ~(1<<%DirectionPortAddressBitNumber))
 %endif
%endif

%include Common\GenericBitIOSetOutput.Inc

%endif %- SetOutput
%-BW_METHOD_END SetOutput
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
#define %'ModuleName'%.%GetVal() \
%if %UseDataBit='yes'
  %DataBitName
%elif %UseDataPort='yes'
  ((%DataPortName&(1<<%DataPortBitNumber))!=0)
%elif %UseDataAddress='yes'
  (((*(byte*)%DataPortAddress)&(1<<%DataPortAddressBitNumber))!=0)
%elif %UseSetClearDataPort='yes'
  %'ModuleName'%.%GetDir()?(%GetDataPortNameOutput&=(1<<%SetClrDataPortBitNumber)):(%GetDataPortNameInput&=(1<<%SetClrDataPortBitNumber))
%endif

%define! RetVal
%include Common\GenericBitIOGetVal.Inc

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutVal
%ifdef PutVal
#define %'ModuleName'%.%PutVal(Val) \
  (((Val)!=0)?%'ModuleName'%.SetVal():%'ModuleName'%.ClrVal())

%define! ParVal
%include Common\GenericBitIOPutVal.Inc

%endif %- PutVal
%-BW_METHOD_END PutVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClrVal
%ifdef ClrVal
#define %'ModuleName'%.%ClrVal() \
%if %UseDataBit='yes'
  (%DataBitName = 0)
%elif %UseDataPort='yes'
  (%DataPortName &= ~(1<<%DataPortBitNumber))
%elif %UseDataAddress='yes'
  ((*(byte*)%DataPortAddress) &= ~(1<<%DataPortAddressBitNumber))
%elif %UseSetClearDataPort='yes'
  (%ClrDataPortName |= (1<<%SetClrDataPortBitNumber))
%endif

%include Common\GenericBitIOClrVal.Inc

%endif %- ClrVal
%-BW_METHOD_END ClrVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetVal
%ifdef SetVal
#define %'ModuleName'%.%SetVal() \
%if %UseDataBit='yes'
  (%DataBitName = 1)
%elif %UseDataPort='yes'
  (%DataPortName |= (1<<%DataPortBitNumber))
%elif %UseDataAddress='yes'
  ((*(byte*)%DataPortAddress) |= (1<<%DataPortAddressBitNumber))
%elif %UseSetClearDataPort='yes'
  (%SetDataPortName |= (1<<%SetClrDataPortBitNumber))
%endif

%include Common\GenericBitIOSetVal.Inc

%endif %- SetVal
%-BW_METHOD_END SetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegVal
%ifdef NegVal
#define %'ModuleName'%.%NegVal() \
%if %UseDataBit='yes'
  (%DataBitName ^= 1)
%elif %UseDataPort='yes'
  (%DataPortName ^= (1<<%DataPortBitNumber))
%elif %UseDataAddress='yes'
  ((*(byte*)%DataPortAddress) ^= (1<<%DataPortAddressBitNumber))
%elif %UseSetClearDataPort='yes'
  (%NegDataPortName ^= (1<<%SetClrDataPortBitNumber))
%endif

%include Common\GenericBitIONegVal.Inc

%endif %- NegVal
%-BW_METHOD_END NegVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\GenericBitIOInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\GenericBitIOSettings.Inc
%define! Abstract Common\GenericBitIOAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDir
%ifdef GetDir
%define! RetVal
%include Common\GenericBitIOGetDir.Inc
/* This method is implemented as macro in header file %'ModuleName'.h
bool %'ModuleName'%.%GetDir(void)
{
}
*/
%endif %- GetDir
%-BW_METHOD_END GetDir
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDir
%ifdef SetDir
%define! ParDir
%include Common\GenericBitIOSetDir.Inc
/* This method is implemented as macro in header file %'ModuleName'.h
void %'ModuleName'%.%SetDir(bool Dir)
{
}
*/
%endif %- SetDir
%-BW_METHOD_END SetDir
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInput
%ifdef SetInput
%include Common\GenericBitIOSetInput.Inc
/* This method is implemented as macro in header file %'ModuleName'.h
void %'ModuleName'%.%SetInput(void)
{
}
*/

%endif %- SetInput
%-BW_METHOD_END SetInput
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetOutput
%ifdef SetOutput
%include Common\GenericBitIOSetOutput.Inc
/* This method is implemented as macro in header file %'ModuleName'.h
void %'ModuleName'%.%SetOutput(void)
{
}
*/
%endif %- SetOutput
%-BW_METHOD_END SetOutput
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%define! RetVal
%include Common\GenericBitIOGetVal.Inc
/* This method is implemented as macro in header file %'ModuleName'.h
bool %'ModuleName'%.%GetVal(void)
{
}
*/

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutVal
%ifdef PutVal
%define! ParVal
%include Common\GenericBitIOPutVal.Inc
/* This method is implemented as macro in header file %'ModuleName'.h
void %'ModuleName'%.%PutVal(bool Val)
{
}
*/

%endif %- PutVal
%-BW_METHOD_END PutVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClrVal
%ifdef ClrVal
%include Common\GenericBitIOClrVal.Inc
/* This method is implemented as macro in header file %'ModuleName'.h
void %'ModuleName'%.%ClrVal(void)
{
}
*/

%endif %- ClrVal
%-BW_METHOD_END ClrVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetVal
%ifdef SetVal
%include Common\GenericBitIOSetVal.Inc
/* This method is implemented as macro in header file %'ModuleName'.h
void %'ModuleName'%.%SetVal(void)
{
}
*/

%endif %- SetVal
%-BW_METHOD_END SetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegVal
%ifdef NegVal
%include Common\GenericBitIONegVal.Inc
/* This method is implemented as macro in header file %'ModuleName'.h
void %'ModuleName'%.%NegVal(void)
{
}
*/

%endif %- NegVal
%-BW_METHOD_END NegVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\GenericBitIOInit.Inc
void %'ModuleName'%.%Init(void)
{
%if %Direction='1' %- Output
 %if %InitValue='0'
   %'ModuleName'%.%ClrVal(); /* clear bit to set data to 0 */
 %else
   %'ModuleName'%.%SetVal(); /* set bit to set data to 1 */
 %endif
 %- cannot use %'ModuleName'%.%SetOutput(); as method is disabled in this mode.
 %if %1meansOutput='yes'
  %if %UseDirectionBit='yes'
   %DirectionBitName = 1; /* set bit for output mode */
  %elif %UseDirectionPort='yes'
   %DirectionPortName |= (1<<%DirectionPortBitNumber); /* set bit for output mode */
  %elif %UseDirectionAddress='yes'
   (*(byte*)%DirectionPortAddress) |= (1<<%DirectionPortAddressBitNumber); /* set bit for output mode */
  %endif
 %else
  %if %UseDirectionBit='yes'
   %DirectionBitName = 0; /* clear bit */
  %elif %UseDirectionPort='yes'
   %DirectionPortName &= ~(1<<%DirectionPortBitNumber); /* clear bit for output mode */
  %elif %UseDirectionAddress='yes'
   (*(byte*)%DirectionPortAddress) &= ~(1<<%DirectionPortAddressBitNumber); /* clear bit for output mode */
  %endif
 %endif
%elif %Direction='0' %- Input
 %- cannot use %'ModuleName'%.%SetInput(); as this method is disabled in this mode
 %if %1meansOutput='yes'
  %if %UseDirectionBit='yes'
   %DirectionBitName = 0; /* clear bit for input mode */
  %elif %UseDirectionPort='yes'
   %DirectionPortName &= ~(1<<%DirectionPortBitNumber); /* clear bit for input mode */
  %elif %UseDirectionAddress='yes'
   (*(byte*)%DirectionPortAddress) &= ~(1<<%DirectionPortAddressBitNumber); /* clear bit for input mode */
  %endif
 %else
  %if %UseDirectionBit='yes'
   %DirectionBitName = 1; /* set bit for input mode */
  %elif %UseDirectionPort='yes'
   %DirectionPortName |= (1<<%DirectionPortBitNumber); /* set bit for input mode */
  %elif %UseDirectionAddress='yes'
   (*(byte*)%DirectionPortAddress) |= (1<<%DirectionPortAddressBitNumber); /* set bit for input mode */
  %endif
 %endif
%elif %Direction='2' %- Input/Output
 %if %InitDirection='output'
  %if %InitValue='0'
   %'ModuleName'%.%ClrVal(); /* clear bit to set data to 0 */
  %else
   %'ModuleName'%.%SetVal(); /* set bit to set data to 1 */
  %endif
   %'ModuleName'%.%SetOutput(); /* set direction to output */
 %else
   %'ModuleName'%.%SetInput(); /* set direction to input */
 %endif
%endif
}

%endif %- Init
%-BW_METHOD_END Init
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

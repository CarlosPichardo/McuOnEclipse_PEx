%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Paint Paints the checkbox element
%define! Description_MsgHandler Callback used for widget events
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UICheckBoxSettings.Inc
%define! Abstract Common\UICheckBoxAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

typedef %@UI@'ModuleName'%.PixelColor                            %>30 %'ModuleName'%.PixelColor;     %>55/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim                              %>30 %'ModuleName'%.PixelDim;       %>55/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Element                               %>30 %'ModuleName'%.Element;        %>55/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.MsgKind                               %>30 %'ModuleName'%.MsgKind;        %>55/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Pvoid                                 %>30 %'ModuleName'%.Pvoid;          %>55/* Alias to Pvoid data type */
typedef %@UI@'ModuleName'%.FontCallbacks                         %>30 %'ModuleName'%.FontCallbacks;  %>55/* Callback to retrieve font information. */
typedef %@UI@'ModuleName'%.painterCallback                       %>30 %'ModuleName'%.painterCallback;%>55/* Alias to UserInterface type */

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
typedef struct {
  %'ModuleName'%.Element element;                                %>40/* the base element, always first in structure */
%ifdef SetUserMsgHandler
  %@UI@'ModuleName'%.MsgHandler userMsgHandler;                  %>40/* optional user handler */
%endif %- SetUserMsgHandler
  %@TextWidget@'ModuleName'%.TextWidget textWidget;              %>40/* information about the checkbox text. Must be right after element */
  bool isChecked;                                                %>40/* if the box is checked or not */
  %@UI@'ModuleName'%.PixelColor boxLineColor;                    %>40/* foreground line color or the box */
} %'ModuleName'_CheckBoxWidget;

typedef enum {                                                   %>40/* this lists widget specific event kinds */
  %'ModuleName'_MSG_CHECKBOX_CHANGED = %@UI@'ModuleName'%.MSG_LAST_PREFINED%>40/* Checkbox state has changed */
} %'ModuleName'_CheckBoxMsgKind; /* extension of %@UI@'ModuleName'%.MsgKind */

/* default constants */
#define %'ModuleName'%.CHECKBOX_LINE_WIDTH  %CheckBoxLineWidth   %>40/* line thickness of check box */
#define %'ModuleName'%.CHECKBOX_TEXT_SPACE  %CheckBoxTextSpaceWidth%>40/* space between checkbox and text */
#define %'ModuleName'%.CHECKBOX_BG_COLOR    %@UI@'ModuleName'%.COLOR_%DefaultBackgroundColor%>40/* default background color */
#define %'ModuleName'%.CHECKBOX_TEXT_COLOR  %@UI@'ModuleName'%.COLOR_%DefaultCheckBoxTextForegroundColor%>40/* default text color */
#define %'ModuleName'%.CHECKBOX_LINE_COLOR  %@UI@'ModuleName'%.COLOR_%DefaultLineColor%>40/* default line color */
#define %'ModuleName'%.CHECKBOX_TEXT        "%DefaultLabelText"  %>40/* default label text */

%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
#define %'ModuleName'%.%SetUserMsgHandler(widget, handler) \
  (widget)->userMsgHandler = handler

%define! Parwidget
%define! Parhandler
%include Common\UICheckBoxSetUserMsgHandler.Inc

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
byte %'ModuleName'%.%Create(%'ModuleName'_Element *parent, %'ModuleName'_CheckBoxWidget *checkBox, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height);
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! ParcheckBox
%define! Parparent
%define! RetVal
%include Common\UICheckBoxCreate.Inc

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%ifdef IsChecked
#define %'ModuleName'%.%IsChecked(widget) \
  (widget)->isChecked

%define! Parwidget
%define! RetVal
%include Common\UICheckBoxIsChecked.Inc

%endif %- IsChecked
%-************************************************************************************************************
%-BW_METHOD_BEGIN Set
%ifdef Set
void %'ModuleName'%.%Set(%'ModuleName'_CheckBoxWidget *widget, bool checked);
%define! Parwidget
%define! Parchecked
%include Common\UICheckBoxSet.Inc

%endif %- Set
%-BW_METHOD_END Set
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
byte %'ModuleName'%.%Resize(%'ModuleName'_CheckBoxWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UICheckBoxResize.Inc

%endif %- Resize
%-BW_METHOD_END Resize
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UICheckBoxSettings.Inc
%define! Abstract Common\UICheckBoxAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG Paint
static byte Paint(%'ModuleName'_Element *element);
%-INTERNAL_LOC_METHOD_END Paint
%-INTERNAL_LOC_METHOD_BEG MsgHandler
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData);
%-INTERNAL_LOC_METHOD_END MsgHandler
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Paint
%define! Parelement
%define! RetVal
%include Common\GeneralInternalGlobal.inc (Paint)
static byte Paint(%'ModuleName'_Element *element)
{
  %'ModuleName'_CheckBoxWidget *checkbox = (%'ModuleName'_CheckBoxWidget*)element;
  %'ModuleName'_PixelDim boxSize;

  if (checkbox == NULL) {
    return ERR_FAILED;
  }
  if (element->prop.type != %@UI@'ModuleName'%.WIDGET_CHECKBOX) {
    return ERR_FAILED;
  }
  /* determine the size of the quadratic check box: this depends on the font used for the text */
  boxSize = %@TextWidget@'ModuleName'%.GetFontHeight(&checkbox->textWidget);
  /* Draw the check box bounding box (check box quadratic box) */
  %@UI@'ModuleName'%.DrawBox(element, 0, 0, boxSize, boxSize, %'ModuleName'%.CHECKBOX_LINE_WIDTH, checkbox->boxLineColor);
  /* Draw background inside check box */
  %@UI@'ModuleName'%.DrawFilledBox(element,
    %'ModuleName'%.CHECKBOX_LINE_WIDTH, %'ModuleName'%.CHECKBOX_LINE_WIDTH,
    (%@UI@'ModuleName'%.PixelDim)(boxSize-2*%'ModuleName'%.CHECKBOX_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(boxSize-2*%'ModuleName'%.CHECKBOX_LINE_WIDTH),
    element->prop.color);
  /* Draw the separator between box and text */
  %@UI@'ModuleName'%.DrawFilledBox(element, boxSize, 0, %'ModuleName'%.CHECKBOX_TEXT_SPACE, boxSize, element->prop.color);
  if (checkbox->isChecked) { /* draw cross */
    %@UI@'ModuleName'%.PixelDim i;

    for (i = 0; i < %'ModuleName'%.CHECKBOX_LINE_WIDTH; i++){
      %@UI@'ModuleName'%.DrawLine(element,
        i, 0,
        (%@UI@'ModuleName'%.PixelDim)(boxSize-%'ModuleName'%.CHECKBOX_LINE_WIDTH + i),
        (%@UI@'ModuleName'%.PixelDim)(boxSize-%'ModuleName'%.CHECKBOX_LINE_WIDTH),
        checkbox->boxLineColor);
      %@UI@'ModuleName'%.DrawLine(element,
        i,
        (%@UI@'ModuleName'%.PixelDim)(boxSize-%'ModuleName'%.CHECKBOX_LINE_WIDTH),
        (%@UI@'ModuleName'%.PixelDim)(boxSize-%'ModuleName'%.CHECKBOX_LINE_WIDTH + i),
        0,
        checkbox->boxLineColor);
    }
  }
  /* draw text */
  %@UI@'ModuleName'%.SendMessage(%@UI@'ModuleName'%.MSG_WIDGET_PAINT, &checkbox->textWidget.element, NULL);
  return ERR_OK;
}

%-INTERNAL_METHOD_END Paint
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG MsgHandler
%define! Parkind
%define! ParpData
%define! Parelement
%include Common\GeneralInternalGlobal.inc (MsgHandler)
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData)
{
  %'ModuleName'_CheckBoxWidget *widget = (%'ModuleName'_CheckBoxWidget*)element;

  if (kind==%@UI@'ModuleName'%.MSG_WIDGET_PAINT) {
    (void)Paint(element);
  } else if (kind==%@UI@'ModuleName'%.MSG_WIDGET_RESIZE) {
    (void)%@TextWidget@'ModuleName'%.Resize(&widget->textWidget);
    (void)%'ModuleName'%.%Resize(widget);
  } else if (kind==%@UI@'ModuleName'%.MSG_CLICK_RELEASE) { /* releasing click */
    if (%@UI@'ModuleName'%.CoordinateInsideElement((%@UI@'ModuleName'%.Coordinate*)pData, element)) { /* it is me! */
      %'ModuleName'%.%Set(widget, (bool)(!%'ModuleName'%.%IsChecked(widget))); /* toggle state */
%ifdef SetUserMsgHandler
      if (widget->userMsgHandler != NULL){
        widget->userMsgHandler((%@UI@'ModuleName'%.MsgKind)%'ModuleName'_MSG_CHECKBOX_CHANGED, element, pData);%>40/* call user event  */
      }
%endif %- SetUserMsgHandler
      (void)Paint(element);
    }
  }
%ifdef SetUserMsgHandler
  if (widget->userMsgHandler != NULL){
    widget->userMsgHandler(kind, element, pData);                %>40/* call user event  */
  }
%endif %- SetUserMsgHandler
}

%-INTERNAL_METHOD_END MsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! ParcheckBox
%define! Parparent
%define! RetVal
%include Common\UICheckBoxCreate.Inc
byte %'ModuleName'%.%Create(%'ModuleName'_Element *parent, %'ModuleName'_CheckBoxWidget *checkBox, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height)
{
  if (parent == NULL || checkBox == NULL) {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.ElementInitCommon(&checkBox->element, %@UI@'ModuleName'%.WIDGET_CHECKBOX,
    x, y, width, height, %'ModuleName'%.CHECKBOX_BG_COLOR, MsgHandler);
  checkBox->isChecked = FALSE;
  checkBox->boxLineColor = %'ModuleName'%.CHECKBOX_LINE_COLOR;
%ifdef SetUserMsgHandler
  checkBox->userMsgHandler = NULL;                               %>40/* can be set by user */
%endif %- SetUserMsgHandler

  /* create textWidget for button text */
  if (%@TextWidget@'ModuleName'%.Create(&checkBox->element, &checkBox->textWidget, 0, 0, 0, 0)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.SetFgColor(&checkBox->textWidget, %'ModuleName'%.CHECKBOX_TEXT_COLOR)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.SetBgColor(&checkBox->textWidget, %'ModuleName'%.CHECKBOX_BG_COLOR)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.SetText(&checkBox->textWidget, (unsigned char*)%'ModuleName'%.CHECKBOX_TEXT)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%@TextWidget@'ModuleName'%.Resize(&checkBox->textWidget)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (width==0 && height==0) {                                   %>40/* auto size */
    if (%'ModuleName'%.%Resize(checkBox)!=ERR_OK) {
      return ERR_FAILED;
    }
  }
  if (%@UI@'ModuleName'%.AddSubElement(parent, &checkBox->element) != ERR_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}
%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN IsChecked
%ifdef IsChecked
%define! Parwidget
%define! RetVal
%include Common\UICheckBoxIsChecked.Inc
/*
bool %'ModuleName'%.%IsChecked(%'ModuleName'_CheckBoxWidget *widget)
{
  ** This method is implemented as macro
}
*/

%endif %- IsChecked
%-BW_METHOD_END IsChecked
%-************************************************************************************************************
%-BW_METHOD_BEGIN Set
%ifdef Set
%define! Parchecked
%define! Parwidget
%include Common\UICheckBoxSet.Inc
void %'ModuleName'%.%Set(%'ModuleName'_CheckBoxWidget *widget, bool checked)
{
  if (widget->isChecked != checked) {
    widget->isChecked = checked;                                 %>40 /* set new status */
    widget->element.prop.flags |= %@UI@'ModuleName'%.FLAGS_NEEDS_REPAINT;%>40 /* mark element as due for update */
  }
}

%endif %- Set
%-BW_METHOD_END Set
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
%define! Parwidget
%define! Parhandler
%include Common\UICheckBoxSetUserMsgHandler.Inc
/*
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_CheckBoxWidget *widget, %@UI@'ModuleName'%.MsgHandler handler)
{
 ** This method is implemented as macro
*/

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
%define! Parwidget
%define! RetVal
%include Common\UICheckBoxResize.Inc
byte %'ModuleName'%.%Resize(%'ModuleName'_CheckBoxWidget *widget)
{
  %@UI@'ModuleName'%.PixelDim boxSize;

  if (widget==NULL) {
    return ERR_FAILED;
  }
  /* calculate size of the check box: size of the 'upperline' font size */
  boxSize = %@TextWidget@'ModuleName'%.GetFontHeight(&widget->textWidget);
  widget->element.prop.width = (%@UI@'ModuleName'%.PixelDim)(boxSize + %'ModuleName'%.CHECKBOX_TEXT_SPACE + %@UI@'ModuleName'%.GetElementWidth(&widget->textWidget.element));
  widget->element.prop.height = boxSize;

  /* set text offset */
  widget->textWidget.element.prop.x = (%'ModuleName'_PixelDim)(boxSize+%'ModuleName'%.CHECKBOX_TEXT_SPACE);
  widget->textWidget.element.prop.y = 0;
  return ERR_OK;
}

%endif %- Resize
%-BW_METHOD_END Resize
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    30.11.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\BitIO_to_PCA9554Settings.Inc
%define! Abstract Common\BitIO_to_PCA9554Abstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-************************************************************************************************************
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutVal
%ifdef PutVal
void %'ModuleName'%.%PutVal(bool val);
%define! Parval
%include Common\BitIO_to_PCA9554PutVal.Inc

%endif %- PutVal
%-BW_METHOD_END PutVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
bool %'ModuleName'%.%GetVal(void);
%define! RetVal
%include Common\BitIO_to_PCA9554GetVal.Inc

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegVal
%ifdef NegVal
void %'ModuleName'%.%NegVal(void);
%include Common\BitIO_to_PCA9554NegVal.Inc

%endif %- NegVal
%-BW_METHOD_END NegVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\BitIO_to_PCA9554Init.Inc

%endif %- Init
%-BW_METHOD_END Init
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\BitIO_to_PCA9554Settings.Inc
%define! Abstract Common\BitIO_to_PCA9554Abstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;

#define %'ModuleName'%.BIT_NUMBER %PCABitNumber   /* Bit number in PCA register starts by 0*/
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutVal
%ifdef PutVal
%define! Parval
%include Common\BitIO_to_PCA9554PutVal.Inc
void %'ModuleName'%.%PutVal(bool val)
{
  if(val) {
    %@Symbol@'ModuleName'%.SetOutputBit(%'ModuleName'%.BIT_NUMBER);
  } else {
    %@Symbol@'ModuleName'%.ClearOutputBit(%'ModuleName'%.BIT_NUMBER);
  }
}

%endif %- PutVal
%-BW_METHOD_END PutVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%define! RetVal
%include Common\BitIO_to_PCA9554GetVal.Inc
bool %'ModuleName'%.%GetVal(void)
{
%if %BitDirection='input'
  /* Bit set as input*/
  return (bool)(%@Symbol@'ModuleName'%.ReadInputBit(%'ModuleName'%.BIT_NUMBER));
%else
  /* Bit set as output*/
  return (bool)(%@Symbol@'ModuleName'%.GetOutputBit(%'ModuleName'%.BIT_NUMBER));
%endif
}

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegVal
%ifdef NegVal
%include Common\BitIO_to_PCA9554NegVal.Inc
void %'ModuleName'%.%NegVal(void)
{
  %@Symbol@'ModuleName'%.NegOutputBit(%'ModuleName'%.BIT_NUMBER);
}

%endif %- NegVal
%-BW_METHOD_END NegVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\BitIO_to_PCA9554Init.Inc
void %'ModuleName'%.%Init(void)
{
  uint8_t dirByte;

  dirByte = %@Symbol@'ModuleName'%.ReadConfig();
%if %BitDirection='input'
  /* Bit set as input (set a one to the config-register)*/
  %@Symbol@'ModuleName'%.WriteConfig((byte)(dirByte|(1<<%'ModuleName'%.BIT_NUMBER)));
%else
  /* Bit set as output (set a zero to the config-register)*/
  %@Symbol@'ModuleName'%.WriteConfig((byte)(dirByte&(~(1<<%'ModuleName'%.BIT_NUMBER))));
%endif
}

%endif %- Init
%-BW_METHOD_END Init
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    09.06.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Init Initialization Method
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\74HC164Settings.Inc
%define! Abstract Common\74HC164Abstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Init
byte %'ModuleName'%.Init(void);
%define! RetVal
%include Common\GeneralInternal.inc (Init)

%-INTERNAL_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutVal
%ifdef PutVal
void %'ModuleName'%.%PutVal(byte Val);
%define! Parval
%define! ParVal
%include Common\74HC164PutVal.Inc

%endif %- PutVal
%-BW_METHOD_END PutVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
byte %'ModuleName'%.%GetVal(void);
%define! RetVal
%include Common\74HC164GetVal.Inc

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInput
%ifdef SetInput
void %'ModuleName'%.%SetInput(void);
%include Common\74HC164SetInput.Inc

%endif %- SetInput
%-BW_METHOD_END SetInput
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetOutput
%ifdef SetOutput
void %'ModuleName'%.%SetOutput(void);
%include Common\74HC164SetOutput.Inc

%endif %- SetOutput
%-BW_METHOD_END SetOutput
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\74HC164Settings.Inc
%define! Abstract Common\74HC164Abstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutVal
%ifdef PutVal
%define! Parval
%define! ParVal
%include Common\74HC164PutVal.Inc
void %'ModuleName'%.%PutVal(byte Val)
{
  byte i;

%if %UseB='yes'
  %@B@'ModuleName'%.SetVal();                                    %>40 /* enable chip */
%endif
%if defined(CLR)
  if (Val==0) {
    %@CLR@'ModuleName'%.ClrVal();                                %>40 /* CLR pin is low active: clear shift register content */
    %@Wait@'ModuleName'%.Waitns(30);                             %>40 /* for SN54HC16 and 4.5V, we need to wait 30 ns */
    %@CLR@'ModuleName'%.SetVal();                                %>40 /* go to high: release clear state */
  } else {
    for(i=0;i<7;i++) {                                           %>40 /* for all bits */
      %@CLK@'ModuleName'%.ClrVal();                              %>40 /* clock low */
      if (Val&1) {
        %@A@'ModuleName'%.SetVal();                              %>40 /* next bit is a one */
      } else {
        %@A@'ModuleName'%.ClrVal();                              %>40 /* next bit is a zero */
      }
      %@CLK@'ModuleName'%.SetVal();                              %>40 /* rising edge clock: shift bit into register */
      Val >>= 1;                                                 %>40 /* move to next bit */
    } /* for */
    %@CLK@'ModuleName'%.ClrVal();                                %>40 /* clock back to low level (idle) */
  } /* if-else */
%else
  for(i=0;i<7;i++) {                                             %>40 /* for all bits */
    %@CLK@'ModuleName'%.ClrVal();                                %>40 /* clock low */
    if (Val&1) {
      %@A@'ModuleName'%.SetVal();                                %>40 /* next bit is a one */
    } else {
      %@A@'ModuleName'%.ClrVal();                                %>40 /* next bit is a zero */
    }
    %@CLK@'ModuleName'%.SetVal();                                %>40 /* rising edge clock: shift bit into register */
    Val >>= 1;                                                   %>40 /* move to next bit */
  } /* for */
  %@CLK@'ModuleName'%.ClrVal();                                  %>40 /* clock back to low level (idle) */
%endif
%if %UseB='yes'
  %@B@'ModuleName'%.ClrVal();                                    %>40 /* disable chip */
%endif
}

%endif %- PutVal
%-BW_METHOD_END PutVal
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Init
%define! RetVal
%include Common\GeneralInternal.inc (Init)
byte %'ModuleName'%.Init(void)
{
  /* initialize all pins to zero. CLR is low active, so this will clear as well the shift register */
%if defined(CLR)
  %@CLR@'ModuleName'%.ClrVal();                                  %>40 /* clear shift register (low active) */
%endif
  %@A@'ModuleName'%.ClrVal();                                    %>40 /* Pin A low */
%if %UseB='yes'
  %@B@'ModuleName'%.ClrVal();                                    %>40 /* disable chip */
%endif
%if defined(CLR)
  %@CLR@'ModuleName'%.SetVal();                                  %>40 /* go to high: release clear state */
%endif
}

%-INTERNAL_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%define! RetVal
%include Common\74HC164GetVal.Inc
byte %'ModuleName'%.%GetVal(void)
{
  /* only can use this device in output mode, so not possible to read the value from the shift register.
     This method has been added for compatibility only */
  return 0;
}

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInput
%ifdef SetInput
%include Common\74HC164SetInput.Inc
void %'ModuleName'%.%SetInput(void)
{
  /* Device can be only used in output mode. If you called this function, something is wrong :-( */
}

%endif %- SetInput
%-BW_METHOD_END SetInput
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetOutput
%ifdef SetOutput
%include Common\74HC164SetOutput.Inc
void %'ModuleName'%.%SetOutput(void)
{
  /* Device can be only used in output mode. If you called this function, something is wrong :-( */
}

%endif %- SetOutput
%-BW_METHOD_END SetOutput
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

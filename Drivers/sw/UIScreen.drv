%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_EventCallback Callback used for widget events
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UIScreenSettings.Inc
%define! Abstract Common\UIScreenAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

typedef %@UI@'ModuleName'%.PixelColor %'ModuleName'%.PixelColor; %>40/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim %'ModuleName'%.PixelDim;     %>40/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Screen %'ModuleName'%.Screen;         %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Element %'ModuleName'%.Element;       %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Pvoid %'ModuleName'%.Pvoid;           %>40/* Alias to Pvoid data type */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;

/* --- Element: Screen --- */
typedef struct %'ModuleName'_ScreenWidget{
  %'ModuleName'_Element element;                                 %>40/* the base element, always first in structure */
  %'ModuleName'_PixelDim width;                                  %>40/* fix width */
  %'ModuleName'_PixelDim height;                                 %>40/* fix height */
%if %SelectionEnabled='yes'
  struct %'ModuleName'_Element *selectedW;                       %>40/* pointer to the currently selected window */
%endif
  %'ModuleName'_PixelColor bgColor;                              %>40/* background color of the screen */
  bool updateAll;                                                %>40/* If the screen needs to be updated as a whole */
} %'ModuleName'_ScreenWidget;

%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateScreen
%ifdef CreateScreen
void %'ModuleName'%.%CreateScreen(%'ModuleName'_ScreenWidget *screen, %'ModuleName'_PixelColor bgColor);
%define! Parscreen
%define! ParbgColor
%include Common\UIScreenCreateScreen.Inc

%endif %- CreateScreen
%-BW_METHOD_END CreateScreen
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateScreen
%ifdef UpdateScreen
void %'ModuleName'%.%UpdateScreen(%'ModuleName'_Screen *screen);
%define! Parscreen
%include Common\UIScreenUpdateScreen.Inc

%endif %- UpdateScreen
%-BW_METHOD_END UpdateScreen
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UIScreenSettings.Inc
%define! Abstract Common\UIScreenAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
#include <string.h> /* for memcpy */
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
static %'ModuleName'%.Screen *currentScreen;                     %>40/* current screen */
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG EventCallback
static void EventCallback(%'ModuleName'_Screen *screen, %'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind kind, %'ModuleName'_Pvoid pData);
%-INTERNAL_LOC_METHOD_END EventCallback
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG EventCallback
%define! Parkind
%define! ParpData
%define! Parelement
%define! Parwindow
%define! Parscreen
%include Common\GeneralInternalGlobal.inc (EventCallback)
static void EventCallback(%'ModuleName'_Screen *screen, %'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind kind, %'ModuleName'_Pvoid pData)
{
  (void)pData; /* unused argument */
  (void)screen; /* unused argument */
}
%-INTERNAL_METHOD_END EventCallback
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateScreen
%ifdef CreateScreen
%define! Parscreen
%define! ParbgColor
%include Common\UIScreenCreateScreen.Inc
void %'ModuleName'%.%CreateScreen(%'ModuleName'_ScreenWidget *screen, %'ModuleName'_PixelColor bgColor)
{
  %@UI@'ModuleName'%.ElementInitCommon((%'ModuleName'_Element*)screen, %@UI@'ModuleName'%.WIDGET_SCREEN,
    0, 0, %@UI@'ModuleName'%.GetWidth(), %@UI@'ModuleName'%.GetHeight(),
    bgColor, (%'ModuleName'%.painterCallback)PaintScreen); //paintercallback adden
%if SelectionEnabled='yes'
  screen->selectedW = NULL;
%endif
  screen->updateAll = TRUE;
  currentScreen = screen;
}

%endif %- CreateScreen
%-BW_METHOD_END CreateScreen
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateScreen
%ifdef UpdateScreen
%define! Parscreen
%include Common\UIScreenUpdateScreen.Inc
void %'ModuleName'%.%UpdateScreen(%'ModuleName'_Screen *screen)
{
  %'ModuleName'%.Window *window;

  if (screen != NULL) {
    window = screen->element.sub;                                %>40/* first element of screen */
    if (screen->updateAll) {                                     %>40/* start with drawing the background */
      if (   window != NULL
          && window->element.prop.x == 0 && window->element.prop.y == 0
          && window->element.prop.width == %@UI@'ModuleName'%.GetWidth()
          && window->element.prop.height == %@UI@'ModuleName'%.GetHeight()
         )
      {
        /* first window is filling whole screen: no need to paint screen backgound */
      } else {
      /* needs fixing!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
        %@UI@'ModuleName'%.DrawFilledBox(NULL,0, 0, %@UI@'ModuleName'%.GetWidth(), %@UI@'ModuleName'%.GetHeight(), screen->bgColor);
      }
    }
    while (window != NULL) {
      if (screen->updateAll) {
        window->updateAll = TRUE;
      }
      /* need to call update here!!!!!!*/
      window = window->next;                                     %>40/* process next window */
    } /* while */
    screen->updateAll = FALSE;
  } /* if */
}

%endif %- UpdateScreen
%-BW_METHOD_END UpdateScreen
%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

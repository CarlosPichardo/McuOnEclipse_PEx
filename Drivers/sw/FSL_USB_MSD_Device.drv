%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    13.12.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_App_Callback Method to handle class callbacks from USB
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%- copy files
%include FSL_USB_MSD_Device_Files.prg
%-
%-
%INTERFACE
%define! Settings Common\FSL_USB_MSD_DeviceSettings.Inc
%define! Abstract Common\FSL_USB_MSD_DeviceAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include <stddef.h> /* for size_t */
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

/* error/event codes for events */
#define %'ModuleName'%.USB_ERR_INIT            1  /* USB initialization error */
#define %'ModuleName'%.USB_APP_BUS_RESET       2  /* bus has reset */
#define %'ModuleName'%.USB_APP_ENUM_COMPLETE   3  /* device enumeration completed */
#define %'ModuleName'%.USB_APP_ERROR           4  /* application error */
#define %'ModuleName'%.USB_APP_BUS_SUSPEND     5  /* bus asks for suspend */
#define %'ModuleName'%.USB_APP_BUS_RESUME      6  /* bus resumed */
#define %'ModuleName'%.USB_APP_SEND_COMPLETE   7  /* sending message completed */
#define %'ModuleName'%.USB_APP_NUMLOCK_ON      8  /* request from host to turn NumLock on */
#define %'ModuleName'%.USB_APP_NUMLOCK_OFF     9  /* request from host to turn NumLock off */
#define %'ModuleName'%.USB_ERR_DEINIT         10  /* USB deinitialization error */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
uint8_t %'ModuleName'%.%Init(void);
%define! RetVal
%include Common\FSL_USB_MSD_DeviceInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN App_Task
%ifdef App_Task
uint8_t %'ModuleName'%.%App_Task(void);
%define! RetVal
%include Common\FSL_USB_MSD_DeviceApp_Task.Inc

%endif %- App_Task
%-BW_METHOD_END App_Task
%-************************************************************************************************************
%-BW_METHOD_BEGIN USB_App_Callback
%ifdef USB_App_Callback
void %'ModuleName'%.%USB_App_Callback(byte controller_ID, byte event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\FSL_USB_MSD_DeviceUSB_App_Callback.Inc

%endif %- USB_App_Callback
%-BW_METHOD_END USB_App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN USB_Notify_Callback
%ifdef USB_Notify_Callback
void %'ModuleName'%.%USB_Notify_Callback(byte controller_ID, byte event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\FSL_USB_MSD_DeviceUSB_Notify_Callback.Inc

%endif %- USB_Notify_Callback
%-BW_METHOD_END USB_Notify_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN Notify_Callback
%ifdef Notify_Callback
void %'ModuleName'%.%Notify_Callback(byte request, word value, word wIndex, byte** data, USB_PACKET_SIZE* size);
%define! Parrequest
%define! Parvalue
%define! ParwIndex
%define! Pardata
%define! Parsize
%include Common\FSL_USB_MSD_DeviceNotify_Callback.Inc

%endif %- Notify_Callback
%-BW_METHOD_END Notify_Callback
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG App_Callback
void %'ModuleName'%.App_Callback(uint8_t controller_ID, uint8_t event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\GeneralInternal.inc (App_Callback)

%-INTERNAL_METHOD_END App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
uint8_t %'ModuleName'%.%Deinit(void);
%define! RetVal
%include Common\FSL_USB_MSD_DeviceDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN isEnumerated
%ifdef isEnumerated
bool %'ModuleName'%.%isEnumerated(void);
%define! RetVal
%include Common\FSL_USB_MSD_DeviceisEnumerated.Inc

%endif %- isEnumerated
%-BW_METHOD_END isEnumerated
%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%INTERFACE OnEvent
void %OnEvent(uint8_t error);
%define! Parerror
%include Common\FSL_USB_MSD_DeviceOnEvent.Inc

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\FSL_USB_MSD_DeviceSettings.Inc
%define! Abstract Common\FSL_USB_MSD_DeviceAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include "hidef.h"          /* for EnableInterrupts macro */
#include "derivative.h"     /* include peripheral declarations */
#include "types.h"          /* Contains User Defined Data Types */
#include <stdio.h>
/* skip the inclusion in dependency state */
#ifndef __NO_SETJMP
  #include <stdio.h>
#endif
#include <stdlib.h>
#include <string.h>
#include "usb_msc.h"
#include "usb_class.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#define USB_CONTROLLER_ID      (0)   /* ID to identify USB CONTROLLER */
#define LOGICAL_UNIT_SUPPORTED          (1)

#if RAM_DISK_APP
  /* Change this to suit the available RAM size on the device */
  #define TOTAL_LOGICAL_BLOCKS_ADDRESS    (2)
  /* Length of each logical block address */
  #define LENGTH_OF_EACH_LBA              (512)
  /* Total number of logical blocks present */
  #define DISK_SIZE                       (LENGTH_OF_EACH_LBA * TOTAL_LOGICAL_BLOCKS_ADDRESS)
#endif

typedef struct _disk_variable_struct {
  uint8_t app_controller_ID;
  boolean start_app;
#if RAM_DISK_APP
  /* disk space reserved */
  uint8_t storage_disk[DISK_SIZE];
#endif
  uint8_t disk_lock;
#if (defined __CC_ARM)
  char reserved;
#endif
} DISK_GLOBAL_VARIABLE_STRUCT, *PTR_DISK_GLOBAL_VARIABLE_STRUCT;

static DISK_GLOBAL_VARIABLE_STRUCT g_disk;

/******************************************************************************
 *
 *    @name        MSD_Event_Callback
 *
 *    @brief       This function handles the callback
 *
 *    @param       controller_ID : To Identify the controller
 *    @param       event_type : value of the event
 *    @param       val : gives the configuration value
 *
 *    @return      None
 *
 *****************************************************************************/
void MSD_Event_Callback(uint_8 controller_ID, uint_8 event_type, void* val) {
  PTR_LBA_APP_STRUCT lba_data_ptr;
  uint_8_ptr prevent_removal_ptr, load_eject_start_ptr;
  PTR_DEVICE_LBA_INFO_STRUCT device_lba_info_ptr;

  UNUSED (controller_ID)
  switch(event_type) {
    case USB_APP_DATA_RECEIVED :
      break;
    case USB_APP_SEND_COMPLETE :
      break;
    case USB_MSC_START_STOP_EJECT_MEDIA :
      load_eject_start_ptr = (uint_8_ptr)val;
      /* Code to be added by user for starting, stopping or
         ejecting the disk drive. e.g. starting/stopping the motor in
         case of CD/DVD*/
      break;
    case USB_MSC_DEVICE_READ_REQUEST :
      /* copy data from storage device before sending it on USB Bus
        (Called before calling send_data on BULK IN endpoints)*/
      lba_data_ptr = (PTR_LBA_APP_STRUCT)val;
      /* read data from mass storage device to driver buffer */
#if RAM_DISK_APP
      USB_memcopy(g_disk.storage_disk + lba_data_ptr->offset,
                  lba_data_ptr->buff_ptr,
                  lba_data_ptr->size);
#elif SD_CARD_APP
      SD_Read_Block(lba_data_ptr);
#endif
      break;
    case USB_MSC_DEVICE_WRITE_REQUEST :
      /* copy data from USb buffer to Storage device
                  (Called before after recv_data on BULK OUT endpoints)*/
      lba_data_ptr = (PTR_LBA_APP_STRUCT)val;
      /* read data from driver buffer to mass storage device */
#if RAM_DISK_APP
      USB_memcopy(lba_data_ptr->buff_ptr,
                  g_disk.storage_disk + lba_data_ptr->offset,
                  lba_data_ptr->size);
#elif SD_CARD_APP
      SD_Write_Block(lba_data_ptr);
#endif
      break;
    case USB_MSC_DEVICE_FORMAT_COMPLETE :
      break;
    case USB_MSC_DEVICE_REMOVAL_REQUEST :
      prevent_removal_ptr = (uint_8_ptr) val;
      if(SUPPORT_DISK_LOCKING_MECHANISM) {
        g_disk.disk_lock = *prevent_removal_ptr;
      } else if((!SUPPORT_DISK_LOCKING_MECHANISM)&&(!(*prevent_removal_ptr))) {
        /*there is no support for disk locking and removal of medium is enabled*/
        /* code to be added here for this condition, if required */
      }
      break;
    case USB_MSC_DEVICE_GET_INFO :
      device_lba_info_ptr = (PTR_DEVICE_LBA_INFO_STRUCT)val;
#if RAM_DISK_APP
      device_lba_info_ptr->total_lba_device_supports = TOTAL_LOGICAL_BLOCKS_ADDRESS;
      device_lba_info_ptr->length_of_each_lba_of_device = LENGTH_OF_EACH_LBA;
#elif SD_CARD_APP
      SD_Card_Info(&device_lba_info_ptr->total_lba_device_supports,
      &device_lba_info_ptr->length_of_each_lba_of_device);
#endif
      device_lba_info_ptr->num_lun_supported = LOGICAL_UNIT_SUPPORTED;
      break;
    default:
      break;
  } /* switch */
}
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG App_Callback
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\GeneralInternal.inc (App_Callback)
void %'ModuleName'%.App_Callback(uint8_t controller_ID, uint8_t event_type, void *val)
{
  UNUSED(controller_ID)
  UNUSED(val)
  if(event_type == USB_APP_BUS_RESET) {
    g_disk.start_app=FALSE;
  } else if(event_type == USB_APP_ENUM_COMPLETE) {
#if HIGH_SPEED_DEVICE
    _usb_device_recv_data(&controller_ID, BULK_OUT_ENDPOINT, (uint_8_ptr)msd_buff, BULK_OUT_ENDP_PACKET_SIZE);
#endif // HIGH_SPEED_DEVICE
    g_disk.start_app=TRUE;
  } else if(event_type == USB_APP_ERROR) {
    /* add user code for error handling */
  } else if(event_type == USB_APP_SEND_COMPLETE){
#if HIGH_SPEED_DEVICE
    _usb_device_recv_data(&controller_ID, BULK_OUT_ENDPOINT, (uint_8_ptr)msd_buff, BULK_OUT_ENDP_PACKET_SIZE);
#endif // HIGH_SPEED_DEVICE
  } else if(event_type == USB_APP_DATA_RECEIVED) {
#if HIGH_SPEED_DEVICE
    _usb_device_recv_data(&controller_ID, BULK_OUT_ENDPOINT, (uint_8_ptr)msd_buff, BULK_OUT_ENDP_PACKET_SIZE);
#endif // HIGH_SPEED_DEVICE
  }
}

%-INTERNAL_METHOD_END App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN App_Task
%ifdef App_Task
%define! RetVal
%include Common\FSL_USB_MSD_DeviceApp_Task.Inc
uint8_t %'ModuleName'%.%App_Task(void)
{
  /* call the periodic task function */
  USB_MSC_Periodic_Task();
  /* check whether enumeration is complete or not */
  if(g_disk.start_app==TRUE) {
    /* Disk_App(); */
  }
  return ERR_OK;
}

%endif %- App_Task
%-BW_METHOD_END App_Task
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%define! RetVal
%include Common\FSL_USB_MSD_DeviceDeinit.Inc
uint8_t %'ModuleName'%.%Deinit(void)
{
  uint8_t err;

  err = USB_Class_MSC_DeInit(CONTROLLER_ID);
  if(err != USB_OK) {
    /* Error initializing USB HID Class */
%if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_ERR_DEINIT);
%endif
    return ERR_FAILED;
  }
  USB_memzero(&g_disk, sizeof(DISK_GLOBAL_VARIABLE_STRUCT));
  return ERR_OK;
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%define! RetVal
%include Common\FSL_USB_MSD_DeviceInit.Inc
uint8_t %'ModuleName'%.%Init(void)
{
  uint_8 err;

  /* initialize the Global Variable Structure */
  USB_memzero(&g_disk, sizeof(DISK_GLOBAL_VARIABLE_STRUCT));
  g_disk.app_controller_ID = USB_CONTROLLER_ID;
  err = USB_Class_MSC_Init(g_disk.app_controller_ID, %'ModuleName'%.App_Callback, NULL, MSD_Event_Callback);
  if(err != USB_OK) {
    /* Error initializing USB HID Class */
%if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_ERR_INIT);
%endif
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN isEnumerated
%ifdef isEnumerated
%define! RetVal
%include Common\FSL_USB_MSD_DeviceisEnumerated.Inc
bool %'ModuleName'%.%isEnumerated(void)
{
  return g_disk.start_app;
}

%endif %- isEnumerated
%-BW_METHOD_END isEnumerated
%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%IMPLEMENTATION OnEvent
%define! Parerror
%include Common\FSL_USB_MSD_DeviceOnEvent.Inc
void %OnEvent(uint8_t error)
{
  /* Write your code here ... */
}

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    15.12.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\LowPowerSettings.Inc
%define! Abstract Common\LowPowerAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

extern bool %'ModuleName'_RecoveryThroughReset;                  %>40/* if we went through reset because of low power recovery */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN IsRecoveryThroughReset
%ifdef IsRecoveryThroughReset
#define %'ModuleName'%.%IsRecoveryThroughReset() \
  %'ModuleName'_RecoveryThroughReset

%define! RetVal
%include Common\LowPowerIsRecoveryThroughReset.Inc

%endif %- IsRecoveryThroughReset
%-BW_METHOD_END IsRecoveryThroughReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetRecoveryThroughReset
%ifdef SetRecoveryThroughReset
#define %'ModuleName'%.%SetRecoveryThroughReset(val) \
  (%'ModuleName'_RecoveryThroughReset = val)

%define! Parvalue
%include Common\LowPowerSetRecoveryThroughReset.Inc

%endif %- SetRecoveryThroughReset
%-BW_METHOD_END SetRecoveryThroughReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN InitializeRAMinInit
%ifdef InitializeRAMinInit
#define %'ModuleName'%.%InitializeRAMinInit() \
%if SpecialInit='no'
  TRUE /* for no special Init, we always need to initialize the RAM */
%elif SpecialInit='yes' & %RAMlostAfterRecovery='yes'
  TRUE /* RAM is always lost */
%elif SpecialInit='yes' & %RAMlostAfterRecovery='no'
  !%'ModuleName'_RecoveryThroughReset /* only init if we are not in recovery mode */
%endif

%define! RetVal
%include Common\LowPowerInitializeRAMinInit.Inc

%endif %- InitializeRAMinInit
%-BW_METHOD_END InitializeRAMinInit
%-************************************************************************************************************
%-BW_METHOD_BEGIN EntryPoint
%ifdef EntryPoint
void %'ModuleName'%.%EntryPoint(void);
%include Common\LowPowerEntryPoint.Inc

%endif %- EntryPoint
%-BW_METHOD_END EntryPoint
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\LowPowerSettings.Inc
%define! Abstract Common\LowPowerAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
bool %'ModuleName'_RecoveryThroughReset;                         %>40/* if we went through reset because of low power recovery */
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN IsRecoveryThroughReset
%ifdef IsRecoveryThroughReset
%define! RetVal
%include Common\LowPowerIsRecoveryThroughReset.Inc
#if 0
bool %'ModuleName'%.%IsRecoveryThroughReset(void)
{
  /* this method is implemented as macro in the header file %'ModuleName'.h */
  return %'ModuleName'_RecoveryThroughReset;
}
#endif

%endif %- IsRecoveryThroughReset
%-BW_METHOD_END IsRecoveryThroughReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetRecoveryThroughReset
%ifdef SetRecoveryThroughReset
%define! Parvalue
%include Common\LowPowerSetRecoveryThroughReset.Inc
#if 0
void %'ModuleName'%.%SetRecoveryThroughReset(bool value)
{
  /* this method is implemented as macro in the header file %'ModuleName'.h */
  %'ModuleName'_RecoveryThroughReset = TRUE;
}
#endif

%endif %- SetRecoveryThroughReset
%-BW_METHOD_END SetRecoveryThroughReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN InitializeRAMinInit
%ifdef InitializeRAMinInit
%define! RetVal
%include Common\LowPowerInitializeRAMinInit.Inc
#if 0
bool %'ModuleName'%.%InitializeRAMinInit(void)
{
  /* method is implemented as macro in the header file %'ModuleName'.h */
%if SpecialInit='no'
  return TRUE; /* for no special Init, we always need to initialize the RAM */
%elif SpecialInit='yes' & %RAMlostAfterRecovery='yes'
  return TRUE; /* RAM is always lost */
%elif SpecialInit='yes' & %RAMlostAfterRecovery='no'
  return !%'ModuleName'_RecoveryThroughReset; /* only init if we are not in recovery mode */
%endif
}
#endif

%endif %- InitializeRAMinInit
%-BW_METHOD_END InitializeRAMinInit
%-************************************************************************************************************
%-BW_METHOD_BEGIN EntryPoint
%ifdef EntryPoint
%include Common\LowPowerEntryPoint.Inc
void %'ModuleName'%.%EntryPoint(void)
{
  /* Below is code which should be executed at the beginning of _EntryPoint().
     The code has been written for STOP2 mode on the S08 (GB60/GT60) and will
     need modification for other derivatives/cores.
     In Processor Expert you may need to copy this code into the CPU component >
     Build Options > User Initialization > User code before PE initialization.
     Please note the copy of source may be necessary as the stack is not set up
     at _EntryPoint() time and as such you cannot do a call to a subroutine.
     Additionally you need to include some files in the CPU component >
     Build Options > User Initialization > User Data Declarations:
#include "platform.h"       // this defines macros like PL_HAS_LOW_POWER_STOP, ...
#include "%'ModuleName'.h"  // we need our own header file
#include "LED1.h"           // if we want to toggle a LED...
   */
#if 0 /* example code */
  /* Common initialization of the write once registers */
  #if PL_HAS_LOW_POWER_STOP
    #if PL_HAS_WATCHDOG
      /* SOPT: COPE=1,COPT=1,STOPE=1,??=0,??=0,??=0,BKGDPE=1,??=1 */
      setReg8(SOPT, (SOPT_COPT_MASK|SOPT_STOPE_MASK|SOPT_BKGDPE_MASK|0x11) |SOPT_COPE_MASK); /* long COP timeout, disable watchdog and enable stop mode */
    #else
      /* SOPT: COPE=0,COPT=1,STOPE=1,??=0,??=0,??=0,BKGDPE=1,??=1 */
      setReg8(SOPT, (SOPT_COPT_MASK|SOPT_STOPE_MASK|SOPT_BKGDPE_MASK|0x11)); /* long COP timeout, disable watchdog and enable stop mode */
    #endif
  #else
    /* SOPT: COPE=0,COPT=1,STOPE=0,??=1,??=0,??=0,BKGDPE=1,??=1 */
    setReg8(SOPT, /*0x53*/(SOPT_COPT_MASK|SOPT_BKGDPE_MASK|0x11)); /* long COP timeout, disable watchdog */
  #endif
    //setReg8Bits(PTDDD, PTDDD_PTDDD4_MASK); /* set as output */
    //LED1_On();
    /* PM Status and control registers */
  #if PL_HAS_LOW_POWER_STOP2
    /* disable LVDE in STOP mode */
    /* SPMSC1: LVDF=0,LVDACK=0,LVDIE=0,LVDRE=1,LVDSE=0,LVDE=1,??=0,??=0 */
    setReg8(SPMSC1, 0x14);
  #else
    /* SPMSC1: LVDF=0,LVDACK=0,LVDIE=0,LVDRE=1,LVDSE=1,LVDE=1,??=0,??=0 */
    setReg8(SPMSC1, 0x1C);
  #endif
  #if PL_HAS_LOW_POWER_STOP2
    LP1_SetRecoveryThroughReset(SPMSC2_PPDF); /* 0: is normal POR reset, 1 is from STOP2: recovery needed. */
    if(!LP1_IsRecoveryThroughReset()) { /* 0: is normal POR reset, 1 is from STOP2: recovery needed. */
      /* normal reset: set up SPMSC2 for STOP2 mode */
      /* SPMSC2: LVWF=0,LVWACK=0,LVDV=0,LVWV=0,PPDF=0,PPDACK=0,PDC=1,PPDC=1 */
      setReg8(SPMSC2, 0x03);
    }
    /* set up RTI for wake up every 1 second */
    setReg8(SRTISC, 0x17); /* Run RTI (select clock source, set frequency and enable interrupt ) */
    setReg8(IRQSC, 0x10); /* need to init IRQ pin, otherwise we will directly get an IRQ (see AN2493.pdf) */

    if(LP1_IsRecoveryThroughReset()) { /* how did we get here? */
      /* recovery from STOP2: acknowledge STOP2 recovery */
      setReg8Bits(SPMSC2, SPMSC2_PPDACK_MASK|SPMSC2_PDC_MASK|SPMSC2_PPDC_MASK);
      asm {
        L:
          bil L ; wait while IRQ is low (debounce)
      }
      /* now do the recovery from stop2 mode */
      INIT_SP_FROM_STARTUP_DESC(); /* need to set stack pointer again, but we do not do the whole ANSI startup code */
      asm jmp main;
    }
  #endif
#endif /* if 0 */
}

%endif %- EntryPoint
%-BW_METHOD_END EntryPoint
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

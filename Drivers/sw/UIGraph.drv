%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_PaintWidget Paints the widget
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UIGraphSettings.Inc
%define! Abstract Common\UIGraphAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

typedef %@UI@'ModuleName'%.PixelColor %'ModuleName'%.PixelColor; %>40/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim %'ModuleName'%.PixelDim;     %>40/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Screen %'ModuleName'%.Screen;         %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Window %'ModuleName'%.Window;         %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Element %'ModuleName'%.Element;       %>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.EventCallbackKind %'ModuleName'%.EventCallbackKind;%>40/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Pvoid %'ModuleName'%.Pvoid;           %>40/* Alias to Pvoid data type */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;

/* --- Element: Graph --- */
typedef struct {
  %@UI@'ModuleName'%.Element element;                            %>40/* the base element, always first in structure */
  %@UI@'ModuleName'%.Window *window;                             %>40/* need pointer to parent window */
  %'ModuleName'_PixelDim cursor;                                 %>40/* actual scope cursor */
} %'ModuleName'_Graph;

typedef struct {
  uint8_t data;                                                  %>40/* data, in the range 0..100 */
  %@UI@'ModuleName'%.PixelColor color;                           %>40/* color for data point */
} %'ModuleName'_DataPoint;

%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateGraph
%ifdef CreateGraph
byte %'ModuleName'%.%CreateGraph(%'ModuleName'_Window *window, %'ModuleName'_Graph *widget, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height);
%define! Parwindow
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parwidget
%define! RetVal
%include Common\UIGraphCreateGraph.Inc

%endif %- CreateGraph
%-BW_METHOD_END CreateGraph
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddDataLine
%ifdef AddDataLine
byte %'ModuleName'%.%AddDataLine(%'ModuleName'_Element *element, %'ModuleName'_DataPoint *prevDataP, %'ModuleName'_DataPoint *dataP, byte nofData);
%define! PardataP
%define! ParnofData
%define! Parelement
%define! ParprevDataP
%define! RetVal
%include Common\UIGraphAddDataLine.Inc

%endif %- AddDataLine
%-BW_METHOD_END AddDataLine
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%INTERFACE OnEvent
void %OnEvent(%'ModuleName'_Screen *screen, %'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind event);
%define! Parscreen
%define! Parwindow
%define! Parelement
%define! Parevent
%include Common\UIGraphOnEvent.Inc

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UIGraphSettings.Inc
%define! Abstract Common\UIGraphAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#ifndef NULL
  #define NULL ((void*)0)
#endif
#define %'ModuleName'_DATA_BORDER   %DataBorder /* border around data in widget */
#define %'ModuleName'_CURSOR_COLOR  %@UI@'ModuleName'%.COLOR_%CursorLineColor /* color used for cursor */
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG PaintWidget
static byte PaintWidget(%'ModuleName'_Window *window, %'ModuleName'_Element *element);
%-INTERNAL_LOC_METHOD_END PaintWidget
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG PaintWidget
%define! Parwindow
%define! Parelement
%define! RetVal
%include Common\GeneralInternalGlobal.inc (PaintWidget)
static byte PaintWidget(%'ModuleName'_Window *window, %'ModuleName'_Element *element)
{
  if (element == NULL) {
    return ERR_FAILED;
  }
  if (element->prop.type != %@UI@'ModuleName'%.GRAPH) {
    return ERR_FAILED;
  }
  (void)window;
  return ERR_OK;
}

%-INTERNAL_METHOD_END PaintWidget
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateGraph
%ifdef CreateGraph
%define! Parwindow
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parwidget
%define! RetVal
%include Common\UIGraphCreateGraph.Inc
byte %'ModuleName'%.%CreateGraph(%'ModuleName'_Window *window, %'ModuleName'_Graph *widget, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height)
{
  %@UI@'ModuleName'%.PixelColor bgColor = %@UI@'ModuleName'%.COLOR_%GraphBackgroundColor;

  if (window == NULL || widget == NULL) {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.ElementInitCommon((%@UI@'ModuleName'%.Element*)widget, %@UI@'ModuleName'%.GRAPH,
    x, y, width, height,
    bgColor, (%@UI@'ModuleName'%.painterCallback)PaintWidget);
  if (%@UI@'ModuleName'%.WindowAddElement(window, (%@UI@'ModuleName'%.Element*)widget) != ERR_OK) {
    return ERR_FAILED;
  }
  /* own data fields */
  widget->window = window;
  widget->cursor = 0;
  return ERR_OK;
}

%endif %- CreateGraph
%-BW_METHOD_END CreateGraph
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddDataLine
%ifdef AddDataLine
%define! PardataP
%define! ParnofData
%define! Parelement
%define! ParprevDataP
%define! RetVal
%include Common\UIGraphAddDataLine.Inc
byte %'ModuleName'%.%AddDataLine(%'ModuleName'_Element *element, %'ModuleName'_DataPoint *prevDataP, %'ModuleName'_DataPoint *dataP, byte nofData)
{
  %'ModuleName'_Graph *graph;
  %'ModuleName'_PixelDim x, y, w, h;
  uint8_t data, prevData;

  if (element == NULL) {
    return ERR_FAILED;
  }
  if (element->prop.type != %@UI@'ModuleName'%.GRAPH) {
    return ERR_FAILED;
  }
  graph = (%'ModuleName'_Graph*)element;
  x = element->prop.x + graph->cursor + %'ModuleName'_DATA_BORDER;
  y = element->prop.y + %'ModuleName'_DATA_BORDER;
  w = element->prop.width - (2*%'ModuleName'_DATA_BORDER);
  h = element->prop.height - (2*%'ModuleName'_DATA_BORDER);
  %@UI@'ModuleName'%.DrawVLine(graph->window, x, y, h, graph->element.prop.color); /* use background color to clear data */
  /* draw data points */
  while (nofData>0) { /* iterate through all the data points */
    data = dataP->data;
    /* make sure it is in the range of 0..100 */
    if (data>100) {
      data = 100;
    } else if (data<0) {
      data = 0;
    }
    if (prevDataP != NULL && graph->cursor > 0) { /* draw line */
      prevData = prevDataP->data;
      /* make sure it is in the range of 0..100 */
      if (prevData>100) {
        prevData = 100;
      } else if (prevData<0) {
        prevData = 0;
      }
      %@UI@'ModuleName'%.DrawLine(graph->window, (%'ModuleName'_PixelDim)(x-1), (%'ModuleName'_PixelDim)(y+h-1-(((h-1)*prevData)/100)),
        x, (%'ModuleName'_PixelDim)(y+h-1-(((h-1)*data)/100)), dataP->color); /* draw line from previous to new point */
      prevDataP++;
    } else { /* draw dot */
      %@UI@'ModuleName'%.DrawVLine(graph->window, x, (%'ModuleName'_PixelDim)(y+h-1-(((h-1)*data)/100)), 1, dataP->color); /* draw data point */
    }
    nofData--;
    dataP++;
  }
  graph->cursor++;
  if (graph->cursor<w) {
    %@UI@'ModuleName'%.DrawVLine(graph->window, x+1, y, h, %'ModuleName'_CURSOR_COLOR); /* draw line to show progress */
  }
  if (graph->cursor>w) { /* check for overflow */
    graph->cursor = 0;
  }
  return ERR_OK;
}

%endif %- AddDataLine
%-BW_METHOD_END AddDataLine
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%IMPLEMENTATION OnEvent
%define! Parscreen
%define! Parwindow
%define! Parelement
%define! Parevent
%include Common\UIGraphOnEvent.Inc
void %OnEvent(%'ModuleName'_Screen *screen, %'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind event)
{
  /* Write your code here ... */
}

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

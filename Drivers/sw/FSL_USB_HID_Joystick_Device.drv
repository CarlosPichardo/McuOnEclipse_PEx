%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    13.12.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_App_Callback Method to handle class callbacks from USB
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%- copy files
%include FSL_USB_HID_Joystick_Device_Files.prg
%-
%-
%INTERFACE
%define! Settings Common\FSL_USB_HID_Joystick_DeviceSettings.Inc
%define! Abstract Common\FSL_USB_HID_Joystick_DeviceAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include <stddef.h> /* for size_t */
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"
#include "usb_descriptor.h"

#define  REQ_DATA_SIZE         (1)

/* error/event codes for events */
#define %'ModuleName'%.USB_ERR_INIT            1  /* USB initialization error */
#define %'ModuleName'%.USB_APP_BUS_RESET       2  /* bus has reset */
#define %'ModuleName'%.USB_APP_ENUM_COMPLETE   3  /* device enumeration completed */
#define %'ModuleName'%.USB_APP_ERROR           4  /* application error */
#define %'ModuleName'%.USB_APP_BUS_SUSPEND     5  /* bus asks for suspend */
#define %'ModuleName'%.USB_APP_BUS_RESUME      6  /* bus resumed */
#define %'ModuleName'%.USB_APP_SEND_COMPLETE   7  /* sending message completed */
#define %'ModuleName'%.USB_APP_NUMLOCK_ON      8  /* request from host to turn NumLock on */
#define %'ModuleName'%.USB_APP_NUMLOCK_OFF     9  /* request from host to turn NumLock off */
#define %'ModuleName'%.USB_ERR_DEINIT         10  /* USB deinitialization error */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
uint8_t %'ModuleName'%.%Init(void);
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN App_Task
%ifdef App_Task
uint8_t %'ModuleName'%.%App_Task(void);
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceApp_Task.Inc

%endif %- App_Task
%-BW_METHOD_END App_Task
%-************************************************************************************************************
%-BW_METHOD_BEGIN USB_App_Callback
%ifdef USB_App_Callback
void %'ModuleName'%.%USB_App_Callback(byte controller_ID, byte event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\FSL_USB_HID_Joystick_DeviceUSB_App_Callback.Inc

%endif %- USB_App_Callback
%-BW_METHOD_END USB_App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN USB_Notify_Callback
%ifdef USB_Notify_Callback
void %'ModuleName'%.%USB_Notify_Callback(byte controller_ID, byte event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\FSL_USB_HID_Joystick_DeviceUSB_Notify_Callback.Inc

%endif %- USB_Notify_Callback
%-BW_METHOD_END USB_Notify_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN Notify_Callback
%ifdef Notify_Callback
void %'ModuleName'%.%Notify_Callback(byte request, word value, word wIndex, byte** data, USB_PACKET_SIZE* size);
%define! Parrequest
%define! Parvalue
%define! ParwIndex
%define! Pardata
%define! Parsize
%include Common\FSL_USB_HID_Joystick_DeviceNotify_Callback.Inc

%endif %- Notify_Callback
%-BW_METHOD_END Notify_Callback
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG App_Callback
void %'ModuleName'%.App_Callback(uint8_t controller_ID, uint8_t event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\GeneralInternal.inc (App_Callback)

%-INTERNAL_METHOD_END App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
uint8_t %'ModuleName'%.%Deinit(void);
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN isEnumerated
%ifdef isEnumerated
bool %'ModuleName'%.%isEnumerated(void);
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceisEnumerated.Inc

%endif %- isEnumerated
%-BW_METHOD_END isEnumerated
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetButton
%ifdef SetButton
uint8_t %'ModuleName'%.%SetButton(uint8_t button, bool isOn);
%define! Parbutton
%define! ParisOn
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceSetButton.Inc

%endif %- SetButton
%-BW_METHOD_END SetButton
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetXY
%ifdef SetXY
uint8_t %'ModuleName'%.%SetXY(int8_t x, int8_t y);
%define! Parx
%define! Pary
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceSetXY.Inc

%endif %- SetXY
%-BW_METHOD_END SetXY
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetThrottle
%ifdef SetThrottle
uint8_t %'ModuleName'%.%SetThrottle(int8_t throttle);
%define! Parthrottle
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceSetThrottle.Inc

%endif %- SetThrottle
%-BW_METHOD_END SetThrottle
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetHatPos
%ifdef SetHatPos
uint8_t %'ModuleName'%.%SetHatPos(uint8_t position);
%define! Parposition
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceSetHatPos.Inc

%endif %- SetHatPos
%-BW_METHOD_END SetHatPos
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%INTERFACE OnEvent
void %OnEvent(uint8_t error);
%define! Parerror
%include Common\FSL_USB_HID_Joystick_DeviceOnEvent.Inc

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\FSL_USB_HID_Joystick_DeviceSettings.Inc
%define! Abstract Common\FSL_USB_HID_Joystick_DeviceAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include "hidef.h"          /* for EnableInterrupts macro */
#include "derivative.h"     /* include peripheral declarations */
#include "types.h"          /* Contains User Defined Data Types */
#include <stdio.h>
/* skip the inclusion in dependency state */
#ifndef __NO_SETJMP
  #include <stdio.h>
#endif
#include <stdlib.h>
#include <string.h>
#include "usb_hid.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#define CONTROLLER_ID      (0)   /* ID to identify USB CONTROLLER */

static boolean joystick_init=FALSE;           /* Joystick App Init Flag */
static uint8_t rpt_buf[JOYSTICK_BUFF_SIZE];      /* Key Press Report Buffer */
static uint8_t g_app_request_params[2];        /* for get/set idle and protocol requests */
static volatile boolean transactionOngoing = FALSE; /* flag to know if a transaction is currently ongoing */
/*****************************************************************************
 * Local Functions
 *****************************************************************************/
/******************************************************************************
 *
 *    @name        USB_App_Param_Callback
 *
 *    @brief       This function handles USB-HID Class callback
 *
 *    @param       request  :  request type
 *    @param       value    :  give report type and id
 *    @param       data     :  pointer to the data
 *    @param       size     :  size of the transfer
 *
 *    @return      status
 *                 USB_OK   :  Always
 *
 *****************************************************************************
 * This function is called whenever a HID class request is received. This
 * function handles these class requests.
 *****************************************************************************/
static uint8_t USB_App_Param_Callback (
      uint8_t request,       /* [IN] request type */
      uint_16 value,         /* [IN] report type and ID */
      uint_16 wIndex,        /* [IN] Interface */
      uint8_t** data,        /* [OUT] pointer to the data */
      USB_PACKET_SIZE* size  /* [OUT] size of the transfer */
)
{
  uint8_t status = USB_OK;
  uint8_t index = (byte)((request - 2) & USB_HID_REQUEST_TYPE_MASK);
                                       /* index == 0 for get/set idle,
                                          index == 1 for get/set protocol */
  (void)wIndex;
  *size = 0;
  /* handle the class request */
  switch(request) {
    case USB_HID_GET_REPORT_REQUEST:
      *data = &rpt_buf[0]; /* point to the report to send */
      *size = JOYSTICK_BUFF_SIZE; /* report size */
       break;

    case USB_HID_SET_REPORT_REQUEST:
      for(index=0; index<JOYSTICK_BUFF_SIZE; index++) {
        rpt_buf[index] = *(*data+index); /* copy the data sent by the host */
      }
      break;

    case USB_HID_GET_IDLE_REQUEST:
      /* point to the current idle rate */
      *data = &g_app_request_params[index];
      *size = REQ_DATA_SIZE;
      break;

    case USB_HID_SET_IDLE_REQUEST:
      /* set the idle rate sent by the host */
      if(index <2) {
        g_app_request_params[index] =(byte)((value & MSB_MASK) >> HIGH_BYTE_SHIFT);
      }
      break;

    case USB_HID_GET_PROTOCOL_REQUEST:
      /* point to the current protocol code
        0 = Boot Protocol
        1 = Report Protocol*/
      *data = &g_app_request_params[index];
      *size = REQ_DATA_SIZE;
      break;

    case USB_HID_SET_PROTOCOL_REQUEST:
      /* set the protocol sent by the host
         0 = Boot Protocol
         1 = Report Protocol*/
      if(index < 2) {
        g_app_request_params[index] = (byte)(value);
      }
      break;
    }
    return status;
}
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG App_Callback
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\GeneralInternal.inc (App_Callback)
void %'ModuleName'%.App_Callback(uint8_t controller_ID, uint8_t event_type, void *val)
{
  UNUSED(controller_ID)
  UNUSED(val)
  if((event_type == USB_APP_BUS_RESET) || (event_type == USB_APP_CONFIG_CHANGED)) {
    joystick_init=FALSE;
    transactionOngoing = FALSE;
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_BUS_RESET);
    %endif
  } else if(event_type == USB_APP_ENUM_COMPLETE) {
    /* if enumeration is complete set joystick_init so that application can start */
    joystick_init=TRUE;
    transactionOngoing = FALSE;
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_ENUM_COMPLETE);
    %endif
  } else if(event_type == USB_APP_ERROR) {
    joystick_init=FALSE;
    transactionOngoing = FALSE;
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_ERROR);
    %endif
  } else if (event_type == USB_APP_BUS_SUSPEND) {
    joystick_init=FALSE;
    transactionOngoing = FALSE;
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_BUS_SUSPEND);
    %endif
  } else if (event_type == USB_APP_BUS_RESUME) {
   /* For the joystick application, it is best to let the main app
    * handle all resume processing. Because of the software flow, we know
    * that after initiating the STOP mode and waking up, the application
    * will just continue, so we can resume there.
    */
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_BUS_RESUME);
    %endif
  } else if (event_type==USB_APP_SEND_COMPLETE && joystick_init) {
    transactionOngoing = FALSE;
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_SEND_COMPLETE);
    %endif
  }
}

%-INTERNAL_METHOD_END App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN App_Task
%ifdef App_Task
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceApp_Task.Inc
uint8_t %'ModuleName'%.%App_Task(void)
{
  uint16_t hidCode; /* upper 8bits are modifier, lower 8bits are hid code value */

  /* device is %CPUDevice */
%if (CPUDevice="MC9S08JE128") | (CPUDevice="MC9S08JM16") | (CPUDevice="MC9S08JM60") | (CPUDevice="MC9S08JS16") | (CPUDevice="MC9S08MM128")
  if (USB_PROCESS_PENDING()) { /* doing this only for MC9S08JE128, MC9S08JM16, MC9S08JM60, MC9S08JS16 and MC9S08MM128 */
    USB_Engine();
  }
%endif
  USB_Class_HID_Periodic_Task(); /* call the periodic task function */
  if (!joystick_init) {
    return ERR_BUSOFF; /* USB bus not available yet */
  }
  transactionOngoing = TRUE;
  if (USB_Class_HID_Send_Data(CONTROLLER_ID, HID_ENDPOINT, rpt_buf, sizeof(rpt_buf))!=USB_OK) {
    transactionOngoing = FALSE;
    return ERR_FAILED;
  }
  while(transactionOngoing) {
    /* wait until we send the next transaction */
%if (CPUDevice="MC9S08JE128") | (CPUDevice="MC9S08JM16") | (CPUDevice="MC9S08JM60") | (CPUDevice="MC9S08JS16") | (CPUDevice="MC9S08MM128")
    if (USB_PROCESS_PENDING()) { /* doing this only for MC9S08JE128, MC9S08JM16, MC9S08JM60, MC9S08JS16 and MC9S08MM128 */
      USB_Engine();
    }
%endif
  } /* while */
  return ERR_OK;
}

%endif %- App_Task
%-BW_METHOD_END App_Task
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceDeinit.Inc
uint8_t %'ModuleName'%.%Deinit(void)
{
  uint8_t err;

  err = USB_Class_HID_DeInit(CONTROLLER_ID);
  transactionOngoing = FALSE;
  joystick_init = FALSE;
  if(err != USB_OK) {
    /* Error initializing USB HID Class */
%if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_ERR_DEINIT);
%endif
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceInit.Inc
uint8_t %'ModuleName'%.%Init(void)
{
  uint8_t err;
  int i;

  for(i=0; i<sizeof(rpt_buf); i++) {
    rpt_buf[i] = 0;
  }
  transactionOngoing = FALSE;
  joystick_init = FALSE;
  err = USB_Class_HID_Init(CONTROLLER_ID, %'ModuleName'%.App_Callback, NULL, USB_App_Param_Callback);
  if(err != USB_OK) {
    /* Error initializing USB HID Class */
%if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_ERR_INIT);
%endif
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN isEnumerated
%ifdef isEnumerated
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceisEnumerated.Inc
bool %'ModuleName'%.%isEnumerated(void)
{
  return joystick_init;
}

%endif %- isEnumerated
%-BW_METHOD_END isEnumerated
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetButton
%ifdef SetButton
%define! Parbutton
%define! ParisOn
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceSetButton.Inc
uint8_t %'ModuleName'%.%SetButton(uint8_t button, bool isOn)
{
#if JOYSTICK_NOF_BUTTONS>0
  if (button>=JOYSTICK_NOF_BUTTONS) {
    return ERR_RANGE;
  }
  if (isOn) {
    rpt_buf[JOYSTICK_BUFF_INDEX_BUTTONS] |= 1<<(button%8); /* set bit */
  } else {
    rpt_buf[JOYSTICK_BUFF_INDEX_BUTTONS] &= ~(1<<(button%8));
  }
  return ERR_OK;
#else
  return ERR_RANGE;
#endif
}

%endif %- SetButton
%-BW_METHOD_END SetButton
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetXY
%ifdef SetXY
%define! Parx
%define! Pary
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceSetXY.Inc
uint8_t %'ModuleName'%.%SetXY(int8_t x, int8_t y)
{
#if JOYSTICK_NOF_ANALOG>0
  rpt_buf[JOYSTICK_BUFF_INDEX_ANALOG_X] = x;
  rpt_buf[JOYSTICK_BUFF_INDEX_ANALOG_Y] = y;
  return ERR_OK;
#else
  return ERR_RANGE;
#endif
}

%endif %- SetXY
%-BW_METHOD_END SetXY
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetThrottle
%ifdef SetThrottle
%define! Parthrottle
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceSetThrottle.Inc
uint8_t %'ModuleName'%.%SetThrottle(int8_t throttle)
{
#if JOYSTICK_NOF_THROTTLE>0
  rpt_buf[JOYSTICK_BUFF_INDEX_THROTTLE] = throttle;
  return ERR_OK;
#else
  return ERR_RANGE;
#endif
}

%endif %- SetThrottle
%-BW_METHOD_END SetThrottle
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetHatPos
%ifdef SetHatPos
%define! Parposition
%define! RetVal
%include Common\FSL_USB_HID_Joystick_DeviceSetHatPos.Inc
uint8_t %'ModuleName'%.%SetHatPos(uint8_t position)
{
#if JOYSTICK_NOF_HAT>0
  rpt_buf[JOYSTICK_BUFF_INDEX_HAT] = position;
  return ERR_OK;
#else
  return ERR_RANGE;
#endif
}

%endif %- SetHatPos
%-BW_METHOD_END SetHatPos
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%IMPLEMENTATION OnEvent
%define! Parerror
%include Common\FSL_USB_HID_Joystick_DeviceOnEvent.Inc
void %OnEvent(uint8_t error)
{
  /* Write your code here ... */
}

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    03.07.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%ifdef IoExpander
  %ifdef @IoExpander@OnInterrupt
    %define! Description_%@IoExpander@OnInterrupt  The event services the event of the inherited component and eventually invokes other events.
  %endif %- @IoExpander@OnInterrupt
%endif %- IoExpander
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\PCA9554BitIOSettings.Inc
%define! Abstract Common\PCA9554BitIOAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
/* device register addresses */

%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
bool %'ModuleName'%.%GetVal(void);
%define! RetVal
%include Common\PCA9554BitIOGetVal.Inc

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetVal
%ifdef SetVal
void %'ModuleName'%.%SetVal(void);
%include Common\PCA9554BitIOSetVal.Inc

%endif %- SetVal
%-BW_METHOD_END SetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClrVal
%ifdef ClrVal
void %'ModuleName'%.%ClrVal(void);
%include Common\PCA9554BitIOClrVal.Inc

%endif %- ClrVal
%-BW_METHOD_END ClrVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegVal
%ifdef NegVal
void %'ModuleName'%.%NegVal(void);
%include Common\PCA9554BitIONegVal.Inc

%endif %- NegVal
%-BW_METHOD_END NegVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutVal
%ifdef PutVal
void %'ModuleName'%.%PutVal(bool Val);
%define! ParVal
%include Common\PCA9554BitIOPutVal.Inc

%endif %- PutVal
%-BW_METHOD_END PutVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN InitPCA9554
%ifdef InitPCA9554
void %'ModuleName'%.%InitPCA9554(void);
%include Common\PCA9554BitIOInitPCA9554.Inc

%endif %- InitPCA9554
%-BW_METHOD_END InitPCA9554
%-INHERITED_EVENT_BEGIN IoExpander OnInterrupt
%ifdef @IoExpander@OnInterrupt
void %@IoExpander@OnInterrupt(void);

%endif %- @IoExpander@OnInterrupt
%-INHERITED_EVENT_END IoExpander OnInterrupt
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnInterruptPCA9554
%ifdef OnInterruptPCA9554
%INTERFACE OnInterruptPCA9554
void %OnInterruptPCA9554(void);
%include Common\PCA9554BitIOOnInterruptPCA9554.Inc

%endif %- OnInterruptPCA9554
%-BW_METHOD_END OnInterruptPCA9554
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\PCA9554BitIOSettings.Inc
%define! Abstract Common\PCA9554BitIOAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%define! RetVal
%include Common\PCA9554BitIOGetVal.Inc
bool %'ModuleName'%.%GetVal(void)
{
  /* read input bit */
  if(%Direction==0){
    if(%@IoExpander@'ModuleName'%.ReadInputBit(%Pin)!=1) return TRUE;
    else return FALSE;
  }
  /* get output bit */
  else{
    if(%@IoExpander@'ModuleName'%.GetOutputBit(%Pin)!=1) return TRUE;
    else return FALSE;
  }
}

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetVal
%ifdef SetVal
%include Common\PCA9554BitIOSetVal.Inc
void %'ModuleName'%.%SetVal(void)
{
  %@IoExpander@'ModuleName'%.SetOutputBit(%Pin);
}

%endif %- SetVal
%-BW_METHOD_END SetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClrVal
%ifdef ClrVal
%include Common\PCA9554BitIOClrVal.Inc
void %'ModuleName'%.%ClrVal(void)
{
  %@IoExpander@'ModuleName'%.ClearOutputBit(%Pin);
}

%endif %- ClrVal
%-BW_METHOD_END ClrVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegVal
%ifdef NegVal
%include Common\PCA9554BitIONegVal.Inc
void %'ModuleName'%.%NegVal(void)
{
  %@IoExpander@'ModuleName'%.NegOutputBit(%Pin);
}

%endif %- NegVal
%-BW_METHOD_END NegVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutVal
%ifdef PutVal
%define! ParVal
%include Common\PCA9554BitIOPutVal.Inc
void %'ModuleName'%.%PutVal(bool Val)
{
  if(Val){
    %@IoExpander@'ModuleName'%.SetOutputBit(%Pin);
  }
  else {
    %@IoExpander@'ModuleName'%.ClearOutputBit(%Pin);
  }
}

%endif %- PutVal
%-BW_METHOD_END PutVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN InitPCA9554
%ifdef InitPCA9554
%include Common\PCA9554BitIOInitPCA9554.Inc
void %'ModuleName'%.%InitPCA9554(void)
{
  byte input;
  /* direction input */
  if(%Direction==0){
    /* set the selected bit as an input and takes the existing bits over */
    %@IoExpander@'ModuleName'%.WriteConfig(%@IoExpander@'ModuleName'%.ReadConfig()|(1<<%Pin));
  }
  /* direction output */
  else{
    /* set the selected bit as an output and takes the existing bits over */
    %@IoExpander@'ModuleName'%.WriteConfig(%@IoExpander@'ModuleName'%.ReadConfig()&~(1<<%Pin));
  }
  /* The interrupt is deactivated when the input returns to its previous state or
  the Input Port register is read */
  input = %@IoExpander@'ModuleName'%.ReadInput();
}

%endif %- InitPCA9554
%-BW_METHOD_END InitPCA9554
%-INHERITED_EVENT_BEGIN IoExpander OnInterrupt
%ifdef @IoExpander@OnInterrupt
%include Common\GeneralInternal.inc (OnInterrupt)
void %@IoExpander@OnInterrupt(void)
{
  %if defined(OnInterruptPCA9554)
  %OnInterruptPCA9554();
  %endif
}

%endif %- @IoExpander@OnInterrupt
%-INHERITED_EVENT_END IoExpander OnInterrupt
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnInterruptPCA9554
%ifdef OnInterruptPCA9554
%IMPLEMENTATION OnInterruptPCA9554
%include Common\PCA9554BitIOOnInterruptPCA9554.Inc
void %OnInterruptPCA9554(void)
{
  /* Write your code here ... */
}

%endif %- OnInterruptPCA9554
%-BW_METHOD_END OnInterruptPCA9554
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Init. the IO-Expander*/
  %ifdef InitPCA9554
  %'ModuleName'%.%InitPCA9554();
  %endif %- InitPCA9554
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

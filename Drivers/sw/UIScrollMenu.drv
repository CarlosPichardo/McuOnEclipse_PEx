%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.09.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Paint Paints the widget
%define! Description_MsgHandler Callback used for widget events
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\UIScrollMenuSettings.Inc
%define! Abstract Common\UIScrollMenuAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

typedef %@UI@'ModuleName'%.PixelColor                            %>30 %'ModuleName'%.PixelColor; %>55/* type large enough to hold the color information */
typedef %@UI@'ModuleName'%.PixelDim                              %>30 %'ModuleName'%.PixelDim; %>55/* type big enough to hold the x and y coordinates */
typedef %@UI@'ModuleName'%.Element                               %>30 %'ModuleName'%.Element;       %>55/* Alias to UserInterface type */
typedef %@TextWidget@'ModuleName'%.TextWidget                    %>30 %'ModuleName'%.TextWidget;%>55/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.MsgKind                               %>30 %'ModuleName'%.MsgKind;       %>55/* Alias to UserInterface type */
typedef %@UI@'ModuleName'%.Pvoid                                 %>30 %'ModuleName'%.Pvoid;           %>55/* Alias to Pvoid data type */
typedef %@UI@'ModuleName'%.FontCallbacks                         %>30 %'ModuleName'%.FontCallbacks;%>55/* Callback to retrieve font information. */
typedef %@UI@'ModuleName'%.painterCallback                       %>30 %'ModuleName'%.painterCallback;%>55/* Alias to UserInterface type */

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
typedef struct {
  %@UI@'ModuleName'%.Element element;                            %>40/* the base element, always first in structure */
%ifdef SetUserMsgHandler
  %@UI@'ModuleName'%.MsgHandler userMsgHandler;                  %>40/* optional user callback */
%endif %- SetUserMsgHandler
  %@TextWidget@'ModuleName'%.TextWidget textWidget;              %>40/* label */
  %@UI@'ModuleName'%.PixelColor boxBgColor;                      %>40/* background fill color or the box */
  %@UI@'ModuleName'%.PixelColor boxLineColor;                    %>40/* foreground line color or the box */
  uint8_t selectedIndex;                                         %>40/* index of currently selected item. The items itself are part of the TextWidget, separated by \r */
} %'ModuleName'_ScrollMenuWidget;

/* default properties */
#define %'ModuleName'_DEFAULT_TEXT                   "%DefaultText" /* default menu text */
#define %'ModuleName'_DEFAULT_BG_COLOR               %@UI@'ModuleName'%.COLOR_%DefaultBackgroundColor /* default background color */
#define %'ModuleName'_DEFAULT_LINE_COLOR             %@UI@'ModuleName'%.COLOR_%DefaultLineColor /* default line color */
#define %'ModuleName'_SCROLLMENU_LINE_WIDTH          1 /* width of line used for scroll menu */
#define %'ModuleName'_SCROLLMENU_TEXT_BORDER_WIDTH   1 /* width of space around scroll menu text (between lines and text) */
#define %'ModuleName'_SCROLLMENU_NOF_CHARS           %ScrollMenuNofChars /* number of characters in a single scroll menu line */

%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
#define %'ModuleName'%.%SetUserMsgHandler(widget, handler) \
  (widget)->userMsgHandler = handler

%define! Parhandler
%define! Parwidget
%include Common\UIScrollMenuSetUserMsgHandler.Inc

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
byte %'ModuleName'%.%Create(%'ModuleName'_Element *parent, %'ModuleName'_ScrollMenuWidget *widget, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height);
%define! Parparent
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parwidget
%define! RetVal
%include Common\UIScrollMenuCreate.Inc

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofItems
%ifdef NofItems
byte %'ModuleName'%.%NofItems(%'ModuleName'_ScrollMenuWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UIScrollMenuNofItems.Inc

%endif %- NofItems
%-BW_METHOD_END NofItems
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCurrentMenuIndex
%ifdef GetCurrentMenuIndex
byte %'ModuleName'%.%GetCurrentMenuIndex(%'ModuleName'_ScrollMenuWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UIScrollMenuGetCurrentMenuIndex.Inc

%endif %- GetCurrentMenuIndex
%-BW_METHOD_END GetCurrentMenuIndex
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetCurrentMenuIndex
%ifdef SetCurrentMenuIndex
void %'ModuleName'%.%SetCurrentMenuIndex(%'ModuleName'_ScrollMenuWidget *widget, byte newIndex);
%define! Parwidget
%define! ParnewIndex
%include Common\UIScrollMenuSetCurrentMenuIndex.Inc

%endif %- SetCurrentMenuIndex
%-BW_METHOD_END SetCurrentMenuIndex
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
byte %'ModuleName'%.%Resize(%'ModuleName'_ScrollMenuWidget *widget);
%define! Parwidget
%define! RetVal
%include Common\UIScrollMenuResize.Inc

%endif %- Resize
%-BW_METHOD_END Resize
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetMenuText
%ifdef SetMenuText
byte %'ModuleName'%.%SetMenuText(%'ModuleName'_ScrollMenuWidget *widget, unsigned char *menuText);
%define! Parwidget
%define! ParmenuText
%define! RetVal
%include Common\UIScrollMenuSetMenuText.Inc

%endif %- SetMenuText
%-BW_METHOD_END SetMenuText
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateScrollMenu
%ifdef CreateScrollMenu
byte %'ModuleName'%.%CreateScrollMenu(%'ModuleName'_Element *parent, %'ModuleName'_ScrollMenuWidget *widget, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, unsigned char *menuText, %@UI@'ModuleName'%.MsgHandler handler);
%define! Parparent
%define! Parwidget
%define! Parx
%define! Pary
%define! ParmenuText
%define! Parhandler
%define! RetVal
%include Common\UIScrollMenuCreateScrollMenu.Inc

%endif %- CreateScrollMenu
%-BW_METHOD_END CreateScrollMenu
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UIScrollMenuSettings.Inc
%define! Abstract Common\UIScrollMenuAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG Paint
static byte Paint(%'ModuleName'_Element *element);
%-INTERNAL_LOC_METHOD_END Paint
%-INTERNAL_LOC_METHOD_BEG MsgHandler
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData);
%-INTERNAL_LOC_METHOD_END MsgHandler
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Paint
%define! Parelement
%define! RetVal
%include Common\GeneralInternalGlobal.inc (Paint)
static byte Paint(%'ModuleName'_Element *element)
{
  %@UI@'ModuleName'%.PixelDim x, y, w, h;
  unsigned char buf[%'ModuleName'_SCROLLMENU_NOF_CHARS+1];
  %'ModuleName'_ScrollMenuWidget *widget = (%'ModuleName'_ScrollMenuWidget*)element;
  uint8_t i;
  unsigned char *p;
  %@TextWidget@'ModuleName'%.PText oldT;

  if (element == NULL || element->prop.type != %@UI@'ModuleName'%.WIDGET_SCROLLMENU) {
    return ERR_FAILED;
  }
  x = element->prop.x;
  y = element->prop.y;
  w = element->prop.width;
  h = element->prop.height;
  /* box around menu */
  %@UI@'ModuleName'%.DrawBox(widget->element.parent, x, y, w, h, %'ModuleName'%.SCROLLMENU_LINE_WIDTH, widget->boxLineColor);
  /* background of text box */
  %@UI@'ModuleName'%.DrawFilledBox(widget->element.parent, x+%'ModuleName'%.SCROLLMENU_LINE_WIDTH, y+%'ModuleName'%.SCROLLMENU_LINE_WIDTH,
    w-2*%'ModuleName'%.SCROLLMENU_LINE_WIDTH, h-2*%'ModuleName'%.SCROLLMENU_LINE_WIDTH,
    widget->textWidget.element.prop.color);
  /* background of 'V' box */
  %@UI@'ModuleName'%.DrawFilledBox(widget->element.parent,
    (%@UI@'ModuleName'%.PixelDim)(x+%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(y+%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(h-2*%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(h-2*%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    widget->boxBgColor);
  /* draw the  '\' of the 'V' */
  %@UI@'ModuleName'%.DrawLine(widget->element.parent,
    (%@UI@'ModuleName'%.PixelDim)(x+%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(y+%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(x+(h/2)),
    (%@UI@'ModuleName'%.PixelDim)(y+h-%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    widget->boxLineColor);
  /* draw the  '/' of the 'V' */
  %@UI@'ModuleName'%.DrawLine(widget->element.parent,
    (%@UI@'ModuleName'%.PixelDim)(x+(h/2)),
    (%@UI@'ModuleName'%.PixelDim)(y+h-%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(x+h-(2*%'ModuleName'%.SCROLLMENU_LINE_WIDTH)),
    (%@UI@'ModuleName'%.PixelDim)(y+%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    widget->boxLineColor);
  /* draw a separator between the 'V' and the text */
  %@UI@'ModuleName'%.DrawFilledBox(widget->element.parent,
    (%@UI@'ModuleName'%.PixelDim)(x+h-%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    (%@UI@'ModuleName'%.PixelDim)(y+%'ModuleName'%.SCROLLMENU_LINE_WIDTH),
    %'ModuleName'%.SCROLLMENU_LINE_WIDTH,
    (%@UI@'ModuleName'%.PixelDim)(h-(2*%'ModuleName'%.SCROLLMENU_LINE_WIDTH)),
    widget->boxLineColor);

  /* copy current menu item text into local buffer */
  i = widget->selectedIndex;
  p = %@TextWidget@'ModuleName'%.GetText(&widget->textWidget);
  while(i>0 && *p!='\0') {                                       %>40/* find start of menu string */
    if(*p=='\r') {
      i--;
    }
    p++;
  }
  i = 0;
  while(i<%'ModuleName'_SCROLLMENU_NOF_CHARS && *p!='\r' && *p!='\0') {
    buf[i++] = *p++;
  }
  buf[i] = '\0';
  oldT = %@TextWidget@'ModuleName'%.GetText(&widget->textWidget); /* create backup */
  if (%@TextWidget@'ModuleName'%.SetText(&widget->textWidget, &buf[0])!=ERR_OK) { /* assign temporary text */
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.SendMessage(%@UI@'ModuleName'%.MSG_WIDGET_PAINT, &widget->textWidget.element, NULL); /* paint it */
  if (%@TextWidget@'ModuleName'%.SetText(&widget->textWidget, oldT)!=ERR_OK) { /* restore previous text */
    return ERR_FAILED;
  }
  return ERR_OK;
}

%-INTERNAL_METHOD_END Paint
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG MsgHandler
%define! Parkind
%define! ParpData
%define! Parelement
%include Common\GeneralInternalGlobal.inc (MsgHandler)
static void MsgHandler(%'ModuleName'_MsgKind kind, %'ModuleName'_Element *element, %'ModuleName'_Pvoid pData)
{
  %'ModuleName'_ScrollMenuWidget *widget = (%'ModuleName'_ScrollMenuWidget*)element;

  if (kind==%@UI@'ModuleName'%.MSG_WIDGET_PAINT) {
    (void)Paint(element);
  } else if (kind==%@UI@'ModuleName'%.MSG_WIDGET_RESIZE) {
    (void)%@TextWidget@'ModuleName'%.Resize(&widget->textWidget); /* first resize menu text item */
    (void)%'ModuleName'%.Resize(widget); /* resize widget itself */
  } else if (kind==%@UI@'ModuleName'%.MSG_CLICK) {    /* click down */
    if (%@UI@'ModuleName'%.CoordinateInsideElement((%@UI@'ModuleName'%.Coordinate*)pData, element)) {
      %'ModuleName'%.%SetCurrentMenuIndex(widget, %'ModuleName'%.%GetCurrentMenuIndex(widget)+1);
      %@UI@'ModuleName'%.SendMessage(%@UI@'ModuleName'%.MSG_WIDGET_PAINT, &widget->element, NULL); /* re-paint widget */
    }
  }
%ifdef SetUserMsgHandler
  if (widget->userMsgHandler != NULL){
    widget->userMsgHandler(kind, element, pData);                %>40/* call user event  */
  }
%endif %- SetUserMsgHandler
}
%-INTERNAL_METHOD_END MsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetUserMsgHandler
%ifdef SetUserMsgHandler
%define! Parhandler
%define! Parwidget
%include Common\UIScrollMenuSetUserMsgHandler.Inc
/*
void %'ModuleName'%.%SetUserMsgHandler(%'ModuleName'_ScrollMenuWidget *widget, %@UI@'ModuleName'%.MsgHandler handler)
 ** This method is implemented as macro
*/

%endif %- SetUserMsgHandler
%-BW_METHOD_END SetUserMsgHandler
%-************************************************************************************************************
%-BW_METHOD_BEGIN Create
%ifdef Create
%define! Parparent
%define! Parx
%define! Pary
%define! Parwidth
%define! Parheight
%define! Parwidget
%define! RetVal
%include Common\UIScrollMenuCreate.Inc
byte %'ModuleName'%.%Create(%'ModuleName'_Element *parent, %'ModuleName'_ScrollMenuWidget *widget, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim width, %'ModuleName'_PixelDim height)
{
  if (parent == NULL || widget == NULL) {
    return ERR_FAILED;
  }
  %@UI@'ModuleName'%.ElementInitCommon(&widget->element, %@UI@'ModuleName'%.WIDGET_SCROLLMENU,
    x, y, width, height, %'ModuleName'_DEFAULT_BG_COLOR, MsgHandler);
%ifdef SetUserMsgHandler
  widget->userMsgHandler = NULL;                                 %>40/* needs to be set by user */
%endif %- SetUserMsgHandler
  widget->selectedIndex = 0;
  widget->boxBgColor = %'ModuleName'_DEFAULT_BG_COLOR;
  widget->boxLineColor = %'ModuleName'_DEFAULT_LINE_COLOR;
  /* create a textWidget for label */
  if (%@TextWidget@'ModuleName'%.Create(NULL, &widget->textWidget,
        %'ModuleName'%.SCROLLMENU_TEXT_BORDER_WIDTH, %'ModuleName'%.SCROLLMENU_TEXT_BORDER_WIDTH, 0, 0)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%'ModuleName'%.%SetMenuText(widget, (unsigned char*)%'ModuleName'_DEFAULT_TEXT)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%'ModuleName'%.%Resize(widget) != ERR_OK) {
    return ERR_FAILED;
  }
  if (%@UI@'ModuleName'%.AddSubElement(parent, &widget->element) != ERR_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Create
%-BW_METHOD_END Create
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofItems
%ifdef NofItems
%define! Parwidget
%define! RetVal
%include Common\UIScrollMenuNofItems.Inc
byte %'ModuleName'%.%NofItems(%'ModuleName'_ScrollMenuWidget *widget)
{
  unsigned char *p;
  byte cntr;

  p = %@TextWidget@'ModuleName'%.GetText(&widget->textWidget);
  if (p == NULL) {
    return 0;
  }
  /* items are separated by \r, so simply count the number of '\r' */
  cntr = 0;
  while (*p != '\0') {
    if (*p == '\r') {
      cntr++;
    }
    p++;
  }
  return cntr;
}

%endif %- NofItems
%-BW_METHOD_END NofItems
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCurrentMenuIndex
%ifdef GetCurrentMenuIndex
%define! Parwidget
%define! RetVal
%include Common\UIScrollMenuGetCurrentMenuIndex.Inc
byte %'ModuleName'%.%GetCurrentMenuIndex(%'ModuleName'_ScrollMenuWidget *widget)
{
  return widget->selectedIndex;
}

%endif %- GetCurrentMenuIndex
%-BW_METHOD_END GetCurrentMenuIndex
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetCurrentMenuIndex
%ifdef SetCurrentMenuIndex
%define! Parwidget
%define! ParnewIndex
%include Common\UIScrollMenuSetCurrentMenuIndex.Inc
void %'ModuleName'%.%SetCurrentMenuIndex(%'ModuleName'_ScrollMenuWidget *widget, byte newIndex)
{
  if (newIndex == widget->selectedIndex) {
    return;                                                      %>40/* nothing to do */
  }
  if (newIndex > %'ModuleName'%.%NofItems(widget)) {
    newIndex = 0;                                                %>40/* wrap over */
  }
  widget->selectedIndex = newIndex;
}

%endif %- SetCurrentMenuIndex
%-BW_METHOD_END SetCurrentMenuIndex
%-************************************************************************************************************
%-BW_METHOD_BEGIN Resize
%ifdef Resize
%define! Parwidget
%define! RetVal
%include Common\UIScrollMenuResize.Inc
byte %'ModuleName'%.%Resize(%'ModuleName'_ScrollMenuWidget *widget)
{
  %@UI@'ModuleName'%.PixelDim w, h;

  if (widget==NULL) {
    return ERR_FAILED;
  }
  h = (%@UI@'ModuleName'%.PixelDim)(widget->textWidget.element.prop.height
             + 2*%'ModuleName'%.SCROLLMENU_LINE_WIDTH /* top and lower lines */
             + 2*%'ModuleName'%.SCROLLMENU_TEXT_BORDER_WIDTH); /* space border around text */
  w = (%@TextWidget@'ModuleName'%.PixelDim)(widget->textWidget.element.prop.width
           + h                    /* the UI cue on the left is quadratic */
           + 3*%'ModuleName'%.SCROLLMENU_LINE_WIDTH /* left, middle and right right border lines */
           + 2*%'ModuleName'%.SCROLLMENU_TEXT_BORDER_WIDTH); /* space border around menu text */
  widget->element.prop.width = w;
  widget->element.prop.height = h;
  /* adjust left corner of text widget. Widget is not part of the UI list, so using absolute coordinates */
  widget->textWidget.element.prop.x = (%@UI@'ModuleName'%.PixelDim)(%@UI@'ModuleName'%.GetScreenPosX(&widget->element)+h+%'ModuleName'%.SCROLLMENU_TEXT_BORDER_WIDTH);
  widget->textWidget.element.prop.y = (%@UI@'ModuleName'%.PixelDim)(%@UI@'ModuleName'%.GetScreenPosY(&widget->element)+%'ModuleName'%.SCROLLMENU_LINE_WIDTH+%'ModuleName'%.SCROLLMENU_TEXT_BORDER_WIDTH);
  return ERR_OK;
}

%endif %- Resize
%-BW_METHOD_END Resize
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetMenuText
%ifdef SetMenuText
%define! Parwidget
%define! ParmenuText
%define! RetVal
%include Common\UIScrollMenuSetMenuText.Inc
byte %'ModuleName'%.%SetMenuText(%'ModuleName'_ScrollMenuWidget *widget, unsigned char *menuText)
{
  if (widget==NULL) {
    return ERR_FAILED;
  }
  return %@TextWidget@'ModuleName'%.SetText(&widget->textWidget, menuText);
}

%endif %- SetMenuText
%-BW_METHOD_END SetMenuText
%-************************************************************************************************************
%-BW_METHOD_BEGIN CreateScrollMenu
%ifdef CreateScrollMenu
%define! Parparent
%define! Parwidget
%define! Parx
%define! Pary
%define! ParmenuText
%define! Parhandler
%define! RetVal
%include Common\UIScrollMenuCreateScrollMenu.Inc
byte %'ModuleName'%.%CreateScrollMenu(%'ModuleName'_Element *parent, %'ModuleName'_ScrollMenuWidget *widget, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, unsigned char *menuText, %@UI@'ModuleName'%.MsgHandler handler)
{
  if (%'ModuleName'%.Create(parent, widget, x, y, 0, 0)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (%'ModuleName'%.SetMenuText(widget, menuText)) {
    return ERR_FAILED;
  }
%ifdef SetUserMsgHandler
  %'ModuleName'%.SetUserMsgHandler(widget, handler);
%else
  (void)handler; /* SetUserMsgHandler() is not enabled/defined, so not using it. */
%endif
  %@UI@'ModuleName'%.SendMessage(%@UI@'ModuleName'%.MSG_WIDGET_RESIZE, &widget->element, NULL);
}

%endif %- CreateScrollMenu
%-BW_METHOD_END CreateScrollMenu
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

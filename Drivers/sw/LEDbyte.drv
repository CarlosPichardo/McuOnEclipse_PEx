%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    26.06.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Init Performs the LED driver initialization.
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\LEDbyteSettings.Inc
%define! Abstract Common\LEDbyteAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"
%include sw\CommonSupport.prg
%-
%define INLINE_ME
%-
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
/* following defines are used if the port is used as sensor in reverse biased mode */
#define %'ModuleName'%.ClrVal()  %@LEDbytePort@'ModuleName'%.PutVal(0x00) /* put the port on low level */
#define %'ModuleName'%.SetVal()  %@LEDbytePort@'ModuleName'%.PutVal(0xff) /* put the port on high level */
#define %'ModuleName'%.GetVal()  %@LEDbytePort@'ModuleName'%.GetVal() /* return the port value */
#define %'ModuleName'%.PutVal(x) %@LEDbytePort@'ModuleName'%.PutVal(x) /* set the port value */
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-BW_METHOD_BEGIN On
%ifdef On
%if defined(INLINE_ME)
%if AnodeOnPortSide = 'yes'
#define %'ModuleName'%.%On() %@LEDbytePort@'ModuleName'%.PutVal(0xff)
%else
#define %'ModuleName'%.%On() %@LEDbytePort@'ModuleName'%.PutVal(0x00)
%endif
%else
void %'ModuleName'%.%On(void);
%endif /* INLINE_ME */
%include Common\LEDbyteOn.Inc

%endif %- On
%-BW_METHOD_END On
%-BW_METHOD_BEGIN Off
%ifdef Off
%if defined(INLINE_ME)
%if AnodeOnPortSide = 'yes'
#define %'ModuleName'%.%Off() %@LEDbytePort@'ModuleName'%.PutVal(0x00)
%else
#define %'ModuleName'%.%Off() %@LEDbytePort@'ModuleName'%.PutVal(0xff)
%endif
%else
void %'ModuleName'%.%Off(void);
%endif /* INLINE_ME */
%include Common\LEDbyteOff.Inc

%endif %- Off
%-BW_METHOD_END Off
%-BW_METHOD_BEGIN Neg
%ifdef Neg
%if defined(INLINE_ME)
#define %'ModuleName'%.%Neg() %@LEDbytePort@'ModuleName'%.PutVal(~%@LEDbytePort@'ModuleName'%.GetVal())
%else
void %'ModuleName'%.%Neg(void);
%endif /* INLINE_ME */
%include Common\LEDbyteNeg.Inc

%endif %- Neg
%-BW_METHOD_END Neg
%-BW_METHOD_BEGIN Get
%ifdef Get
%if defined(INLINE_ME)
%if AnodeOnPortSide = 'yes'
#define %'ModuleName'%.%Get() %@LEDbytePort@'ModuleName'%.GetVal()
%else
#define %'ModuleName'%.%Get() (!(%@LEDbytePort@'ModuleName'%.GetVal()))
%endif
%else
byte %'ModuleName'%.%Get(void);
%endif /* INLINE_ME */
%define! RetVal
%include Common\LEDbyteGet.Inc

%endif %- Get
%-BW_METHOD_END Get
%-INTERNAL_METHOD_BEG Init
%if defined(INLINE_ME)
%if LEDonWithInitialization = 'yes'
#define %'ModuleName'%.Init() %'ModuleName'%.%On()
%else
#define %'ModuleName'%.Init() %'ModuleName'%.%Off()
%endif
%else
void %'ModuleName'%.Init(void);
%endif /* INLINE_ME */
%include Common\GeneralInternal.inc (Init)

%-INTERNAL_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Put
%ifdef Put
%if defined(INLINE_ME)
%if AnodeOnPortSide = 'yes'
#define %'ModuleName'%.%Put(val)  %@LEDbytePort@'ModuleName'%.PutVal(val)
%else
#define %'ModuleName'%.%Put(val)  %@LEDbytePort@'ModuleName'%.PutVal(~val)
%endif
%else
void %'ModuleName'%.%Put(byte val);
%endif /* INLINE_ME */
%define! Parval
%include Common\LEDbytePut.Inc

%endif %- Put
%-BW_METHOD_END Put
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetOutput
%ifdef SetOutput
%if defined(INLINE_ME)
#define %'ModuleName'%.%SetOutput() %@LEDbytePort@'ModuleName'%.SetOutput()
%else
void %'ModuleName'%.%SetOutput(void);
%endif /* INLINE_ME */
%include Common\LEDbyteSetOutput.Inc

%endif %- SetOutput
%-BW_METHOD_END SetOutput
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInput
%ifdef SetInput
%if defined(INLINE_ME)
#define %'ModuleName'%.%SetInput() %@LEDbytePort@'ModuleName'%.SetInput()
%else
void %'ModuleName'%.%SetInput(void);
%endif /* INLINE_ME */
%include Common\LEDbyteSetInput.Inc

%endif %- SetInput
%-BW_METHOD_END SetInput
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\LEDbyteSettings.Inc
%define! Abstract Common\LEDbyteAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-BW_METHOD_BEGIN On
%ifdef On
%include Common\LEDbyteOn.Inc
%if defined(INLINE_ME)
/* This method is implemented as macro in the header file */
%else
void %'ModuleName'%.%On(void)
{
%if AnodeOnPortSide = 'yes'
  %@LEDbytePort@'ModuleName'%.PutVal(0xff);
%else
  %@LEDbytePort@'ModuleName'%.PutVal(0x00);
%endif
}
%endif /* INLINE_ME */

%endif %- On
%-BW_METHOD_END On
%-BW_METHOD_BEGIN Off
%ifdef Off
%include Common\LEDbyteOff.Inc
%if defined(INLINE_ME)
/* This method is implemented as macro in the header file */
%else
void %'ModuleName'%.%Off(void)
{
%if AnodeOnPortSide = 'yes'
  %@LEDbytePort@'ModuleName'%.PutVal(0x00);
%else
  %@LEDbytePort@'ModuleName'%.PutVal(0xff);
%endif
}
%endif

%endif %- Off
%-BW_METHOD_END Off
%-BW_METHOD_BEGIN Neg
%ifdef Neg
%include Common\LEDbyteNeg.Inc
%if defined(INLINE_ME)
/* This method is implemented as macro in the header file */
%else
void %'ModuleName'%.%Neg(void)
{
  %@LEDbytePort@'ModuleName'%.PutVal(~%@LEDbytePort@'ModuleName'%.GetVal());
}
%endif /* INLINE_ME */

%endif %- Neg
%-BW_METHOD_END Neg
%-BW_METHOD_BEGIN Get
%ifdef Get
%define! RetVal
%include Common\LEDbyteGet.Inc
%if defined(INLINE_ME)
/* This method is implemented as macro in the header file */
%else
byte %'ModuleName'%.%Get(void)
{
%if AnodeOnPortSide = 'yes'
  return %@LEDbytePort@'ModuleName'%.GetVal();
%else
  return !(%@LEDbytePort@'ModuleName'%.GetVal());
%endif
}
%endif /* INLINE_ME */

%endif %- Get
%-BW_METHOD_END Get
%-INTERNAL_METHOD_BEG Init
%include Common\GeneralInternal.inc (Init)
%if defined(INLINE_ME)
/* This method is implemented as macro in the header file */
%else
void %'ModuleName'%.Init(void)
{
%if LEDonWithInitialization = 'yes'
  %'ModuleName'%.%On();
%else
  %'ModuleName'%.%Off();
%endif
}
%endif /* INLINE_ME */

%-INTERNAL_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Put
%ifdef Put
%define! Parval
%include Common\LEDbytePut.Inc
%if defined(INLINE_ME)
/* This method is implemented as macro in the header file */
%else
void %'ModuleName'%.%Put(byte val)
{
%if AnodeOnPortSide = 'yes'
  %@LEDbytePort@'ModuleName'%.PutVal(val);
%else
  %@LEDbytePort@'ModuleName'%.PutVal(~val);
%endif
}
%endif /* INLINE_ME */

%endif %- Put
%-BW_METHOD_END Put
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetOutput
%ifdef SetOutput
%include Common\LEDbyteSetOutput.Inc
%if defined(INLINE_ME)
/* This method is implemented as macro in the header file */
%else
void %'ModuleName'%.%SetOutput(void)
{
  %@LEDbytePort@'ModuleName'%.SetOutput();
}
%endif /* INLINE_ME */

%endif %- SetOutput
%-BW_METHOD_END SetOutput
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInput
%ifdef SetInput
%include Common\LEDbyteSetInput.Inc
%if defined(INLINE_ME)
/* This method is implemented as macro in the header file */
%else
void %'ModuleName'%.%SetInput(void)
{
  %@LEDbytePort@'ModuleName'%.SetOutput();
}
%endif /* INLINE_ME */

%endif %- SetInput
%-BW_METHOD_END SetInput
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.Init(); /* initializes the driver */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.11.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\PWMServo16bitSettings.Inc
%define! Abstract Common\PWMServo16bitAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDutyUS
%ifdef SetDutyUS
byte %'ModuleName'%.%SetDutyUS(word Time);
%define! ParTime
%define! RetVal
%include Common\PWMServo16bitSetDutyUS.Inc

%endif %- SetDutyUS
%-BW_METHOD_END SetDutyUS
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\PWMServo16bitSettings.Inc
%define! Abstract Common\PWMServo16bitAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#define CLK8_REG        PWMPRCLK /* 8bit clock register */
%if %Channel='Channel01'
/* registers for the combination of channel 0 and 1 */
#define PER8_LOW_REG    PWMPER1  /* 8bit period register (low byte) */
#define PER8_HIGH_REG   PWMPER0  /* 8bit period register (high byte) */
#define DUTY8_LOW_REG   PWMDTY1  /* 8bit duty register (low byte) */
#define DUTY8_HIGH_REG  PWMDTY0  /* 8bit duty register (high byte) */
%elif %Channel='Channel23'
/* registers for the combination of channel 2 and 3 */
#define PER8_LOW_REG    PWMPER3  /* 8bit period register (low byte) */
#define PER8_HIGH_REG   PWMPER2  /* 8bit period register (high byte) */
#define DUTY8_LOW_REG   PWMDTY3  /* 8bit duty register (low byte) */
#define DUTY8_HIGH_REG  PWMDTY2  /* 8bit duty register (high byte) */
%elif %Channel='Channel45'
/* registers for the combination of channel 4 and 5 */
#define PER8_LOW_REG    PWMPER5  /* 8bit period register (low byte) */
#define PER8_HIGH_REG   PWMPER4  /* 8bit period register (high byte) */
#define DUTY8_LOW_REG   PWMDTY5  /* 8bit duty register (low byte) */
#define DUTY8_HIGH_REG  PWMDTY4  /* 8bit duty register (high byte) */
%elif %Channel='Channel67'
/* registers for the combination of channel 6 and 7 */
#define PER8_LOW_REG    PWMPER7  /* 8bit period register (low byte) */
#define PER8_HIGH_REG   PWMPER6  /* 8bit period register (high byte) */
#define DUTY8_LOW_REG   PWMDTY7  /* 8bit duty register (low byte) */
#define DUTY8_HIGH_REG  PWMDTY6  /* 8bit duty register (high byte) */
%endif
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDutyUS
%ifdef SetDutyUS
%define! ParTime
%define! RetVal
%include Common\PWMServo16bitSetDutyUS.Inc
byte %'ModuleName'%.%SetDutyUS(word Time)
{
  uint16_t duty;
  uint16_t periodTime;

  %if %Channel='Channel01'
  /* channel uses clk A*/
  periodTime = (uint16_t)(((1<<(CLK8_REG&0x07))*((PER8_HIGH_REG<<8)+PER8_LOW_REG))/40);
  %elif %Channel='Channel23'
  /* channel uses clk B*/
  periodTime = (uint16_t)(((1<<((CLK8_REG&0x70>>4)))*((PER8_HIGH_REG<<8)+PER8_LOW_REG))/40);
  %elif %Channel='Channel45'
  /* channel uses clk A*/
  periodTime = (uint16_t)(((1<<(CLK8_REG&0x07))*((PER8_HIGH_REG<<8)+PER8_LOW_REG))/40);
  %elif %Channel='Channel67'
  /* channel uses clk B*/
  periodTime = (uint16_t)(((1<<((CLK8_REG&0x70>>4)))*((PER8_HIGH_REG<<8)+PER8_LOW_REG))/40);
  %endif
  duty = (uint16_t)((((PER8_HIGH_REG<<8)+PER8_LOW_REG)*Time)/periodTime);
  DUTY8_HIGH_REG = (byte)((duty&0xFF00)>>8);
  DUTY8_LOW_REG = (byte)(duty&0x00FF);
  return ERR_OK;
}

%endif %- SetDutyUS
%-BW_METHOD_END SetDutyUS
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-

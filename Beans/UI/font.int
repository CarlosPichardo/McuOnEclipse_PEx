<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>font</Name>
  <Description>Interface UserInterface\font for bean UserInterface, generated by Bean Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.002</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>GetFontChar</Name>
        <Symbol>GetFontChar</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns for a given character the corresponding font bitmap.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>PGFONT_CharInfo</ReturnType>
        <RetHint>Character font bitmap</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>ch</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The character for that a bitmap is required.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>PGFONT_CharInfo #M#_#C#(byte ch)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetBoxHeight</Name>
        <Symbol>GetBoxHeight</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Function to get the height of the bounding box.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Height of bounding box</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetFont</Name>
        <Symbol>GetFont</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns callbacks for fonts to be used by the font driver.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>PGFONT_Callbacks</ReturnType>
        <RetHint>Font callbacks.</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>PGFONT_Callbacks #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetUnderlineBoxHeight</Name>
        <Symbol>GetUnderlineBoxHeight</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the size of the underline box height</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetLineSpaceHeight</Name>
        <Symbol>GetLineSpaceHeight</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the size of the line space height</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>GFont</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>PConstByte</Name>
      <Hint>Pointer to a constant byte.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef const byte *PConstByte; /* Pointer to a constant byte. */\n
</PreparedHint>
      <Type>typedef const byte *PConstByte;</Type>
      <HWTestType>16bit signed</HWTestType>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>GFONT_CharInfo</Name>
      <Hint>A descriptor describing the font.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* A descriptor describing the font. */\n
    signed char dwidth; /* position of next char. relative to the current */\n
    byte width; /* width of character in pixels */\n
    byte height; /* height of character in pixels */\n
    signed char offsetX; /* horizontal offset to left edge of bounding box */\n
    signed char offsetY; /* vertical offset to bottom edge of bounding box */\n
    PConstByte CharBMP; /* pointer to character bitmap defined above */\n
  } GFONT_CharInfo;\n
</PreparedHint>
      <RecordItem>
        <ItemName>dwidth</ItemName>
        <ItemType>8bit signed</ItemType>
        <ItemHint>position of next char. relative to the current</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>width</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>width of character in pixels</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>height</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>height of character in pixels</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>offsetX</ItemName>
        <ItemType>8bit signed</ItemType>
        <ItemHint>horizontal offset to left edge of bounding box</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>offsetY</ItemName>
        <ItemType>8bit signed</ItemType>
        <ItemHint>vertical offset to bottom edge of bounding box</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>CharBMP</ItemName>
        <ItemType>PConstByte</ItemType>
        <ItemHint>pointer to character bitmap defined above</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PGFONT_CharInfo</Name>
      <Hint>A pointer to GFONT_CharInfo</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef GFONT_CharInfo* PGFONT_CharInfo ; /* A pointer to GFONT_CharInfo */\n
</PreparedHint>
      <Type>GFONT_CharInfo</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>CallbackGetFontChar</Name>
      <Hint>Callback used to get the font information for a single character.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef PGFONT_CharInfo (*CallbackGetFontChar)(byte ch); /* Callback used to get the font information for a single character. */\n
</PreparedHint>
      <Type>typedef PGFONT_CharInfo (*CallbackGetFontChar)(byte ch);</Type>
      <HWTestType>16bit signed</HWTestType>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>GFONT_Callbacks</Name>
      <Hint>Structure with font relevant callbacks.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Structure with font relevant callbacks. */\n
    CallbackGetFontChar GetFontChar; /* Callback for retrieving a font character. */\n
    byte boundingBoxHeight; /* Height of the bounding box. This includes the height of the underline box height. */\n
    byte underlineBoxHeight; /* Height of the underline box height. */\n
    byte lineSpaceBoxHeight; /* Height of the space between lines */\n
  } GFONT_Callbacks;\n
</PreparedHint>
      <RecordItem>
        <ItemName>GetFontChar</ItemName>
        <ItemType>CallbackGetFontChar</ItemType>
        <ItemHint>Callback for retrieving a font character.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>boundingBoxHeight</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Height of the bounding box. This includes the height of the underline box height.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>underlineBoxHeight</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Height of the underline box height.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>lineSpaceBoxHeight</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Height of the space between lines</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PGFONT_Callbacks</Name>
      <Hint>Pointer to struct for font callbacks.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef GFONT_Callbacks* PGFONT_Callbacks ; /* Pointer to struct for font callbacks. */\n
</PreparedHint>
      <Type>GFONT_Callbacks</Type>
    </Type>
  </UserTypes>
</Interface>

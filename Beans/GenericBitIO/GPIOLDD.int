<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>GPIOLDD</Name>
  <Description>Interface "GenericBitIO\GPIOLDD" for component GenericBitIO, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.001</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>Init</Name>
        <Symbol>Init</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method initializes the associated peripheral(s) and the component internal variables. The method is called automatically as a part of the application initialization code.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TDeviceData*</ReturnType>
        <RetHint>Pointer to the dynamically allocated private structure or NULL if there was an error.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>UserDataPtr</ParName>
          <ParType>LDD_TUserData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the RTOS device structure. This pointer will be passed to all events as parameter.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TDeviceData* #M#_#C#(LDD_TUserData *UserDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Deinit</Name>
        <Symbol>Deinit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method disables the device and frees the device data structure memory.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to device data structure pointer.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetPortEventCondition</Name>
        <Symbol>SetPortEventCondition</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method defines condition of the &lt;a href="GPIO_LDDEvents.html#OnPortEvent"&gt;OnPortEvent&lt;/a&gt; for required pins of the port.\n
&lt;!---VER_SPEC ~ColdFirePlus~ ^^ || DON'T CHANGE THIS LINE--&gt;\n
&lt;div class="versionspec"&gt;\n
&lt;B CLASS="VSP"&gt;\n
Version specific information for Freescale ColdFirePlus derivatives\n
&lt;/B&gt;\n
&lt;br/&gt;\n
There are common selection of edge versus level detection for all pins of one port. It means that some change of the condition of appropriate pin may affect conditions of other pins on the port. \n
&lt;/div&gt;\n
&lt;!---VER_SPEC_END  DON'T CHANGE THIS LINE--&gt;</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\n     ERR_PARAM_MASK - Invalid pin mask.\n     ERR_PARAM_CONDITION - Invalid condition.</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Mask</ParName>
          <ParType>TPortValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Unaligned mask of bits to setting the event condition. Each port pin has corresponding bit in the mask. Bit value 0 means not selected pin, bit value 1 means selected pin. The bit 0 corresponds with the pin which has index 0 within the port, the bit 1 corresponds with the pin which has index 1 within the port, etc.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Condition</ParName>
          <ParType>LDD_GPIO_TEventCondition</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Defines conditions when event is invoked. Possible values are: \n  LDD_GPIO_DISABLED - Event doesn't invoke. \n  LDD_GPIO_LOW - Event when logic zero.\n  LDD_GPIO_HIGH - Event when logic one.\n  LDD_GPIO_RISING - Event on rising edge.\n  LDD_GPIO_FALLING - Event on falling edge.\n  LDD_GPIO_BOTH - Event on rising and falling edge. </ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, %'ModuleName'_TPortValue Mask, LDD_GPIO_TEventCondition Condition)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetPortEventStatus</Name>
        <Symbol>GetPortEventStatus</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns a set of asserted flags. The flags are accumulated in the set. After calling this method the set is returned and cleared.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>TPortValue</ReturnType>
        <RetHint>Current status flags. Each port pin has corresponding bit in the mask. Bit value 0 means condition didn't occur on corresponding pin, bit value 1 means condition occured on corresponding pin. The bit 0 corresponds with the pin which has index 0 within the port, the bit 1 corresponds with the pin which has index 1 within the port, etc.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_TPortValue #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetFieldEventCondition</Name>
        <Symbol>SetFieldEventCondition</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method defines condition of the event on specified pins of the field. See GetFieldEventStatus() and  SetFieldEventMask () methods and  OnFieldEvent event.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <Visible>false</Visible>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\n     ERR_PARAM_VALUE  - parameters not valid\n     ERR_PARAM_GROUP â€“ bit field not valid</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Name</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to set to the event condition. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Mask</ParName>
          <ParType>TFieldValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Aligned mask of bits to setting the event condition. Each field pin has corresponding bit in the mask. Bit value 0 means not selected bit, bit value 1 means selected bit. The bit 0 corresponds with the pin which has index 0 within the given bit field, the bit 1 corresponds with the pin which has index 1 within the given bit field, etc.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Condition</ParName>
          <ParType>LDD_GPIO_TEventCondition</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Defines conditions when event is invoked.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Name, %'ModuleName'_TFieldValue Mask, LDD_GPIO_TEventCondition Condition)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetFieldEventStatus</Name>
        <Symbol>GetFieldEventStatus</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method returns current pending flags (of the field) and clears them.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <Visible>false</Visible>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>TFieldValue</ReturnType>
        <RetHint>Current status flags. Each field pin has corresponding bit in the mask. Bit value 0 means condition didn't occur on corresponding pin, bit value 1 means condition occured on corresponding pin. The bit 0 corresponds with the pin which has index 0 within the given bit field, the bit 1 corresponds with the pin which has index 1 within the given bit field, etc.</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Name</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to setting the event mask. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_TFieldValue #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Name)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetPortValue</Name>
        <Symbol>SetPortValue</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method writes the output data value to the port. Only configured pins (through all of bit fields in this component) are affected.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Value</ParName>
          <ParType>TPortValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Unaligned data value to write to the port. The bit 0 corresponds with the pin which has index 0 within the port, the bit 1 corresponds with the pin which has index 1 within the port, etc. Only configured pins (through all of bit fields in this component) are affected.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, %'ModuleName'_TPortValue Value)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetPortValue</Name>
        <Symbol>GetPortValue</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method returns the current port input data value. Only configured pins (through all of bit fields in this component) are returned.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>TPortValue</ReturnType>
        <RetHint>Unaligned current port input data value masked for allocated pins of the port. The bit 0 corresponds with the pin which has index 0 within the port, the bit 1 corresponds with the pin which has index 1 within the port, etc. Only configured pins (through all of bit fields in this component) are returned. The others are zeros.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_TPortValue #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetPortOutputValue</Name>
        <Symbol>GetPortOutputValue</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method returns the current port output data value. Only configured pins (through all of bit fields in this component) are returned.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <Visible>false</Visible>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>TPortValue</ReturnType>
        <RetHint>Unaligned current port input data value masked for allocated pins of the port. The bit 0 corresponds with the pin which has index 0 within the port, the bit 1 corresponds with the pin which has index 1 within the port, etc. Only configured pins (through all of bit fields in this component) are returned. The others are zeros.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_TPortValue #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ClearPortBits</Name>
        <Symbol>ClearPortBits</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method drives the specified bits of the port to the inactive level. Only configured pins (through all of bit fields in this component) are affected.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Mask</ParName>
          <ParType>TPortValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Unaligned mask of bits to setting the inactive level. Each port pin has corresponding bit in the mask. Bit value 0 means not selected bit, bit value 1 means selected bit. The bit 0 corresponds with the pin which has index 0 within the port, the bit 1 corresponds with the pin which has index 1 within the port, etc. Only configured pins (through all of bit fields in this component) are affected.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, %'ModuleName'_TPortValue Mask)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetPortBits</Name>
        <Symbol>SetPortBits</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method drives the specified bits of the port to the active level. Only configured pins (through all of bit fields in this component) are affected.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Mask</ParName>
          <ParType>TPortValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Unaligned mask of bits to setting the active level. Each port pin has corresponding bit in the mask. Bit value 0 means not selected bit, bit value 1 means selected bit. The bit 0 corresponds with the pin which has index 0 within the port, the bit 1 corresponds with the pin which has index 1 within the port, etc. Only configured pins (through all of bit fields in this component) are affected.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, %'ModuleName'_TPortValue Mask)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>TogglePortBits</Name>
        <Symbol>TogglePortBits</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method inverts the specified bits of the port to another level. Only configured pins (through all of bit fields in this component) are affected.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Mask</ParName>
          <ParType>TPortValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Unaligned mask of bits to inverting the current level. Each port pin has corresponding bit in the mask. Bit value 0 means not selected bit, bit value 1 means selected bit. The bit 0 corresponds with the pin which has index 0 within the port, the bit 1 corresponds with the pin which has index 1 within the port, etc. Only configured pins (through all of bit fields in this component) are affected.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, %'ModuleName'_TPortValue Mask)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetPortInputDirection</Name>
        <Symbol>SetPortInputDirection</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method sets the specified pins of the port to the input direction. Only configured pins (through all of bit fields in this component) are affected.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Mask</ParName>
          <ParType>TPortValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Mask of bits to setting the input direction. Each port pin has corresponding bit in the mask. Bit value 0 means not selected bit, bit value 1 means selected bit. The bit 0 corresponds with the pin which has index 0 within the port, the bit 1 corresponds with the pin which has index 1 within the port, etc. Only configured pins (through all of bit fields in this component) are affected.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, %'ModuleName'_TPortValue Mask)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetPortOutputDirection</Name>
        <Symbol>SetPortOutputDirection</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method sets the specified pins of the port to the output direction. The specified pins of the port will be driven to specified states. Only configured pins (through all of bit fields in this component) are affected.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Mask</ParName>
          <ParType>TPortValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Mask of bits to setting the output direction. Each port pin has corresponding bit in the mask. Bit value 0 means not selected bit, bit value 1 means selected bit. The bit 0 corresponds with the pin which has index 0 within the port, the bit 1 corresponds with the pin which has index 1 within the port, etc. Only configured pins (through all of bit fields in this component) are affected.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Value</ParName>
          <ParType>TPortValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Unaligned port data value to appear on the specified port pins after they have been switched to the output direction.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, %'ModuleName'_TPortValue Mask, %'ModuleName'_TPortValue Value)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetFieldValue</Name>
        <Symbol>SetFieldValue</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method sets the output data value of the specified bit field.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Field</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to write. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Value</ParName>
          <ParType>TFieldValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Aligned data value to writting to the specified bit field. The bit 0 corresponds with the pin which has index 0 within the given bit field, the bit 1 corresponds with the pin which has index 1 within the given bit field, etc.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, %'ModuleName'_TFieldValue Value)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetFieldValue</Name>
        <Symbol>GetFieldValue</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method returns the current input data of the specified field.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>TFieldValue</ReturnType>
        <RetHint>Aligned current port input value masked for allocated pins of the field. The bit 0 corresponds with the pin which has index 0 within the given bit field, the bit 1 corresponds with the pin which has index 1 within the given bit field, etc.</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Field</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to reading. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_TFieldValue #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetFieldOutputValue</Name>
        <Symbol>GetFieldOutputValue</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method returns the current field output data value.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <Visible>false</Visible>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>TFieldValue</ReturnType>
        <RetHint>Aligned current port output value masked for allocated pins of the field. The bit 0 corresponds with the pin which has index 0 within the given bit field, the bit 1 corresponds with the pin which has index 1 within the given bit field, etc.</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Field</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to reading. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_TFieldValue #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ClearFieldBits</Name>
        <Symbol>ClearFieldBits</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method drives the specified bits of the specified bit field to the inactive level.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>\n</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Field</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to write. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Mask</ParName>
          <ParType>TFieldValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Aligned mask of bits to setting the inactive level. Each field pin has corresponding bit in the mask. Bit value 0 means not selected bit, bit value 1 means selected bit. The bit 0 corresponds with the pin which has index 0 within the given bit field, the bit 1 corresponds with the pin which has index 1 within the given bit field, etc.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, %'ModuleName'_TFieldValue Mask)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetFieldBits</Name>
        <Symbol>SetFieldBits</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method drives the specified bits of the specified bit field to the active level.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Field</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to write. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Mask</ParName>
          <ParType>TFieldValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Aligned mask of bits to setting the active level. Each field pin has corresponding bit in the mask. Bit value 0 means not selected bit, bit value 1 means selected bit. The bit 0 corresponds with the pin which has index 0 within the given bit field, the bit 1 corresponds with the pin which has index 1 within the given bit field, etc.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, %'ModuleName'_TFieldValue Mask)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ToggleFieldBits</Name>
        <Symbol>ToggleFieldBits</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method inverts the specified bits of the specified bit field to other level.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Field</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to write. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Mask</ParName>
          <ParType>TFieldValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Aligned mask of bits to inverting the current level. Each field pin has corresponding bit in the mask. Bit value 0 means not selected bit, bit value 1 means selected bit. The bit 0 corresponds with the pin which has index 0 within the given bit field, the bit 1 corresponds with the pin which has index 1 within the given bit field, etc.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, %'ModuleName'_TFieldValue Mask)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetFieldInputDirection</Name>
        <Symbol>SetFieldInputDirection</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method sets all pins of the field to the input direction.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Field</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to write. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetFieldOutputDirection</Name>
        <Symbol>SetFieldOutputDirection</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method sets all pins of the field to the output direction.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Field</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to set to the output direction. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Value</ParName>
          <ParType>TFieldValue</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Aligned data value to appear on the bit field pins after they have been switched to the output direction.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, %'ModuleName'_TFieldValue Value)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetOperationMode</Name>
        <Symbol>SetOperationMode</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method requests to change the component's operation mode. Upon a request to change the operation mode, the component will finish a pending job first and then notify a caller that an operation mode has been changed. When no job is pending (ERR_OK), the component changes an operation mode immediately and notify a caller about this change. </Hint>
        <ItemLevel>EXPERT</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - The change operation mode request has been accepted, callback will notify an application as soon as the mode is changed.\n     ERR_PARAM_MODE - Invalid operation mode.</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>OperationMode</ParName>
          <ParType>LDD_TDriverOperationMode</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Requested driver operation mode.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>ModeChangeCallback</ParName>
          <ParType>LDD_TCallback</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Callback to notify the upper layer once a mode has been changed.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>ModeChangeCallbackParamPtr</ParName>
          <ParType>LDD_TCallbackParam</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to callback parameter to notify the upper layer once a mode has been changed.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetDriverState</Name>
        <Symbol>GetDriverState</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method returns the current driver status. This component returns 0 every time.</Hint>
        <ItemLevel>EXPERT</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TDriverState</ReturnType>
        <RetHint>The current driver status mask.\n\nFollowing status masks defined in PE_LDD.h can be used to check the current driver status.\n   PE_LDD_DRIVER_DISABLED_IN_CLOCK_CONFIGURATION - 1 - Driver is disabled in the current mode; 0 - Driver is enabled in the current mode.  \n   PE_LDD_DRIVER_DISABLED_BY_USER - 1 - Driver is disabled by the user; 0 - Driver is enabled by the user.        \n   PE_LDD_DRIVER_BUSY - 1 - Driver is the BUSY state; 0 - Driver is in the IDLE state.         </RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TDriverState #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ConnectPin</Name>
        <Symbol>ConnectPin</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method reconnects the requested pin associated with the selected peripheral in this component. This method is only available for CPU derivatives and peripherals that support the runtime pin sharing with other internal on-chip peripherals.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>Error code, possible values:\n     ERR_OK - OK\n     ERR_PARAM_MASK - Invalid pin mask</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>PinMask</ParName>
          <ParType>LDD_TPinMask</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Mask for the requested pins. The peripheral pins are reconnected according to this mask.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>GPIOLDD</Template>
    <Template>GPIOLDD</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>TPortValue</Name>
      <Hint>Unsigned integer of proper width depending on the size of the GPIO port allocated.\nIt represents unaligned data value of the port. Typically the value of n-th bit represents the data for the n-th pin within the port. Such value is not abstracted from the physical position of the bits within the port.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint> /* Unsigned integer of proper width depending on the size of the GPIO port allocated.&lt;br /&gt;It represents unaligned data value of the port. Typically the value of n-th bit represents the data for the n-th pin within the port. Such value is not abstracted from the physical position of the bits within the port. */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>TFieldValue</Name>
      <Hint>Unsigned integer of proper width depending on the size of the GPIO port allocated.\nIt represents right-aligned data value of the bit field. Typically the value of n-th bit represents the data of the n-th bit within the bit field (not within the port). There are used only so many lowest bits, as it is denoted by the width of the bit field. Such value is abstracted from the physical position of the bit field pins within the port.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint> /* Unsigned integer of proper width depending on the size of the GPIO port allocated.&lt;br /&gt;It represents right-aligned data value of the bit field. Typically the value of n-th bit represents the data of the n-th bit within the bit field (not within the port). There are used only so many lowest bits, as it is denoted by the width of the bit field. Such value is abstracted from the physical position of the bit field pins within the port. */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>TEventMask</Name>
      <Hint>Event status flags.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Event status flags. */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>LDD_GPIO_TEventCondition</Name>
      <Hint>Defines conditions when event is invoked.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef enum { /* Defines conditions when event is invoked. */\n
    LDD_GPIO_DISABLED,\n
    LDD_GPIO_LOW,\n
    LDD_GPIO_HIGH,\n
    LDD_GPIO_RISING,\n
    LDD_GPIO_FALLING,\n
    LDD_GPIO_BOTH\n
  } LDD_GPIO_TEventCondition;\n
</PreparedHint>
      <EnumCount>6</EnumCount>
      <Enum>LDD_GPIO_DISABLED</Enum>
      <Enum>LDD_GPIO_LOW</Enum>
      <Enum>LDD_GPIO_HIGH</Enum>
      <Enum>LDD_GPIO_RISING</Enum>
      <Enum>LDD_GPIO_FALLING</Enum>
      <Enum>LDD_GPIO_BOTH</Enum>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_GPIO_TBitField</Name>
      <Hint>The definition of the type is private and it is not intended to be published to the user. It may be simple index, pointer, structure or other type.\nAbstract type specifying the bit field within the port. The user does not need to create the values of that type, because all bit fields are defined during design-time and there are provided constants representing all available bit fields.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint> /* The definition of the type is private and it is not intended to be published to the user. It may be simple index, pointer, structure or other type.&lt;br /&gt;Abstract type specifying the bit field within the port. The user does not need to create the values of that type, because all bit fields are defined during design-time and there are provided constants representing all available bit fields. */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TUserData</Name>
      <Hint>Pointer to the structure used by RTOS containing driver-specific information.\nInit method receives this pointer and then passes this pointer to all events and call-backs.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to the structure used by RTOS containing driver-specific information.&lt;br /&gt;Init method receives this pointer and then passes this pointer to all events and call-backs. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TUserData*</Name>
      <Hint>Pointer to the structure used by RTOS containing driver-specific information.\nInit method receives this pointer and then passes this pointer to all events and call-backs.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to the structure used by RTOS containing driver-specific information.&lt;br /&gt;Init method receives this pointer and then passes this pointer to all events and call-backs. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceData*</Name>
      <Hint>Pointer to the private structure containing component state information. Private HAL driver data.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to the private structure containing component state information. Private HAL driver data. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceData</Name>
      <Hint>Pointer to the private structure containing component state information. Private HAL driver data.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to the private structure containing component state information. Private HAL driver data. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TError</Name>
      <Hint>Error identifier type</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Error identifier type */\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TPinMask</Name>
      <Hint>Bit mask of pins that need to be connected</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Bit mask of pins that need to be connected */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TEventMask</Name>
      <Hint>Event mask type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>uint16_t /* Event mask type. */\n
</PreparedHint>
      <Type>uint16_t</Type>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverOperationMode</Name>
      <Hint>Driver operation mode type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Driver operation mode type. */\n
</PreparedHint>
      <Type/>
      <HWTestType>8bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallback</Name>
      <Hint>Callback type used for definition of callback functions. </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Callback type used for definition of callback functions.  */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverState</Name>
      <Hint>Driver state type.  </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Driver state type.   */\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallbackParam</Name>
      <Hint>Callback parameter type used for callback functions.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Callback parameter type used for callback functions. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
  </UserTypes>
</Interface>

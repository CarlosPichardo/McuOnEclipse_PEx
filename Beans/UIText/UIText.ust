<?xml version="1.0" encoding="UTF-8"?>
<!--User types for component-->
<UserTypes>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>Element</Name>
    <Hint>Alias to Element</Hint>
    <Generate>no</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint> /* Alias to Element */\n
</PreparedHint>
    <Type/>
    <HWTestType/>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>MsgKind</Name>
    <Hint>different kinds of window event call back</Hint>
    <Generate>no</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint> /* different kinds of window event call back */\n
</PreparedHint>
    <Type/>
    <HWTestType/>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>PixelDim</Name>
    <Hint>Size of a pixel</Hint>
    <Generate>no</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint> /* Size of a pixel */\n
</PreparedHint>
    <Type/>
    <HWTestType/>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>Pvoid</Name>
    <Hint>Pointer to void</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint> /* Pointer to void */\n
</PreparedHint>
    <Type/>
    <HWTestType/>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>PixelColor</Name>
    <Hint>type large enough to hold the color information</Hint>
    <Generate>no</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>typedef %@Display@'ModuleName'%.Color %'ModuleName'%.PixelColor; /* type large enough to hold the color information */\n
</PreparedHint>
    <Type>typedef %@Display@'ModuleName'%.Color %'ModuleName'%.PixelColor;</Type>
    <HWTestType/>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>Font</Name>
    <Hint>Callback to retrieve font information.</Hint>
    <Generate>no</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>typedef %@UI@'ModuleName'%.FontCallbacks %'ModuleName'%.FontCallbacks; /* Callback to retrieve font information. */\n
</PreparedHint>
    <Type>typedef %@UI@'ModuleName'%.FontCallbacks %'ModuleName'%.FontCallbacks;</Type>
    <HWTestType/>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>painterCallback</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>typedef byte (*%'ModuleName'%.painterCallback) (struct _UIWindow *window, struct _UIElement *element);\n
</PreparedHint>
    <Type>typedef byte (*%'ModuleName'%.painterCallback) (struct _UIWindow *window, struct _UIElement *element);</Type>
    <HWTestType/>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>TextWidget</Name>
    <Hint>Alias for Static Text element</Hint>
    <Generate>no</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint> /* Alias for Static Text element */\n
</PreparedHint>
    <Type/>
    <HWTestType/>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>PFont</Name>
    <Hint>Pointer to font</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>typedef %@UI@'ModuleName'%.FontCallbacks *%'ModuleName'%.PFont; /* Pointer to font */\n
</PreparedHint>
    <Type>typedef %@UI@'ModuleName'%.FontCallbacks *%'ModuleName'%.PFont;</Type>
    <HWTestType/>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>PText</Name>
    <Hint>Alias for pointer to text string.</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>typedef unsigned char *%'ModuleName'%.PText; /* Alias for pointer to text string. */\n
</PreparedHint>
    <Type>typedef unsigned char *%'ModuleName'%.PText;</Type>
    <HWTestType/>
  </Type>
</UserTypes>

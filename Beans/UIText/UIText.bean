<?xml version="1.0" encoding="UTF-8"?>
<Bean>
  <Header>
    <Name>UIText</Name>
    <Description>Text Widget</Description>
    <Author>Erich Styger</Author>
    <Version>01.073</Version>
    <Icon>UIText</Icon>
    <TypesFiles>PE,UIText\UIText</TypesFiles>
    <FileVersion>6</FileVersion>
  </Header>
  <Options>
    <Category>CPU External Devices-Display</Category>
    <BW_HelpType>&lt;none&gt;</BW_HelpType>
    <BW_HelpFiles>,"Application Notes",Events,Methods,Properties</BW_HelpFiles>
    <BW_AutoSaveHelp>yes</BW_AutoSaveHelp>
    <BW_AutoSaveDriver>yes</BW_AutoSaveDriver>
    <BW_DetailedHelp>yes</BW_DetailedHelp>
    <BW_NeedTps>yes</BW_NeedTps>
    <BW_NeedUst>12</BW_NeedUst>
    <BW_NeedCns>0</BW_NeedCns>
    <BeanStatus>PROPOSAL</BeanStatus>
    <Copyright> * Copyright (c) 2012-2017, Erich Styger\n * Web:         https://mcuoneclipse.com\n * SourceForge: https://sourceforge.net/projects/mcuoneclipse\n * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * - Redistributions of source code must retain the above copyright notice, this list\n *   of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</Copyright>
    <Shortcut>UIT</Shortcut>
    <DemoDriver>no</DemoDriver>
    <BeanLevel>High</BeanLevel>
  </Options>
  <PropertyList>
    <Property>
      <TCompNameItem>
        <Name>Component name</Name>
        <Symbol>DeviceName</Symbol>
        <Hint>Name of the component.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue/>
      </TCompNameItem>
    </Property>
    <Property>
      <TGrupItem>
        <Name>Defaults</Name>
        <Symbol>TextGroup</Symbol>
        <Hint>Configures the widget defaults</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description/>
        <Expanded>Yes</Expanded>
        <Children>
          <GrupItem>
            <TInhrLinkItem>
              <Name>Font</Name>
              <Symbol>Font</Symbol>
              <TypeSpec>GFont_I</TypeSpec>
              <Hint>Font for the CheckBox Label</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
          <GrupItem>
            <TStrgItem>
              <Name>Text</Name>
              <Symbol>DefaultText</Symbol>
              <Hint>Default text</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue>text</DefaultValue>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
            </TStrgItem>
          </GrupItem>
          <GrupItem>
            <TEnumItem>
              <Name>Text Foreground Color</Name>
              <Symbol>DefaultTextTextForegroundColor</Symbol>
              <TypeSpec>typeColor</TypeSpec>
              <Hint>Default text foreground color to be used</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
              <DefaultIndex>0</DefaultIndex>
              <TextValueIndex>true</TextValueIndex>
              <RuntimeProperty>false</RuntimeProperty>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
            </TEnumItem>
          </GrupItem>
          <GrupItem>
            <TEnumItem>
              <Name>Text Background Color</Name>
              <Symbol>DefaultTextTextBackgroundColor</Symbol>
              <TypeSpec>typeColor</TypeSpec>
              <Hint>Default text foreground color to be used</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
              <DefaultIndex>1</DefaultIndex>
              <TextValueIndex>true</TextValueIndex>
              <RuntimeProperty>false</RuntimeProperty>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
            </TEnumItem>
          </GrupItem>
        </Children>
      </TGrupItem>
    </Property>
    <Property>
      <TGrupItem>
        <Name>System</Name>
        <Symbol>SystemGroup</Symbol>
        <Hint>Interface to shared system modules</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description/>
        <Expanded>Yes</Expanded>
        <Children>
          <GrupItem>
            <TInhrLinkItem>
              <Name>User Interface</Name>
              <Symbol>UI</Symbol>
              <TypeSpec>UIText\UI</TypeSpec>
              <Hint>Interface to User Interface</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
          <GrupItem>
            <TInhrLinkItem>
              <Name>Font Driver</Name>
              <Symbol>FontDisplay</Symbol>
              <TypeSpec>FontDisplay_I</TypeSpec>
              <Hint>Font Display to be used</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
          <GrupItem>
            <TInhrLinkItem>
              <Name>Utility</Name>
              <Symbol>Utility</Symbol>
              <TypeSpec>Utility_I</TypeSpec>
              <Hint>Interface to utility functions</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
          <GrupItem>
            <TInhrLinkItem>
              <Name>SDK</Name>
              <Symbol>sdk</Symbol>
              <TypeSpec>UIText\sdk</TypeSpec>
              <Hint>Link to SDK</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
        </Children>
      </TGrupItem>
    </Property>
  </PropertyList>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>Create</Name>
        <Symbol>Create</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Creates a text element</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>uint8_t</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>6</ParamCount>
        <Parameter>
          <ParName>parent</ParName>
          <ParType>Element</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to parent element. If NULL, then the widget will not be added to the list of widgets.</ParHint>
          <ParUserDeclaration>%@UI@'ModuleName'%.Element *parent</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>txtw</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to text widget</ParHint>
        </Parameter>
        <Parameter>
          <ParName>x</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>x position</ParHint>
          <ParUserDeclaration>%@UI@'ModuleName'%.PixelDim x</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>y</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>y position</ParHint>
          <ParUserDeclaration>%@UI@'ModuleName'%.PixelDim y</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>width</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>width of element</ParHint>
          <ParUserDeclaration>%@UI@'ModuleName'%.PixelDim width</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>height</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>height of element</ParHint>
          <ParUserDeclaration>%@UI@'ModuleName'%.PixelDim height</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>uint8_t #M#_#C#(%@UI@'ModuleName'%.Element *parent, %'ModuleName'_TextWidget *txtw, %@UI@'ModuleName'%.PixelDim x, %@UI@'ModuleName'%.PixelDim y, %@UI@'ModuleName'%.PixelDim width, %@UI@'ModuleName'%.PixelDim height)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Paint</Name>
        <Symbol>Paint</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Paints the text to the screen</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>false</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>text</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to element</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_TextWidget *text)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ChangeText</Name>
        <Symbol>ChangeText</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Changes the text of the element. The method will erase the existing text and replaces it with the new text, and copies the new text into the existing buffer (that's why you need to provide the size of the existing buffer as well).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>uint8_t</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>txtw</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the text widget</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dstTextSize</ParName>
          <ParType>uint16_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size in bytes of existing text.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>txt</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to new text. Note that this text has to be different from the element text shown, and this text will become the new element text.</ParHint>
          <ParUserDeclaration>unsigned char *txt</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>uint8_t #M#_#C#(%'ModuleName'_TextWidget *txtw, uint16_t dstTextSize, unsigned char *txt)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetFont</Name>
        <Symbol>SetFont</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sets the font of the widget.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>uint8_t</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>widget</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to text widget</ParHint>
        </Parameter>
        <Parameter>
          <ParName>font</ParName>
          <ParType>Font</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to font</ParHint>
          <ParUserDeclaration>%@FontDisplay@'ModuleName'%.Font *font</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>uint8_t #M#_#C#(%'ModuleName'_TextWidget *widget, %@FontDisplay@'ModuleName'%.Font *font)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetFont</Name>
        <Symbol>GetFont</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sets the font of the widget.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>PFont</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>widget</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to text widget</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_PFont #M#_#C#(%'ModuleName'_TextWidget *widget)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetText</Name>
        <Symbol>SetText</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Changes the text of the element. The method will use the pointer to the new text provided. The caller is responsible to deallocate the previous text if necessary.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>uint8_t</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>txtw</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the text widget</ParHint>
        </Parameter>
        <Parameter>
          <ParName>txt</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to new text. Note that this text has to be different from the element text shown, and this text will become the new element text.</ParHint>
          <ParUserDeclaration>unsigned char *txt</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>uint8_t #M#_#C#(%'ModuleName'_TextWidget *txtw, unsigned char *txt)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetText</Name>
        <Symbol>GetText</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns a pointer to the text</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>PText</ReturnType>
        <RetHint>pointer to text string</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>widget</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to widget</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_PText #M#_#C#(%'ModuleName'_TextWidget *widget)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetTextBoxWidth</Name>
        <Symbol>GetTextBoxWidth</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the width of the text based on font information. As the text might be multiline with \\r, it will return the width of the longest line.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>PixelDim</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>widget</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to widget</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_PixelDim #M#_#C#(%'ModuleName'_TextWidget *widget)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetTextBoxHeight</Name>
        <Symbol>GetTextBoxHeight</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the height of the text based on font information. As the text might be multiline with \\r, it will return the total height, not only of one line.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>PixelDim</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>widget</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to widget</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_PixelDim #M#_#C#(%'ModuleName'_TextWidget *widget)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetFontHeight</Name>
        <Symbol>GetFontHeight</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the height of the text based on font information, for a single line of text.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>PixelDim</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>widget</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to widget</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_PixelDim #M#_#C#(%'ModuleName'_TextWidget *widget)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Resize</Name>
        <Symbol>Resize</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Resize the widget area based on the text in it.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>uint8_t</ReturnType>
        <RetHint>error code</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>widget</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to text widget</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>uint8_t #M#_#C#(%'ModuleName'_TextWidget *widget)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetBgColor</Name>
        <Symbol>SetBgColor</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Change the background color of the text.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>txtw</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to text widget</ParHint>
        </Parameter>
        <Parameter>
          <ParName>bgColor</ParName>
          <ParType>PixelColor</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>text background color</ParHint>
          <ParUserDeclaration>%@UI@'ModuleName'%.PixelColor color</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_TextWidget *txtw, %@UI@'ModuleName'%.PixelColor color)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetFgColor</Name>
        <Symbol>SetFgColor</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Change the foreground color of the text.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>txtw</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to text widget</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fgColor</ParName>
          <ParType>PixelColor</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>text color</ParHint>
          <ParUserDeclaration>%@UI@'ModuleName'%.PixelColor color</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_TextWidget *txtw, %@UI@'ModuleName'%.PixelColor color)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetUserMsgHandler</Name>
        <Symbol>SetUserMsgHandler</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Set additional user message handler.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>textW</ParName>
          <ParType>TextWidget</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to text widget</ParHint>
        </Parameter>
        <Parameter>
          <ParName>handler</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Callback to be used</ParHint>
          <ParUserDeclaration>%@UI@'ModuleName'%.MsgHandler handler</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_TextWidget *textW, %@UI@'ModuleName'%.MsgHandler handler)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>MessageHandler</Name>
        <Symbol>MessageHandler</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Widget default message handler</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>false</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>element</ParName>
          <ParType>Element</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to element</ParHint>
          <ParUserDeclaration>%@UI@'ModuleName'%.Element *element</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>kind</ParName>
          <ParType>MsgKind</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>kind of event</ParHint>
          <ParUserDeclaration>%@UI@'ModuleName'%.MsgKind kind</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>pData</ParName>
          <ParType>Pvoid</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>optional data pointer, NULL otherwise</ParHint>
          <ParUserDeclaration>void *pData</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%@UI@'ModuleName'%.Element *element, %@UI@'ModuleName'%.MsgKind kind, void *pData)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <Links>
    <EmptySection_DummyValue/>
  </Links>
  <Revisions>
    <RevisionVersion>2</RevisionVersion>
  </Revisions>
</Bean>

<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>UI</Name>
  <Description>Interface TouchScreen\UI for bean TouchScreen, generated by Bean Wizard</Description>
  <Author>Author</Author>
  <Version>01.005</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>GetScreen</Name>
        <Symbol>GetScreen</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>returns the current active screen</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>PScreen</ReturnType>
        <RetHint>the current active screen</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_PScreen #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>DrawBox</Name>
        <Symbol>DrawBox</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Draws a box into the window</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>7</ParamCount>
        <Parameter>
          <ParName>window</ParName>
          <ParType>Window</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>x</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>x position, relative to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>y</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>y position, relative to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>w</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>width of line</ParHint>
        </Parameter>
        <Parameter>
          <ParName>h</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>height of box</ParHint>
        </Parameter>
        <Parameter>
          <ParName>lineWidth</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>width of line</ParHint>
        </Parameter>
        <Parameter>
          <ParName>color</ParName>
          <ParType>PixelColor</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>color to be used</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_Window *window, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h, %'ModuleName'_PixelDim lineWidth, %'ModuleName'_PixelColor color)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>DrawHLine</Name>
        <Symbol>DrawHLine</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Paints a horizontal line in the window</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>window</ParName>
          <ParType>Window</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>x</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>x position, relative to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>y</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>y position, relative to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>w</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>width of line</ParHint>
        </Parameter>
        <Parameter>
          <ParName>color</ParName>
          <ParType>PixelColor</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>color to be used</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_Window *window, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelColor color)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>DrawVLine</Name>
        <Symbol>DrawVLine</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Paints a horizontal line in the window</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>window</ParName>
          <ParType>Window</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>x</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>x position, relative to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>y</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>y position, relative to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>h</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>height of line</ParHint>
        </Parameter>
        <Parameter>
          <ParName>color</ParName>
          <ParType>PixelColor</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>color to be used</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_Window *window, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim h, %'ModuleName'_PixelColor color)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>DrawLine</Name>
        <Symbol>DrawLine</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Draws a line into the window</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>6</ParamCount>
        <Parameter>
          <ParName>window</ParName>
          <ParType>Window</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>x0</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>x position, relative to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>y0</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>y position, relative to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>x1</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>lower right corner x coordinate</ParHint>
        </Parameter>
        <Parameter>
          <ParName>y1</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>lower right corner y coordinate</ParHint>
        </Parameter>
        <Parameter>
          <ParName>color</ParName>
          <ParType>PixelColor</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>color to be used</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_Window *window, %'ModuleName'_PixelDim x0, %'ModuleName'_PixelDim y0, %'ModuleName'_PixelDim x1, %'ModuleName'_PixelDim y1, %'ModuleName'_PixelColor color)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>DrawFilledBox</Name>
        <Symbol>DrawFilledBox</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Paints a horizontal line in the window</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>6</ParamCount>
        <Parameter>
          <ParName>window</ParName>
          <ParType>Window</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>x</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>x position, relative to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>y</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>y position, relative to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>w</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>width of box</ParHint>
        </Parameter>
        <Parameter>
          <ParName>h</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>height of box</ParHint>
        </Parameter>
        <Parameter>
          <ParName>color</ParName>
          <ParType>PixelColor</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>color to be used</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_Window *window, %'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h, %'ModuleName'_PixelColor color)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ClickElement</Name>
        <Symbol>ClickElement</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Method for clicking on an element in the window</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>screen</ParName>
          <ParType>Screen</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to screen</ParHint>
        </Parameter>
        <Parameter>
          <ParName>window</ParName>
          <ParType>Window</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to window</ParHint>
        </Parameter>
        <Parameter>
          <ParName>element</ParName>
          <ParType>Element</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to element</ParHint>
        </Parameter>
        <Parameter>
          <ParName>kind</ParName>
          <ParType>EventCallbackKind</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Event to be handled</ParHint>
        </Parameter>
        <Parameter>
          <ParName>data</ParName>
          <ParType>Pvoid</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>pointer to optional data, or NULL</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_Screen *screen, %'ModuleName'_Window *window, %'ModuleName'_Element *element, %'ModuleName'_EventCallbackKind kind, %'ModuleName'_Pvoid data)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>UserInterface</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>PixelColor</Name>
      <Hint>type large enough to hold the color information</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef %@Display@'ModuleName'%.Color %'ModuleName'%.PixelColor; /* type large enough to hold the color information */\n
</PreparedHint>
      <Type>typedef %@Display@'ModuleName'%.Color %'ModuleName'%.PixelColor;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>PixelDim</Name>
      <Hint>type big enough to hold the x and y coordinates</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef %@Display@'ModuleName'%.PixelDim %'ModuleName'%.PixelDim; /* type big enough to hold the x and y coordinates */\n
</PreparedHint>
      <Type>typedef %@Display@'ModuleName'%.PixelDim %'ModuleName'%.PixelDim;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>painterCallback</Name>
      <Hint>callback to be called to paint the element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef byte (*%'ModuleName'%.painterCallback) (struct _UIWindow *window, struct _UIElement *element); /* callback to be called to paint the element */\n
</PreparedHint>
      <Type>typedef byte (*%'ModuleName'%.painterCallback) (struct _UIWindow *window, struct _UIElement *element);</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>ElementType</Name>
      <Hint>Alias to element type enumeration</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to element type enumeration */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>FontCallbacks</Name>
      <Hint>Callback to retrieve font information.</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef GFONT_Callbacks %'ModuleName'%.FontCallbacks; /* Callback to retrieve font information. */\n
</PreparedHint>
      <Type>typedef GFONT_Callbacks %'ModuleName'%.FontCallbacks;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Header</Name>
      <Hint>Alias for header element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias for header element */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Text</Name>
      <Hint>Alias for StaticText element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias for StaticText element */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Window</Name>
      <Hint>Alias to Window element.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to Window element. */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Element</Name>
      <Hint>Alias to Element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to Element */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>CheckBox</Name>
      <Hint>Alias to checkbox element type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to checkbox element type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Button</Name>
      <Hint>Alias to button element type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to button element type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>BarGraph</Name>
      <Hint>Alias to BarGraph type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to BarGraph type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>ScrollMenu</Name>
      <Hint>Alias to ScrollMenu type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to ScrollMenu type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>CalendarDay</Name>
      <Hint>Calendar day element type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Calendar day element type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>CalendarDateTime</Name>
      <Hint>Alias to CalendarDateTime type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to CalendarDateTime type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>CalendarAppointment</Name>
      <Hint>Alias to calendar appointment</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to calendar appointment */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PCalendarAppointment</Name>
      <Hint>Pointer to a calendar appointment</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef %'ModuleName'_CalendarAppointment* %'ModuleName'_PCalendarAppointment ; /* Pointer to a calendar appointment */\n
</PreparedHint>
      <Type>CalendarAppointment</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Icon</Name>
      <Hint>Alias to icon element type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to icon element type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>IconType</Name>
      <Hint>Alias to icon type enumeration.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to icon type enumeration. */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Screen</Name>
      <Hint>Alias to screen type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Alias to screen type */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PWindow</Name>
      <Hint>Pointer to Window element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef %'ModuleName'_Window* %'ModuleName'_PWindow ; /* Pointer to Window element */\n
</PreparedHint>
      <Type>Window</Type>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PElement</Name>
      <Hint>Pointer to element</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef %'ModuleName'_Element* %'ModuleName'_PElement ; /* Pointer to element */\n
</PreparedHint>
      <Type>Element</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>EventCallbackKind</Name>
      <Hint>different kinds of window event call back</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* different kinds of window event call back */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Space</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PScreen</Name>
      <Hint>pointer to screen</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef %'ModuleName'_Screen* %'ModuleName'_PScreen ; /* pointer to screen */\n
</PreparedHint>
      <Type>Screen</Type>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>Pvoid</Name>
      <Hint>Pointer to void</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to void */\n
</PreparedHint>
      <Type/>
      <HWTestType/>
    </Type>
  </UserTypes>
</Interface>

<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>LDDHWRTC</Name>
  <Description>Interface "GenericTimeDate\LDDHWRTC" for component GenericTimeDate, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.002</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>GetTime</Name>
        <Symbol>GetTime</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns actual time and date. \n
Note: Fields not supported by HW are calculated in software.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>TimePtr</ParName>
          <ParType>LDD_RTC_TTime</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the time structure to fill with current time.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_RTC_TTime *TimePtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetTime</Name>
        <Symbol>SetTime</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sets new time and date.\n
Note: All LDD_RTC_TTime structure members must be correctly filled in.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>Error code, possible codes:\n&lt;ul&gt;\n  &lt;li&gt;ERR_OK - OK.&lt;/li&gt;\n  &lt;li&gt;ERR_DISABLED - Component is disabled.&lt;/li&gt;\n  &lt;li&gt;ERR_SPEED - Component does not work in the active clock configuration.&lt;/li&gt;\n  &lt;li&gt;ERR_RANGE - Parameter out of range.&lt;/li&gt;\n&lt;/ul&gt;</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>TimePtr</ParName>
          <ParType>LDD_RTC_TTime</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the time structure with new time to set.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_RTC_TTime *TimePtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>RTC_LDD</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>uint16_t</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>uint8_t</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>8bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>uint32_t</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>LDD_RTC_TTime</Name>
      <Hint>Structure used for time operation.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Structure used for time operation. */\n
    uint32_t Second; /* seconds (0 - 59) */\n
    uint32_t Minute; /* minutes (0 - 59) */\n
    uint32_t Hour; /* hours (0 - 23) */\n
    uint32_t DayOfWeek; /* day of week (0-Sunday, .. 6-Saturday)  */\n
    uint32_t Day; /* day (1 - 31) */\n
    uint32_t Month; /* month (1 - 12) */\n
    uint32_t Year; /* year */\n
  } LDD_RTC_TTime;\n
</PreparedHint>
      <RecordItem>
        <ItemName>Second</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>seconds (0 - 59)</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Minute</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>minutes (0 - 59)</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Hour</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>hours (0 - 23)</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>DayOfWeek</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>day of week (0-Sunday, .. 6-Saturday) </ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Day</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>day (1 - 31)</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Month</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>month (1 - 12)</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Year</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>year</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TError</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>uint16_t</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TEventMask</Name>
      <Hint>Event mask type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Event mask type. */\n
</PreparedHint>
      <Type/>
      <HWTestType>uint32_t</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceData</Name>
      <Hint>Pointer to this type, specifying the private component state information and data, has to be passed as a parameter to every component's method.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to this type, specifying the private component state information and data, has to be passed as a parameter to every component's method. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TUserData</Name>
      <Hint>Pointer to this type specifying the user or RTOS specific data will be passed as an event or callback parameter.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to this type specifying the user or RTOS specific data will be passed as an event or callback parameter. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>int8_t</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit signed</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverOperationMode</Name>
      <Hint>Driver operation mode type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Driver operation mode type. */\n
</PreparedHint>
      <Type/>
      <HWTestType>8bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallback</Name>
      <Hint>Callback type used for definition of callback functions. </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Callback type used for definition of callback functions.  */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallbackParam</Name>
      <Hint>Callback parameter type used for callback functions. </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Callback parameter type used for callback functions.  */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverState</Name>
      <Hint>Driver state type.  </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Driver state type.   */\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>LDD_RTC_TDaylightSaving</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct {\n
    uint8_t StartHour; /* Daylight saving time start hour. */\n
    uint8_t StartDay; /* Daylight saving time start day. */\n
    uint8_t StartMonth; /* Daylight saving time start month. */\n
    uint8_t EndHour; /* Daylight saving time end hour. */\n
    uint8_t EndDay; /* Daylight saving time end day. */\n
    uint8_t EndMonth; /* Daylight saving time end month. */\n
  } LDD_RTC_TDaylightSaving;\n
</PreparedHint>
      <RecordItem>
        <ItemName>StartHour</ItemName>
        <ItemType>uint8_t</ItemType>
        <ItemHint>Daylight saving time start hour.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>StartDay</ItemName>
        <ItemType>uint8_t</ItemType>
        <ItemHint>Daylight saving time start day.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>StartMonth</ItemName>
        <ItemType>uint8_t</ItemType>
        <ItemHint>Daylight saving time start month.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>EndHour</ItemName>
        <ItemType>uint8_t</ItemType>
        <ItemHint>Daylight saving time end hour.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>EndDay</ItemName>
        <ItemType>uint8_t</ItemType>
        <ItemHint>Daylight saving time end day.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>EndMonth</ItemName>
        <ItemType>uint8_t</ItemType>
        <ItemHint>Daylight saving time end month.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
  </UserTypes>
</Interface>

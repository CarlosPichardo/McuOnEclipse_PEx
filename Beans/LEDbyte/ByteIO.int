<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>ByteIO</Name>
  <Description>Interface LEDbyte\ByteIO for bean LEDbyte, generated by Bean Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.002</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>GetVal</Name>
        <Symbol>GetVal</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the value of the Input/Output bean. If the direction is &lt;b&gt;input&lt;/b&gt; then it reads the input value of the pins and returns it. If the direction is &lt;b&gt;output&lt;/b&gt; then it returns the last written value (see &lt;a href="ByteIOProperties.html#SafeMode"&gt;Safe mode&lt;/a&gt; property for limitations).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Input value</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>PutVal</Name>
        <Symbol>PutVal</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Specified value is passed to the Input/Output bean. If the direction is &lt;b&gt;input&lt;/b&gt; saves the value to a memory or a register, this value will be written to the pins after switching to the output mode - using &lt;tt&gt;SetDir(TRUE)&lt;/tt&gt; (see &lt;a href="ByteIOProperties.html#SafeMode"&gt;Safe mode&lt;/a&gt; property for limitations). If the direction is &lt;b&gt;output&lt;/b&gt; it writes the value to the port. (Method is available only if the Direction = &lt;u&gt;&lt;tt&gt;output&lt;/tt&gt;&lt;/u&gt; or &lt;u&gt;&lt;tt&gt;input/output&lt;/tt&gt;&lt;/u&gt;).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Val</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Output value</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte Val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetBit</Name>
        <Symbol>GetBit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the value of the specified bit/pin of the Input/Output bean. If the direction is &lt;b&gt;input&lt;/b&gt; then it reads the input value of the pin and returns it. If the direction is &lt;b&gt;output&lt;/b&gt; then it returns the last written value (see &lt;a href="ByteIOProperties.html#SafeMode"&gt;Safe mode&lt;/a&gt; property for limitations).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>Boolean</ReturnType>
        <RetHint>Bit value. Possible values:&lt;br /&gt;     &lt;a href="..\..\DOCs\BeanCodeTypicalUsage.html#Bool"&gt;false&lt;/a&gt; - logical "0" (Low level)&lt;br /&gt;     &lt;a href="..\..\DOCs\BeanCodeTypicalUsage.html#Bool"&gt;true&lt;/a&gt; - logical "1" (High level)</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Bit</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit/pin number to read (0 to 7)</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>bool #M#_#C#(byte Bit)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>PutBit</Name>
        <Symbol>PutBit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Specified value is passed to the specified bit/pin of the Input/Output bean. If the direction is &lt;b&gt;input&lt;/b&gt; it saves the value to a memory or a register, this value will be written to the pin after switching to the output mode - using &lt;tt&gt;SetDir(TRUE)&lt;/tt&gt; (see &lt;a href="ByteIOProperties.html#SafeMode"&gt;Safe mode&lt;/a&gt; property for limitations). If the direction is &lt;b&gt;output&lt;/b&gt; it writes the value to the pin. (Method is available only if the Direction = &lt;u&gt;&lt;tt&gt;output&lt;/tt&gt;&lt;/u&gt; or &lt;u&gt;&lt;tt&gt;input/output&lt;/tt&gt;&lt;/u&gt;).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>Bit</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit/pin number (0 to 7)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Val</ParName>
          <ParType>Boolean</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>A new bit value. Possible values:&lt;br /&gt;     &lt;a href="..\..\DOCs\BeanCodeTypicalUsage.html#Bool"&gt;false&lt;/a&gt; - logical "0" (Low level)&lt;br /&gt;     &lt;a href="..\..\DOCs\BeanCodeTypicalUsage.html#Bool"&gt;true&lt;/a&gt; - logical "1" (High level)</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte Bit, bool Val)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetBit</Name>
        <Symbol>SetBit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sets (to one) the specified bit of the Input/Output bean. It is the same as &lt;tt&gt;PutBit(Bit, TRUE)&lt;/tt&gt;. (Method is available only if the Direction = &lt;u&gt;&lt;tt&gt;output&lt;/tt&gt;&lt;/u&gt; or &lt;u&gt;&lt;tt&gt;input/output&lt;/tt&gt;&lt;/u&gt;).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Bit</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit/pin number to set (0 to 7)</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte Bit)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ClrBit</Name>
        <Symbol>ClrBit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Clears (set to zero) the specified bit of the Input/Output bean. It is the same as &lt;tt&gt;PutBit(Bit, FALSE)&lt;/tt&gt;. (Method is available only if the Direction = &lt;u&gt;&lt;tt&gt;output&lt;/tt&gt;&lt;/u&gt; or &lt;u&gt;&lt;tt&gt;input/output&lt;/tt&gt;&lt;/u&gt;).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Bit</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit/pin number to clear (0 to 7)</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte Bit)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>NegBit</Name>
        <Symbol>NegBit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Negates (inverts) the specified bit of the Input/Output bean. It is the same as &lt;tt&gt;PutBit(Bit,!GetBit(Bit))&lt;/tt&gt;. (Method is available only if the Direction = &lt;u&gt;&lt;tt&gt;output&lt;/tt&gt;&lt;/u&gt; or &lt;u&gt;&lt;tt&gt;input/output&lt;/tt&gt;&lt;/u&gt;).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Bit</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit/pin number to invert (0 to 7)</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(byte Bit)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>ByteIO</Template>
  </Registration>
  <UserTypes>
    <EmptySection_DummyValue/>
  </UserTypes>
</Interface>

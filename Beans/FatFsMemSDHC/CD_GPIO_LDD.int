<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>CD_GPIO_LDD</Name>
  <Description>Interface "FatFsMemSDHC\CD_GPIO_LDD" for component FatFsMemSDHC, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.004</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>Init</Name>
        <Symbol>Init</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method initializes the associated peripheral(s) and the component internal variables. The method is called automatically as a part of the application initialization code.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TDeviceData*</ReturnType>
        <RetHint>Pointer to the dynamically allocated private structure or NULL if there was an error.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>UserDataPtr</ParName>
          <ParType>LDD_TUserData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the RTOS device structure. This pointer will be passed to all events as parameter.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TDeviceData* #M#_#C#(LDD_TUserData *UserDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Deinit</Name>
        <Symbol>Deinit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method disables the device and frees the device data structure memory.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to device data structure pointer.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetFieldValue</Name>
        <Symbol>GetFieldValue</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method returns the current input data of the specified field.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>TFieldValue</ReturnType>
        <RetHint>Aligned current port input value masked for allocated pins of the field. The bit 0 corresponds with the pin which has index 0 within the given bit field, the bit 1 corresponds with the pin which has index 1 within the given bit field, etc.</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by &lt;a href="#Init"&gt;Init&lt;/a&gt; method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>Field</ParName>
          <ParType>LDD_GPIO_TBitField</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Bit field to reading. Bit fields are defined during design time and for each bit field there is a generated constant.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_TFieldValue #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <Event>
      <TEvntItem>
        <Name>OnPortEvent</Name>
        <Symbol>OnPortEvent</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Called if defined event on any pin of the port occured. OnPortEvent event and GPIO interrupt must be enabled. See SetPortEventMask() and GetPortEventMask() methods. This event is enabled if &lt;a href="UntitledProperties.html#IntService"&gt;Interrupt service/event&lt;/a&gt; is Enabled and disabled if &lt;a href="UntitledProperties.html#IntService"&gt;Interrupt service/event&lt;/a&gt; is Disabled.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>generate code</Description>
        <Expanded>Yes</Expanded>
        <DefaultValue>true</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>true</IsAssembler>
        <Mode>meiAlwReq_!Exist</Mode>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>UserDataPtr</ParName>
          <ParType>LDD_TUserData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to RTOS device data structure pointer.</ParHint>
        </Parameter>
        <Scope>OVERRIDE</Scope>
        <Declarations>
          <ANSIC>void #C#(LDD_TUserData *UserDataPtr)</ANSIC>
        </Declarations>
        <Children>
          <GrupItem>
            <TEvntName>
              <Name>Event procedure name</Name>
              <Symbol>Name</Symbol>
              <Hint>OnPortEvent procedure name</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
              <ErrorIfNotSet>true</ErrorIfNotSet>
              <IdentType>EVNT</IdentType>
            </TEvntName>
          </GrupItem>
        </Children>
      </TEvntItem>
    </Event>
  </EventList>
  <Registration>
    <Template>GPIO_LDD</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>TPortValue</Name>
      <Hint>Unsigned integer of proper width depending on the size of the GPIO port allocated.\nIt represents unaligned data value of the port. Typically the value of n-th bit represents the data for the n-th pin within the port. Such value is not abstracted from the physical position of the bits within the port.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint> /* Unsigned integer of proper width depending on the size of the GPIO port allocated.&lt;br /&gt;It represents unaligned data value of the port. Typically the value of n-th bit represents the data for the n-th pin within the port. Such value is not abstracted from the physical position of the bits within the port. */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>TFieldValue</Name>
      <Hint>Unsigned integer of proper width depending on the size of the GPIO port allocated.\nIt represents right-aligned data value of the bit field. Typically the value of n-th bit represents the data of the n-th bit within the bit field (not within the port). There are used only so many lowest bits, as it is denoted by the width of the bit field. Such value is abstracted from the physical position of the bit field pins within the port.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint> /* Unsigned integer of proper width depending on the size of the GPIO port allocated.&lt;br /&gt;It represents right-aligned data value of the bit field. Typically the value of n-th bit represents the data of the n-th bit within the bit field (not within the port). There are used only so many lowest bits, as it is denoted by the width of the bit field. Such value is abstracted from the physical position of the bit field pins within the port. */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>TEventMask</Name>
      <Hint>Event status flags.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Event status flags. */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>LDD_GPIO_TEventCondition</Name>
      <Hint>Defines conditions when event is invoked.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef enum { /* Defines conditions when event is invoked. */\n
    LDD_GPIO_DISABLED,\n
    LDD_GPIO_LOW,\n
    LDD_GPIO_HIGH,\n
    LDD_GPIO_RISING,\n
    LDD_GPIO_FALLING,\n
    LDD_GPIO_BOTH\n
  } LDD_GPIO_TEventCondition;\n
</PreparedHint>
      <EnumCount>6</EnumCount>
      <Enum>LDD_GPIO_DISABLED</Enum>
      <Enum>LDD_GPIO_LOW</Enum>
      <Enum>LDD_GPIO_HIGH</Enum>
      <Enum>LDD_GPIO_RISING</Enum>
      <Enum>LDD_GPIO_FALLING</Enum>
      <Enum>LDD_GPIO_BOTH</Enum>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_GPIO_TBitField</Name>
      <Hint>The definition of the type is private and it is not intended to be published to the user. It may be simple index, pointer, structure or other type.\nAbstract type specifying the bit field within the port. The user does not need to create the values of that type, because all bit fields are defined during design-time and there are provided constants representing all available bit fields.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint> /* The definition of the type is private and it is not intended to be published to the user. It may be simple index, pointer, structure or other type.&lt;br /&gt;Abstract type specifying the bit field within the port. The user does not need to create the values of that type, because all bit fields are defined during design-time and there are provided constants representing all available bit fields. */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TUserData</Name>
      <Hint>Pointer to the structure used by RTOS containing driver-specific information.\nInit method receives this pointer and then passes this pointer to all events and call-backs.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to the structure used by RTOS containing driver-specific information.&lt;br /&gt;Init method receives this pointer and then passes this pointer to all events and call-backs. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TUserData*</Name>
      <Hint>Pointer to the structure used by RTOS containing driver-specific information.\nInit method receives this pointer and then passes this pointer to all events and call-backs.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to the structure used by RTOS containing driver-specific information.&lt;br /&gt;Init method receives this pointer and then passes this pointer to all events and call-backs. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceData*</Name>
      <Hint>Pointer to the private structure containing component state information. Private HAL driver data.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to the private structure containing component state information. Private HAL driver data. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceData</Name>
      <Hint>Pointer to the private structure containing component state information. Private HAL driver data.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to the private structure containing component state information. Private HAL driver data. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TError</Name>
      <Hint>Error identifier type</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Error identifier type */\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TPinMask</Name>
      <Hint>Bit mask of pins that need to be connected</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Bit mask of pins that need to be connected */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TEventMask</Name>
      <Hint>Event mask type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>uint16_t /* Event mask type. */\n
</PreparedHint>
      <Type>uint16_t</Type>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverOperationMode</Name>
      <Hint>Driver operation mode type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Driver operation mode type. */\n
</PreparedHint>
      <Type/>
      <HWTestType>8bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallback</Name>
      <Hint>Callback type used for definition of callback functions. </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Callback type used for definition of callback functions.  */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverState</Name>
      <Hint>Driver state type.  </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Driver state type.   */\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallbackParam</Name>
      <Hint>Callback parameter type used for callback functions.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Callback parameter type used for callback functions. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
  </UserTypes>
</Interface>

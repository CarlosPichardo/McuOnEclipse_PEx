<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>SDHC</Name>
  <Description>Interface "FatFsMemSDHC\SDHC" for component FatFsMemSDHC, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.001</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>Init</Name>
        <Symbol>Init</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initializes the device.\n
Allocates memory for the device data structure, allocates interrupt vectors and sets interrupt priority, sets pin routing, sets timing, etc. If the property &lt;a href="SDHC_LDDProperties.html#EnableDevice"&gt;"Enable device"&lt;/a&gt;  is set to "yes" then the device is also enabled (see the description of the &lt;a href="SDHC_LDDMethods.html#Enable"&gt;Enable&lt;/a&gt; method). In this case the &lt;a href="SDHC_LDDMethods.html#Enable"&gt;Enable&lt;/a&gt; method is not necessary and need not to be generated. \n
This method can be called only once. Before the second call of Init the &lt;a href="SDHC_LDDMethods.html#Deinit"&gt;Deinit&lt;/a&gt; method must be called first.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnTypeANSICUserDeclaration>LDD_TDeviceData*</ReturnTypeANSICUserDeclaration>
        <ReturnType>LDD_TDeviceData</ReturnType>
        <RetHint>Pointer to the device data structure. </RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>UserDataPtr</ParName>
          <ParType>LDD_TUserData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to user data structure pointer.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TDeviceData* #M#_#C#(LDD_TUserData *UserDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Deinit</Name>
        <Symbol>Deinit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Deinitializes the device. Switches off the device, frees the device data structure memory, interrupt vectors, etc.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Enable</Name>
        <Symbol>Enable</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Enables the component.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - OK</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Disable</Name>
        <Symbol>Disable</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Disables the component.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - OK</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetEventMask</Name>
        <Symbol>SetEventMask</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sets event mask.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - OK\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_PARAM_MASK - Invalid mask (one or more event is unmaskable)</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>EventMask</ParName>
          <ParType>LDD_TEventMask</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Event mask</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_TEventMask EventMask)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetEventMask</Name>
        <Symbol>GetEventMask</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns event mask.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TEventMask</ReturnType>
        <RetHint>Current event mask.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TEventMask #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>DetectCards</Name>
        <Symbol>DetectCards</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Detects newly inserted and removed cards. The OnCardInserted event will be called for every new card and the OnCardRemoved event will be called for every removed card. This method should be used when card detection pin is not available.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - Card detection started\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_BUSY - Another card operation is in progress</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SelectCard</Name>
        <Symbol>SelectCard</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Selects a card by its identification number. All further operations will apply to this card. Special card identification number &amp;lt;compId&amp;gt;_NO_CARD will deselect the active card.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - Card selection started\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_BUSY - Another card operation is in progress\nERR_PARAM_ID - Invalid card ID</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Id</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Card identification number passed by the OnCardInserted event parameter.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, uint8_t Id)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetCardInfo</Name>
        <Symbol>GetCardInfo</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns card information about the selected card. Method call starts the card information retrieval process. After the card information has been received, the OnFinished event is called (the component state changes to idle) and the information is stored in the specified variable.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - Card information retrieval started\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_BUSY - Another card operation is in progress</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>InfoPtr</ParName>
          <ParType>LDD_SDHC_TCardInfo</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to a variable, where card information will be stored.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_SDHC_TCardInfo *InfoPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>TransferBlocks</Name>
        <Symbol>TransferBlocks</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initiates a data block transfer on the selected card. Transfer can be a read or write operation depending on the transfer operation parameter. Read operation reads data blocks from the specified address on a memory card and stores their content into buffers specified by the buffer descriptor list. Write operation writes data blocks specified by the buffer descriptor list to a card memory on the specified address. Data blocks should be the same size and the block size should be supported by the memory card. Buffer addresses should be aligned to a hardware specific address boundary.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - Transfer started\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_BUSY - Another card operation is in progress\nERR_PARAM_ADDRESS - Invalid buffer address (one or more buffer address from the list of buffer descriptors is misaligned)\nERR_PARAM_BUFFER_COUNT - Buffer count exceeds the internal buffer table size</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Operation</ParName>
          <ParType>LDD_SDHC_TTransferOperation</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Transfer operation</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Address</ParName>
          <ParType>uint32_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Card memory address. Byte address in case of standard capacity memory cards, 512 byte block number in case of high capacity memory cards.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>BufferDescListPtr</ParName>
          <ParType>LDD_SDHC_TBufferDesc</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to data block buffer descriptor list.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>BufferDescCount</ParName>
          <ParType>uint16_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Data block buffer descriptor list item count</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_SDHC_TTransferOperation Operation, uint32_t Address, LDD_SDHC_TBufferDesc *BufferDescListPtr, uint16_t BufferDescCount)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>EraseBlocks</Name>
        <Symbol>EraseBlocks</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initiates a memory area erasion on the selected card. Erase operation erases a memory area of the specified size from the specified address on a memory card.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - Erasing started\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_BUSY - Another card operation is in progress</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Address</ParName>
          <ParType>uint32_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Address of the beginning of the erased area. Byte address in case of standard capacity memory card and 512 byte block number in case of high capacity memory card.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Size</ParName>
          <ParType>uint32_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of the erased area. Byte size in case of standard capacity memory card and 512 byte blocks count in case of high capacity memory card.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, uint32_t Address, uint32_t Size)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetDataWidth</Name>
        <Symbol>SetDataWidth</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initiates a data width setup. The card has to support the specified data width.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - Setup started\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_BUSY - Another card operation is in progress\nERR_PARAM_WIDTH - Invalid data width</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Width</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Data bus bit count.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, uint8_t Width)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetVoltage</Name>
        <Symbol>SetVoltage</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initiates a bus voltage change. The card has to support the specified voltage.</Hint>
        <ItemLevel>EXPERT</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - Setup started\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_BUSY - Another card operation is in progress</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Voltage</ParName>
          <ParType>LDD_SDHC_TVoltage</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Voltage identifier.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_SDHC_TVoltage Voltage)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetWriteProtection</Name>
        <Symbol>SetWriteProtection</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initiates a write protection setup for the selected card. If the write protection type is LDD_SDHC_GROUP, write protection will be set for the addressed write protection group. Write protection group size is contained within the card information structure. If the write protection type is LDD_SDHC_CARD, write protection will be set for the whole card and the address parameter will be ignored. Only a whole card write protection clear can remove this protection. The card has to support write protection.</Hint>
        <ItemLevel>EXPERT</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - Setup started\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_BUSY - Another card operation is in progress</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Type</ParName>
          <ParType>LDD_SDHC_TWriteProtectType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Write protection type.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Address</ParName>
          <ParType>uint32_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Address of the write protection group, if the write protection type is LDD_SDHC_GROUP. Byte address in case of standard capacity memory card and 512 byte block number in case of high capacity memory card.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Protected</ParName>
          <ParType>Boolean</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Indicates whether the addressed write protection group or card should be write protected or not.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_SDHC_TWriteProtectType Type, uint32_t Address, bool Protected)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetWriteProtection</Name>
        <Symbol>GetWriteProtection</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initiates a write protection mask retrieval for the selected card. After the mask has been received, the OnFinished event is called and the mask is stored in the specified variable. The returned mask contains a bit mask of write protected write protection groups starting at the specified address. The least significant bit represents the status of the first write protection group. Bits of write protection groups out of range are cleared. The card has to support write protection.</Hint>
        <ItemLevel>EXPERT</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - Write protection mask retrieval started\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_BUSY - Another card operation is in progress</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Address</ParName>
          <ParType>uint32_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Address of the write protection group. Byte address in case of standard capacity memory card and 512 byte block number in case of high capacity memory card.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>MaskPtr</ParName>
          <ParType>uint32_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to a variable, where the write protection groups status mask will be stored.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, uint32_t Address, uint32_t *MaskPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>CancelOperation</Name>
        <Symbol>CancelOperation</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initiates a cancelation of the ongoing operation. The OnFinished event will be called for the stopped operation.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - Operation cancelation started\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_NOTAVAIL - No operation is in progress</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetStatus</Name>
        <Symbol>GetStatus</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the current component status, specifying the ongoing operation.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_SDHC_TStatus</ReturnType>
        <RetHint> Component status.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_SDHC_TStatus #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetError</Name>
        <Symbol>GetError</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the last error code and the memory address where the error occurred (if applicable).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_SDHC_TError</ReturnType>
        <RetHint> The last error code.</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>AddressPtr</ParName>
          <ParType>uint32_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to a variable, where the error address will be stored.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_SDHC_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, uint32_t *AddressPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ConnectPin</Name>
        <Symbol>ConnectPin</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method reconnects the requested pins associated with the selected peripheral in the component. This method is only available for CPU derivatives and peripherals that support the runtime pin sharing with other internal on-chip peripherals.</Hint>
        <ItemLevel>EXPERT</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>\nError code, possible values:\nERR_OK - OK\nERR_PARAM_MASK - Invalid pin mask</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to device data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>PinMask</ParName>
          <ParType>LDD_TPinMask</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Mask for the requested pins. The peripheral pins are reconnected according to this mask.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_TPinMask PinMask)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetOperationMode</Name>
        <Symbol>SetOperationMode</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method requests to change the component's operation mode. Upon a request to change the operation mode, the component will finish a pending job first and then notify a caller that an operation mode has been changed. When no job is pending (ERR_OK), the component changes an operation mode immediately and notify a caller about this change. </Hint>
        <ItemLevel>EXPERT</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TError</ReturnType>
        <RetHint>Error code, possible codes:\nERR_OK - OK\nERR_DISABLED - The component is disabled\nERR_SPEED - The component does not work in the active clock configuration\nERR_PARAM_MODE - Invalid operation mode\nERR_BUSY - A job is pending</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by Init method. </ParHint>
        </Parameter>
        <Parameter>
          <ParName>OperationMode</ParName>
          <ParType>LDD_TDriverOperationMode</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Requested driver operation mode.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>ModeChangeCallback</ParName>
          <ParType>LDD_TCallback</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Callback to notify the upper layer once a mode has been changed.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>ModeChangeCallbackParamPtr</ParName>
          <ParType>LDD_TCallbackParam</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to callback parameter to notify the upper layer once a mode has been changed.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TError #M#_#C#(LDD_TDeviceData *DeviceDataPtr, LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCallback, LDD_TCallbackParam *ModeChangeCallbackParamPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetDriverState</Name>
        <Symbol>GetDriverState</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This method returns the current driver status.</Hint>
        <ItemLevel>ADVANCED</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>LDD_TDriverState</ReturnType>
        <RetHint>\nThe current driver status mask. The following status masks defined in PE_LDD.h can be used to check the current driver status:\nPE_LDD_DRIVER_DISABLED_IN_CLOCK_CONFIGURATION - Driver is disabled in the current clock configuration\nPE_LDD_DRIVER_DISABLED_BY_USER - Driver is disabled by the user\nPE_LDD_DRIVER_BUSY - Driver is in the BUSY state</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>DeviceDataPtr</ParName>
          <ParType>LDD_TDeviceData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Device data structure pointer returned by Init method. </ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>LDD_TDriverState #M#_#C#(LDD_TDeviceData *DeviceDataPtr)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <Event>
      <TEvntItem>
        <Name>OnCardInserted</Name>
        <Symbol>OnCardInserted</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This event is called when a card is inserted into the slot. The card identification number is retrieved and it is passed to the event. If card detection pin is not available, the DetectCards method calls this event.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>generate code</Description>
        <Expanded>Yes</Expanded>
        <DefaultValue>true</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>false</IsAssembler>
        <Mode>meiAlwReq_!Exist</Mode>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>UserDataPtr</ParName>
          <ParType>LDD_TUserData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the user data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Id</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Card identification number of the inserted card.</ParHint>
        </Parameter>
        <Scope>OVERRIDE</Scope>
        <Declarations>
          <ANSIC>void #C#(LDD_TUserData *UserDataPtr, uint8_t Id)</ANSIC>
        </Declarations>
        <Children>
          <GrupItem>
            <TEvntName>
              <Name>Event procedure name</Name>
              <Symbol>Name</Symbol>
              <Hint>OnCardInserted procedure name</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
              <ErrorIfNotSet>true</ErrorIfNotSet>
              <IdentType>EVNT</IdentType>
            </TEvntName>
          </GrupItem>
        </Children>
      </TEvntItem>
    </Event>
    <Event>
      <TEvntItem>
        <Name>OnCardRemoved</Name>
        <Symbol>OnCardRemoved</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This event is called after a card is removed. The card identification number is retrieved and it is passed to the event. If card detection pin is not available, the SelectCard method calls this event after a try to select the removed card.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>generate code</Description>
        <Expanded>Yes</Expanded>
        <DefaultValue>true</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>false</IsAssembler>
        <Mode>meiAlwReq_!Exist</Mode>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>UserDataPtr</ParName>
          <ParType>LDD_TUserData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the user data structure.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Id</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Card identification number of the removed card.</ParHint>
        </Parameter>
        <Scope>OVERRIDE</Scope>
        <Declarations>
          <ANSIC>void #C#(LDD_TUserData *UserDataPtr, uint8_t Id)</ANSIC>
        </Declarations>
        <Children>
          <GrupItem>
            <TEvntName>
              <Name>Event procedure name</Name>
              <Symbol>Name</Symbol>
              <Hint>OnCardRemoved procedure name</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
              <ErrorIfNotSet>true</ErrorIfNotSet>
              <IdentType>EVNT</IdentType>
            </TEvntName>
          </GrupItem>
        </Children>
      </TEvntItem>
    </Event>
    <Event>
      <TEvntItem>
        <Name>OnFinished</Name>
        <Symbol>OnFinished</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>This event is called after an operation, initiated by user, has finished.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>generate code</Description>
        <Expanded>Yes</Expanded>
        <DefaultValue>true</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <IsAssembler>false</IsAssembler>
        <Mode>meiAlwReq_!Exist</Mode>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>UserDataPtr</ParName>
          <ParType>LDD_TUserData</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the user data structure.</ParHint>
        </Parameter>
        <Scope>OVERRIDE</Scope>
        <Declarations>
          <ANSIC>void #C#(LDD_TUserData *UserDataPtr)</ANSIC>
        </Declarations>
        <Children>
          <GrupItem>
            <TEvntName>
              <Name>Event procedure name</Name>
              <Symbol>Name</Symbol>
              <Hint>OnFinished procedure name</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
              <ErrorIfNotSet>true</ErrorIfNotSet>
              <IdentType>EVNT</IdentType>
            </TEvntName>
          </GrupItem>
        </Children>
      </TEvntItem>
    </Event>
  </EventList>
  <Registration>
    <Template>SDHC</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TError</Name>
      <Hint>Error identifier type</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Error identifier type */\n
</PreparedHint>
      <Type/>
      <HWTestType>uint16_t</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TUserData</Name>
      <Hint>User data</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* User data */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceData</Name>
      <Hint>Device data</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>void /* Device data */\n
</PreparedHint>
      <Type>void</Type>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TEventMask</Name>
      <Hint>Event mask type</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Event mask type */\n
</PreparedHint>
      <Type/>
      <HWTestType>uint32_t</HWTestType>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>LDD_TPinMask</Name>
      <Hint>Bit mask of pins for pin connection methods</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef uint32_t LDD_TPinMask ;/* Bit mask of pins for pin connection methods */\n
</PreparedHint>
      <Type>uint32_t</Type>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>LDD_SDHC_TCardInfo</Name>
      <Hint>Card features description</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Card features description */\n
    LDD_SDHC_TCardType Type; /* Card type */\n
    uint16_t BlockLength; /* Physical memory block length */\n
    uint32_t BlockCount; /* Number of physical memory blocks */\n
    LDD_SDHC_TCardCaps Caps; /* Card capabilities */\n
  } LDD_SDHC_TCardInfo;\n
</PreparedHint>
      <RecordItem>
        <ItemName>Type</ItemName>
        <ItemType>LDD_SDHC_TCardType</ItemType>
        <ItemHint>Card type</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>BlockLength</ItemName>
        <ItemType>uint16_t</ItemType>
        <ItemHint>Physical memory block length</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>BlockCount</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>Number of physical memory blocks</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Caps</ItemName>
        <ItemType>LDD_SDHC_TCardCaps</ItemType>
        <ItemHint>Card capabilities</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>LDD_SDHC_TCardType</Name>
      <Hint>Card types</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef enum { /* Card types */\n
    LDD_SDHC_SD,\n
    LDD_SDHC_SDIO,\n
    LDD_SDHC_SDCOMBO,\n
    LDD_SDHC_MMC,\n
    LDD_SDHC_CE_ATA\n
  } LDD_SDHC_TCardType;\n
</PreparedHint>
      <EnumCount>5</EnumCount>
      <Enum>LDD_SDHC_SD</Enum>
      <Enum>LDD_SDHC_SDIO</Enum>
      <Enum>LDD_SDHC_SDCOMBO</Enum>
      <Enum>LDD_SDHC_MMC</Enum>
      <Enum>LDD_SDHC_CE_ATA</Enum>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>LDD_SDHC_TCardCaps</Name>
      <Hint>Card capabilities</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Card capabilities */\n
    uint8_t DataWidths; /* Bit mask of supported data bus widths */\n
    uint8_t Operations; /* Bit mask of supported operations */\n
    bool HighSpeed; /* Indicates whether the card supports high speed mode (SD bus clock frequency higher than about 25MHz) */\n
    bool HighCapacity; /* Indicates whether the card requires block addressing instead of byte addressing */\n
    bool LowVoltage; /* Indicates whether the card supports the host's low voltage range */\n
    LDD_SDHC_TCardAccess Read; /* Card data read access capabilities */\n
    LDD_SDHC_TCardAccess Write; /* Card data write access capabilities */\n
    LDD_SDHC_TCardErase Erase; /* Card data erasion capabilities */\n
    LDD_SDHC_TCardWriteProtect WriteProtect; /* Write protection properties */\n
  } LDD_SDHC_TCardCaps;\n
</PreparedHint>
      <RecordItem>
        <ItemName>DataWidths</ItemName>
        <ItemType>uint8_t</ItemType>
        <ItemHint>Bit mask of supported data bus widths</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Operations</ItemName>
        <ItemType>uint8_t</ItemType>
        <ItemHint>Bit mask of supported operations</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>HighSpeed</ItemName>
        <ItemType>Boolean</ItemType>
        <ItemHint>Indicates whether the card supports high speed mode (SD bus clock frequency higher than about 25MHz)</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>HighCapacity</ItemName>
        <ItemType>Boolean</ItemType>
        <ItemHint>Indicates whether the card requires block addressing instead of byte addressing</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>LowVoltage</ItemName>
        <ItemType>Boolean</ItemType>
        <ItemHint>Indicates whether the card supports the host's low voltage range</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Read</ItemName>
        <ItemType>LDD_SDHC_TCardAccess</ItemType>
        <ItemHint>Card data read access capabilities</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Write</ItemName>
        <ItemType>LDD_SDHC_TCardAccess</ItemType>
        <ItemHint>Card data write access capabilities</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Erase</ItemName>
        <ItemType>LDD_SDHC_TCardErase</ItemType>
        <ItemHint>Card data erasion capabilities</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>WriteProtect</ItemName>
        <ItemType>LDD_SDHC_TCardWriteProtect</ItemType>
        <ItemHint>Write protection properties</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>LDD_SDHC_TCardAccess</Name>
      <Hint>Card access properties</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Card access properties */\n
    uint16_t MaxBlockLength; /* Max. transferable block length */\n
    bool MisalignBlock; /* Indicates whether the data block can be spread over more than one physical block of the memory device */\n
    bool PartialBlock; /* Indicates whether partial block sizes can be used in block access */\n
  } LDD_SDHC_TCardAccess;\n
</PreparedHint>
      <RecordItem>
        <ItemName>MaxBlockLength</ItemName>
        <ItemType>uint16_t</ItemType>
        <ItemHint>Max. transferable block length</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>MisalignBlock</ItemName>
        <ItemType>Boolean</ItemType>
        <ItemHint>Indicates whether the data block can be spread over more than one physical block of the memory device</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>PartialBlock</ItemName>
        <ItemType>Boolean</ItemType>
        <ItemHint>Indicates whether partial block sizes can be used in block access</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>LDD_SDHC_TCardErase</Name>
      <Hint>Card erasion properties</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Card erasion properties */\n
    uint16_t SectorSize; /* The size of an erasable unit */\n
    uint8_t Pattern; /* Memory content after erase */\n
  } LDD_SDHC_TCardErase;\n
</PreparedHint>
      <RecordItem>
        <ItemName>SectorSize</ItemName>
        <ItemType>uint16_t</ItemType>
        <ItemHint>The size of an erasable unit</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Pattern</ItemName>
        <ItemType>uint8_t</ItemType>
        <ItemHint>Memory content after erase</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>LDD_SDHC_TCardWriteProtect</Name>
      <Hint>Card write protection properties</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Card write protection properties */\n
    uint16_t SectorSize; /* The size of a write protection sector in number of erase sectors */\n
    bool Permanent; /* Indicates whether card is permanently write protected (read-only) */\n
  } LDD_SDHC_TCardWriteProtect;\n
</PreparedHint>
      <RecordItem>
        <ItemName>SectorSize</ItemName>
        <ItemType>uint16_t</ItemType>
        <ItemHint>The size of a write protection sector in number of erase sectors</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>Permanent</ItemName>
        <ItemType>Boolean</ItemType>
        <ItemHint>Indicates whether card is permanently write protected (read-only)</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>LDD_SDHC_TTransferOperation</Name>
      <Hint>Transfer operations</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef enum { /* Transfer operations */\n
    LDD_SDHC_READ,\n
    LDD_SDHC_WRITE\n
  } LDD_SDHC_TTransferOperation;\n
</PreparedHint>
      <EnumCount>2</EnumCount>
      <Enum>LDD_SDHC_READ</Enum>
      <Enum>LDD_SDHC_WRITE</Enum>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>LDD_SDHC_TBufferDesc</Name>
      <Hint>Transfer buffer descriptor</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Transfer buffer descriptor */\n
    uint16_t Size; /* Buffer data size */\n
    uint8_t* DataPtr; /* Pointer to buffer data */\n
  } LDD_SDHC_TBufferDesc;\n
</PreparedHint>
      <RecordItem>
        <ItemName>Size</ItemName>
        <ItemType>uint16_t</ItemType>
        <ItemHint>Buffer data size</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>DataPtr</ItemName>
        <ItemType>uint8_t</ItemType>
        <ItemHint>Pointer to buffer data</ItemHint>
        <ItemPointer>yes</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>TBusClock</Name>
      <Hint>Bus clock identifier. "busClockFrequency" is expanded for each frequency selected by the PE Component inspector timing property.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef enum { /* Bus clock identifier. &amp;quot;busClockFrequency&amp;quot; is expanded for each frequency selected by the PE Component inspector timing property. */\n
    busClockFrequency\n
  } &lt;i&gt;ComponentName_&lt;/i&gt;TBusClock;\n
</PreparedHint>
      <EnumCount>1</EnumCount>
      <Enum>busClockFrequency</Enum>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>LDD_SDHC_TVoltage</Name>
      <Hint>Voltage options</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef enum { /* Voltage options */\n
    LDD_SDHC_LOW_VOLTAGE,\n
    LDD_SDHC_HIGH_VOLTAGE\n
  } LDD_SDHC_TVoltage;\n
</PreparedHint>
      <EnumCount>2</EnumCount>
      <Enum>LDD_SDHC_LOW_VOLTAGE</Enum>
      <Enum>LDD_SDHC_HIGH_VOLTAGE</Enum>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>LDD_SDHC_TWriteProtectType</Name>
      <Hint>Write protection types</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef enum { /* Write protection types */\n
    LDD_SDHC_GROUP,\n
    LDD_SDHC_CARD\n
  } LDD_SDHC_TWriteProtectType;\n
</PreparedHint>
      <EnumCount>2</EnumCount>
      <Enum>LDD_SDHC_GROUP</Enum>
      <Enum>LDD_SDHC_CARD</Enum>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>LDD_SDHC_TStatus</Name>
      <Hint>Component states</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef enum { /* Component states */\n
    LDD_SDHC_DISABLED,\n
    LDD_SDHC_IDLE,\n
    LDD_SDHC_VOLTAGE_VALIDATION,\n
    LDD_SDHC_CARD_IDENTIFICATION,\n
    LDD_SDHC_CARD_INFO_RETRIEVAL,\n
    LDD_SDHC_TRANSFER,\n
    LDD_SDHC_ERASION,\n
    LDD_SDHC_IO_REG_TRANSFER,\n
    LDD_SDHC_BUS_WIDTH_SELECTION,\n
    LDD_SDHC_SPEED_MODE_SELECTION,\n
    LDD_SDHC_WRITE_PROTECTION_SETUP,\n
    LDD_SDHC_WRITE_PROTECTION_RETRIEVAL\n
  } LDD_SDHC_TStatus;\n
</PreparedHint>
      <EnumCount>12</EnumCount>
      <Enum>LDD_SDHC_DISABLED</Enum>
      <Enum>LDD_SDHC_IDLE</Enum>
      <Enum>LDD_SDHC_VOLTAGE_VALIDATION</Enum>
      <Enum>LDD_SDHC_CARD_IDENTIFICATION</Enum>
      <Enum>LDD_SDHC_CARD_INFO_RETRIEVAL</Enum>
      <Enum>LDD_SDHC_TRANSFER</Enum>
      <Enum>LDD_SDHC_ERASION</Enum>
      <Enum>LDD_SDHC_IO_REG_TRANSFER</Enum>
      <Enum>LDD_SDHC_BUS_WIDTH_SELECTION</Enum>
      <Enum>LDD_SDHC_SPEED_MODE_SELECTION</Enum>
      <Enum>LDD_SDHC_WRITE_PROTECTION_SETUP</Enum>
      <Enum>LDD_SDHC_WRITE_PROTECTION_RETRIEVAL</Enum>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>LDD_SDHC_TError</Name>
      <Hint>Operation completion error codes</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef enum { /* Operation completion error codes */\n
    LDD_SDHC_ERR_OK,\n
    LDD_SDHC_ERR_DMA,\n
    LDD_SDHC_ERR_NOT_SUPPORTED,\n
    LDD_SDHC_ERR_TIMEOUT,\n
    LDD_SDHC_ERR_COMMAND_CRC,\n
    LDD_SDHC_ERR_DATA_CRC,\n
    LDD_SDHC_ERR_ADDRESS_OUT_OF_RANGE,\n
    LDD_SDHC_ERR_ADDRESS_MISALIGN,\n
    LDD_SDHC_ERR_BLOCK_LEN_ERROR,\n
    LDD_SDHC_ERR_WP_VIOLATION,\n
    LDD_SDHC_ERR_CARD_IS_LOCKED,\n
    LDD_SDHC_ERR_WP_ERASE_SKIP,\n
    LDD_SDHC_ERR_INTERNAL_FAILURE,\n
    LDD_SDHC_ERR_CARD_FAILURE\n
  } LDD_SDHC_TError;\n
</PreparedHint>
      <EnumCount>14</EnumCount>
      <Enum>LDD_SDHC_ERR_OK</Enum>
      <Enum>LDD_SDHC_ERR_DMA</Enum>
      <Enum>LDD_SDHC_ERR_NOT_SUPPORTED</Enum>
      <Enum>LDD_SDHC_ERR_TIMEOUT</Enum>
      <Enum>LDD_SDHC_ERR_COMMAND_CRC</Enum>
      <Enum>LDD_SDHC_ERR_DATA_CRC</Enum>
      <Enum>LDD_SDHC_ERR_ADDRESS_OUT_OF_RANGE</Enum>
      <Enum>LDD_SDHC_ERR_ADDRESS_MISALIGN</Enum>
      <Enum>LDD_SDHC_ERR_BLOCK_LEN_ERROR</Enum>
      <Enum>LDD_SDHC_ERR_WP_VIOLATION</Enum>
      <Enum>LDD_SDHC_ERR_CARD_IS_LOCKED</Enum>
      <Enum>LDD_SDHC_ERR_WP_ERASE_SKIP</Enum>
      <Enum>LDD_SDHC_ERR_INTERNAL_FAILURE</Enum>
      <Enum>LDD_SDHC_ERR_CARD_FAILURE</Enum>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>uint8_t</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>8bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>uint16_t</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>uint32_t</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TClockConfiguration</Name>
      <Hint>CPU clock configuration type. Index of the pre-configured clock configuration in the CPU component.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* CPU clock configuration type. Index of the pre-configured clock configuration in the CPU component. */\n
</PreparedHint>
      <Type/>
      <HWTestType>uint32_t</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverOperationMode</Name>
      <Hint>Driver operation mode type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Driver operation mode type. */\n
</PreparedHint>
      <Type/>
      <HWTestType>uint32_t</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallback</Name>
      <Hint>Callback type used for definition of callback functions. </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Callback type used for definition of callback functions.  */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverState</Name>
      <Hint>Driver state type.  </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Driver state type.   */\n
</PreparedHint>
      <Type/>
      <HWTestType>uint32_t</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallbackParam</Name>
      <Hint>Callback parameter type used for callback functions.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Callback parameter type used for callback functions. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
  </UserTypes>
</Interface>

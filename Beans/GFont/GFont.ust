<?xml version="1.0" encoding="UTF-8"?>
<!--User types for component-->
<UserTypes>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>PConstByte</Name>
    <Hint>Pointer to a constant byte.</Hint>
    <Generate>yes</Generate>
    <Unique>no</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>typedef const uint8_t *PConstByte; /* Pointer to a constant byte. */\n
</PreparedHint>
    <Type>typedef const uint8_t *PConstByte;</Type>
    <HWTestType>16bit signed</HWTestType>
  </Type>
  <Type>
    <UsrType>TRecordType</UsrType>
    <Name>GFONT_CharInfo</Name>
    <Hint>A descriptor describing the font.</Hint>
    <Generate>yes</Generate>
    <Unique>no</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>  typedef struct { /* A descriptor describing the font. */\n
    int8_t dwidth; /* position of next char. relative to the current */\n
    uint8_t width; /* width of character in pixels */\n
    uint8_t height; /* height of character in pixels */\n
    int8_t offsetX; /* horizontal offset to left edge of bounding box */\n
    int8_t offsetY; /* vertical offset to bottom edge of bounding box */\n
    PConstByte CharBMP; /* pointer to character bitmap defined above */\n
  } GFONT_CharInfo;\n
</PreparedHint>
    <RecordItem>
      <ItemName>dwidth</ItemName>
      <ItemType>int8_t</ItemType>
      <ItemHint>position of next char. relative to the current</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>width</ItemName>
      <ItemType>uint8_t</ItemType>
      <ItemHint>width of character in pixels</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>height</ItemName>
      <ItemType>uint8_t</ItemType>
      <ItemHint>height of character in pixels</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>offsetX</ItemName>
      <ItemType>int8_t</ItemType>
      <ItemHint>horizontal offset to left edge of bounding box</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>offsetY</ItemName>
      <ItemType>int8_t</ItemType>
      <ItemHint>vertical offset to bottom edge of bounding box</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>CharBMP</ItemName>
      <ItemType>PConstByte</ItemType>
      <ItemHint>pointer to character bitmap defined above</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
  </Type>
  <Type>
    <UsrType>TPointerType</UsrType>
    <Name>PGFONT_CharInfo</Name>
    <Hint>A pointer to GFONT_CharInfo</Hint>
    <Generate>yes</Generate>
    <Unique>no</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>  typedef GFONT_CharInfo* PGFONT_CharInfo ; /* A pointer to GFONT_CharInfo */\n
</PreparedHint>
    <Type>GFONT_CharInfo</Type>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>CallbackGetFontChar</Name>
    <Hint>Callback used to get the font information for a single character.</Hint>
    <Generate>yes</Generate>
    <Unique>no</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>typedef PGFONT_CharInfo (*CallbackGetFontChar)(uint8_t ch); /* Callback used to get the font information for a single character. */\n
</PreparedHint>
    <Type>typedef PGFONT_CharInfo (*CallbackGetFontChar)(uint8_t ch);</Type>
    <HWTestType>16bit signed</HWTestType>
  </Type>
  <Type>
    <UsrType>TRecordType</UsrType>
    <Name>GFONT_Callbacks</Name>
    <Hint>Structure with font relevant callbacks.</Hint>
    <Generate>yes</Generate>
    <Unique>no</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>  typedef struct { /* Structure with font relevant callbacks. */\n
    CallbackGetFontChar GetFontChar; /* Callback for retrieving a font character. */\n
    uint8_t boundingBoxHeight; /* Height of the bounding box. This includes the height of the underline box height. */\n
    uint8_t underlineBoxHeight; /* Height of the underline box height. */\n
    uint8_t lineSpaceBoxHeight; /* Height of the space between lines */\n
  } GFONT_Callbacks;\n
</PreparedHint>
    <RecordItem>
      <ItemName>GetFontChar</ItemName>
      <ItemType>CallbackGetFontChar</ItemType>
      <ItemHint>Callback for retrieving a font character.</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>boundingBoxHeight</ItemName>
      <ItemType>uint8_t</ItemType>
      <ItemHint>Height of the bounding box. This includes the height of the underline box height.</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>underlineBoxHeight</ItemName>
      <ItemType>uint8_t</ItemType>
      <ItemHint>Height of the underline box height.</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>lineSpaceBoxHeight</ItemName>
      <ItemType>uint8_t</ItemType>
      <ItemHint>Height of the space between lines</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
  </Type>
  <Type>
    <UsrType>TPointerType</UsrType>
    <Name>PGFONT_Callbacks</Name>
    <Hint>Pointer to struct for font callbacks.</Hint>
    <Generate>yes</Generate>
    <Unique>no</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>  typedef GFONT_Callbacks* PGFONT_Callbacks ; /* Pointer to struct for font callbacks. */\n
</PreparedHint>
    <Type>GFONT_Callbacks</Type>
  </Type>
  <Type>
    <UsrType>TRetypeType</UsrType>
    <Name>uint8_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>  typedef byte uint8_t ;\n
</PreparedHint>
    <Type>8bit unsigned</Type>
  </Type>
  <Type>
    <UsrType>TRetypeType</UsrType>
    <Name>uint16_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>  typedef word uint16_t ;\n
</PreparedHint>
    <Type>16bit unsigned</Type>
  </Type>
  <Type>
    <UsrType>TRetypeType</UsrType>
    <Name>uint32_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>  typedef dword uint32_t ;\n
</PreparedHint>
    <Type>32bit unsigned</Type>
  </Type>
  <Type>
    <UsrType>TRetypeType</UsrType>
    <Name>int8_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>  typedef signed char int8_t ;\n
</PreparedHint>
    <Type>8bit signed</Type>
  </Type>
</UserTypes>

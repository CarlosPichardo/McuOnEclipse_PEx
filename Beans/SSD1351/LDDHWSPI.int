<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>LDDHWSPI</Name>
  <Description>Interface "SSD1351\LDDHWSPI" for component SSD1351, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.001</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <EmptySection_DummyValue/>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>SPIMaster_LDD</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>uint8_t</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>8bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>uint16_t</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef word uint16_t ;\n
</PreparedHint>
      <Type>16bit unsigned</Type>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>uint32_t</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef dword uint32_t ;\n
</PreparedHint>
      <Type>32bit unsigned</Type>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>LDD_SPIMASTER_TError</Name>
      <Hint>Error flags.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef uint32_t LDD_SPIMASTER_TError ;/* Error flags. */\n
</PreparedHint>
      <Type>uint32_t</Type>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>LDD_DMA_TErrorFlags</Name>
      <Hint>DMA channel transfer error flags. (For further information see the DMAChannel_LDD component documentation.)</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef uint32_t LDD_DMA_TErrorFlags ;/* DMA channel transfer error flags. (For further information see the DMAChannel_LDD component documentation.) */\n
</PreparedHint>
      <Type>uint32_t</Type>
    </Type>
    <Type>
      <UsrType>TRetypeType</UsrType>
      <Name>LDD_SPIMASTER_TDataWidth</Name>
      <Hint>Bit length</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef word LDD_SPIMASTER_TDataWidth ;/* Bit length */\n
</PreparedHint>
      <Type>16bit unsigned</Type>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>LDD_SPIMASTER_TParity</Name>
      <Hint>Parity type&lt;br/&gt;&lt;dl&gt;&lt;dt&gt;PARITY_NONE&lt;/dt&gt;&lt;dd&gt;No parity&lt;/dd&gt;&lt;dt&gt;PARITY_ODD&lt;/dt&gt;&lt;dd&gt;Odd parity&lt;/dd&gt;&lt;dt&gt;PARITY_EVEN&lt;/dt&gt;&lt;dd&gt;Even parity&lt;/dd&gt;&lt;/dl&gt;</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>  typedef enum { /* Parity type&lt;br/&gt;&lt;dl&gt;&lt;dt&gt;PARITY_NONE&lt;/dt&gt;&lt;dd&gt;No parity&lt;/dd&gt;&lt;dt&gt;PARITY_ODD&lt;/dt&gt;&lt;dd&gt;Odd parity&lt;/dd&gt;&lt;dt&gt;PARITY_EVEN&lt;/dt&gt;&lt;dd&gt;Even parity&lt;/dd&gt;&lt;/dl&gt; */\n
    PARITY_NONE,\n
    PARITY_ODD,\n
    PARITY_EVEN\n
  } LDD_SPIMASTER_TParity;\n
</PreparedHint>
      <EnumCount>3</EnumCount>
      <Enum>PARITY_NONE</Enum>
      <Enum>PARITY_ODD</Enum>
      <Enum>PARITY_EVEN</Enum>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>TComData</Name>
      <Hint>User type for communication. Size of this type depends on the communication data width. See &lt;a href="SyncMaster_LDD.html"&gt;General Info&lt;/a&gt;.</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* User type for communication. Size of this type depends on the communication data width. See &lt;a href="SyncMaster_LDD.html"&gt;General Info&lt;/a&gt;. */\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TEnumType</UsrType>
      <Name>TDMATransferId</Name>
      <Hint>DMA transfer identification</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef enum { /* DMA transfer identification */\n
    enum\n
  } &lt;i&gt;ComponentName_&lt;/i&gt;TDMATransferId;\n
</PreparedHint>
      <EnumCount>1</EnumCount>
      <Enum>enum</Enum>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TUserDataPtr</Name>
      <Hint>Pointer to the RTOS device structure. This pointer will be passed to all events as parameter.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Pointer to the RTOS device structure. This pointer will be passed to all events as parameter. */\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit signed</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceDataPtr</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit signed</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TError</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TEventMask</Name>
      <Hint>Event mask type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Event mask type. */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TData</Name>
      <Hint/>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>void\n
</PreparedHint>
      <Type>void</Type>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceData</Name>
      <Hint>Pointer to this type, specifying the private component state information and data, has to be passed as a parameter to every component's method. LDD global type (not specific for component and component instance).</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>void /* Pointer to this type, specifying the private component state information and data, has to be passed as a parameter to every component's method. LDD global type (not specific for component and component instance). */\n
</PreparedHint>
      <Type>void</Type>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TUserData</Name>
      <Hint>Pointer to this type specifying the user or RTOS specific data will be passed as an event or callback parameter. LDD global type (not specific for component and component instance).</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>void /* Pointer to this type specifying the user or RTOS specific data will be passed as an event or callback parameter. LDD global type (not specific for component and component instance). */\n
</PreparedHint>
      <Type>void</Type>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDeviceData*</Name>
      <Hint>Pointer to this type, specifying the private component state information and data, has to be passed as a parameter to every component's method. LDD global type (not specific for component and component instance).</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>void* /* Pointer to this type, specifying the private component state information and data, has to be passed as a parameter to every component's method. LDD global type (not specific for component and component instance). */\n
</PreparedHint>
      <Type>void*</Type>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TPinMask</Name>
      <Hint>Bit mask of pins that need to be connected</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Bit mask of pins that need to be connected */\n
</PreparedHint>
      <Type/>
      <HWTestType>32bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TClockConfiguration</Name>
      <Hint>CPU clock configuration type. Index of the pre-configured clock configuration in the CPU component.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* CPU clock configuration type. Index of the pre-configured clock configuration in the CPU component. */\n
</PreparedHint>
      <Type/>
      <HWTestType>8bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverOperationMode</Name>
      <Hint>Driver operation mode type.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Driver operation mode type. */\n
</PreparedHint>
      <Type/>
      <HWTestType>8bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallback</Name>
      <Hint>Callback type used for definition of callback functions. </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Callback type used for definition of callback functions.  */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TDriverState</Name>
      <Hint>Driver state type.  </Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Driver state type.   */\n
</PreparedHint>
      <Type/>
      <HWTestType>16bit unsigned</HWTestType>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>LDD_SPIMASTER_TStats</Name>
      <Hint>Communication statistics</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Communication statistics */\n
    uint32_t RxChars; /* Number of received characters */\n
    uint32_t TxChars; /* Number of transmitted characters */\n
    uint32_t RxParityErrors; /* Number of receiver parity errors, which have occured */\n
    uint32_t RxOverruns; /* Number of receiver overruns, which have occured */\n
  } LDD_SPIMASTER_TStats;\n
</PreparedHint>
      <RecordItem>
        <ItemName>RxChars</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>Number of received characters</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>TxChars</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>Number of transmitted characters</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>RxParityErrors</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>Number of receiver parity errors, which have occured</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>RxOverruns</ItemName>
        <ItemType>uint32_t</ItemType>
        <ItemHint>Number of receiver overruns, which have occured</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>LDD_TCallbackParam</Name>
      <Hint>Callback parameter type used for callback functions.</Hint>
      <Generate>no</Generate>
      <Unique>no</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint> /* Callback parameter type used for callback functions. */\n
</PreparedHint>
      <Type/>
      <HWTestType>pointer</HWTestType>
    </Type>
  </UserTypes>
</Interface>

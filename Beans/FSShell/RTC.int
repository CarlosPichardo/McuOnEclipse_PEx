<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>RTC</Name>
  <Description>Interface "FSShell\RTC" for component FSShell, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.004</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>SetTime</Name>
        <Symbol>SetTime</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Set new time (in binary format), select required 12/24-hour time mode (with AM/PM flag) and enable oscillator. If required time mode is 24-hour, AM/PM flag is ignored.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\n     ERR_RANGE - Parameter out of range\nThese codes are returned from this bean, however this method returns error codes also from I2C bean.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Time</ParName>
          <ParType>TTIME</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to time in binary format (for details see &lt;a href="RTC_I2C_DS1307User Types.html"&gt;bean help - 'User Types' page&lt;/a&gt;).</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(TTIME *Time)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetTime</Name>
        <Symbol>GetTime</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Return time (in binary format). If 24-hour time mode is selected (by SetTime, SetTimeBCD, SetTimeDate, SetTimeDateBCD or SetClockMode), the AM/PM flag return incorrect value.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>true</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\nThese codes are returned from this bean, however this method returns error codes also from I2C bean.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Time</ParName>
          <ParType>TTIME</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to time in binary format (for details see &lt;a href="RTC_I2C_DS1307User Types.html"&gt;bean help - 'User Types' page&lt;/a&gt;).</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(TTIME *Time)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetDate</Name>
        <Symbol>SetDate</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Set new date (in binary format).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\n     ERR_RANGE - Parameter out of range\nThese codes are returned from this bean, however this method returns error codes also from I2C bean.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Date</ParName>
          <ParType>TDATE</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to date in binary format (for details see &lt;a href="RTC_I2C_DS1307User Types.html"&gt;bean help - 'User Types' page&lt;/a&gt;).</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(TDATE *Date)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetDate</Name>
        <Symbol>GetDate</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Return date (in binary format).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code, possible codes:\n     ERR_OK - OK\nThese codes are returned from this bean, however this method returns error codes also from I2C bean.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>Date</ParName>
          <ParType>TDATE</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to date in binary format (for details see &lt;a href="RTC_I2C_DS1307User Types.html"&gt;bean help - 'User Types' page&lt;/a&gt;).</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(TDATE *Date)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>RTC_I2C_DS1307</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>TTIME</Name>
      <Hint>Time in binary format.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Time in binary format. */\n
    byte hour; /* Hours. Possible range for 12-hour mode is from 1 to 12 and for 24 hour mode is from 0 to 23. */\n
    byte min; /* Minutes. */\n
    byte sec; /* Seconds. */\n
    byte mode; /* Clock mode. Possible values: 0 - 12-hour mode, &amp;lt;&amp;gt;0 - 24-hour mode. */\n
    byte am_pm; /* AM/PM flag. Possible values: 0 - AM, &amp;lt;&amp;gt;0 - PM. */\n
  } TTIME;\n
</PreparedHint>
      <RecordItem>
        <ItemName>hour</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Hours. Possible range for 12-hour mode is from 1 to 12 and for 24 hour mode is from 0 to 23.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>min</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Minutes.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>sec</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Seconds.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>mode</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Clock mode. Possible values: 0 - 12-hour mode, &amp;lt;&amp;gt;0 - 24-hour mode.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>am_pm</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>AM/PM flag. Possible values: 0 - AM, &amp;lt;&amp;gt;0 - PM.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>TDATE</Name>
      <Hint>Date in binary format.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Date in binary format. */\n
    byte year; /* Year. */\n
    byte month; /* Month. */\n
    byte day; /* Day. */\n
    byte dayofweek; /* Day of week. Day of week range is from 0 to 6. */\n
  } TDATE;\n
</PreparedHint>
      <RecordItem>
        <ItemName>year</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Year.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>month</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Month.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>day</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Day.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>dayofweek</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Day of week. Day of week range is from 0 to 6.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>TTIMEBCD</Name>
      <Hint>Time in BCD format.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Time in BCD format. */\n
    byte hour; /* Hours. Possible range for 12-hour mode is from 1 to 12 and for 24 hour mode is from 0 to 23 (in BCD format). */\n
    byte min; /* Minutes. */\n
    byte sec; /* Seconds. */\n
    byte mode; /* Clock mode. Possible values: 0 - 12-hour mode, &amp;lt;&amp;gt;0 - 24-hour mode. */\n
    byte am_pm; /* AM/PM flag. Possible values: 0 - AM, &amp;lt;&amp;gt;0 - PM. */\n
  } TTIMEBCD;\n
</PreparedHint>
      <RecordItem>
        <ItemName>hour</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Hours. Possible range for 12-hour mode is from 1 to 12 and for 24 hour mode is from 0 to 23 (in BCD format).</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>min</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Minutes.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>sec</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Seconds.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>mode</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Clock mode. Possible values: 0 - 12-hour mode, &amp;lt;&amp;gt;0 - 24-hour mode.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>am_pm</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>AM/PM flag. Possible values: 0 - AM, &amp;lt;&amp;gt;0 - PM.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>TDATEBCD</Name>
      <Hint>Date in BCD format.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Date in BCD format. */\n
    byte year; /* Year. */\n
    byte month; /* Month. */\n
    byte day; /* Day. */\n
    byte dayofweek; /* Day of week. Day of week range is from 0 to 6. */\n
  } TDATEBCD;\n
</PreparedHint>
      <RecordItem>
        <ItemName>year</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Year.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>month</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Month.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>day</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Day.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>dayofweek</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>Day of week. Day of week range is from 0 to 6.</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PTIME</Name>
      <Hint>Pointer to time in binary format.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef TTIME* PTIME ; /* Pointer to time in binary format. */\n
</PreparedHint>
      <Type>TTIME</Type>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PDATE</Name>
      <Hint>Pointer to date in binary format.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef TDATE* PDATE ; /* Pointer to date in binary format. */\n
</PreparedHint>
      <Type>TDATE</Type>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PTIMEBCD</Name>
      <Hint>Pointer to time in BCD format.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef TTIMEBCD* PTIMEBCD ; /* Pointer to time in BCD format. */\n
</PreparedHint>
      <Type>TTIMEBCD</Type>
    </Type>
    <Type>
      <UsrType>TPointerType</UsrType>
      <Name>PDATEBCD</Name>
      <Hint>Pointer to date in BCD format.</Hint>
      <Generate>yes</Generate>
      <Unique>no</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef TDATEBCD* PDATEBCD ; /* Pointer to date in BCD format. */\n
</PreparedHint>
      <Type>TDATEBCD</Type>
    </Type>
  </UserTypes>
</Interface>
